(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.fontTracer = factory());
})(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var lodash = createCommonjsModule(function (module, exports) {
	(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined$1;

	  /** Used as the semantic version number. */
	  var VERSION = '4.17.21';

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function',
	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;

	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;

	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;

	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;

	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;

	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);

	  /** Used to match leading whitespace. */
	  var reTrimStart = /^\s+/;

	  /** Used to match a single whitespace character. */
	  var reWhitespace = /\s/;

	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;

	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	  /**
	   * Used to validate the `validate` option in `_.template` variable.
	   *
	   * Forbids characters which could potentially change the meaning of the function argument definition:
	   * - "()," (modification of function parameters)
	   * - "=" (default value)
	   * - "[]{}" (destructuring of function parameters)
	   * - "/" (beginning of a comment)
	   * - whitespace
	   */
	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;

	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;

	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';

	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');

	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');

	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');

	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();

	  /** Detect free variable `exports`. */
	  var freeExports = exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;

	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;

	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      // Use `util.types` for Node.js 10+.
	      var types = freeModule && freeModule.require && freeModule.require('util').types;

	      if (types) {
	        return types;
	      }

	      // Legacy `process.binding('util')` for Node.js < 10.
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());

	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }

	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;

	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }

	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }

	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;

	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }

	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }

	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;

	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');

	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }

	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }

	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }

	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }

	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }

	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined$1 : object[key];
	    };
	  }

	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;

	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined$1) {
	        result = result === undefined$1 ? current : (result + current);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);

	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }

	  /**
	   * The base implementation of `_.trim`.
	   *
	   * @private
	   * @param {string} string The string to trim.
	   * @returns {string} Returns the trimmed string.
	   */
	  function baseTrim(string) {
	    return string
	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	      : string;
	  }

	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }

	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }

	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }

	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;

	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;

	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }

	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;

	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined$1 : object[key];
	  }

	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }

	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }

	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];

	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }

	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);

	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }

	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }

	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);

	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }

	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }

	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }

	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }

	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedEndIndex(string) {
	    var index = string.length;

	    while (index-- && reWhitespace.test(string.charAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }

	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }

	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];

	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());

	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;

	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined$1,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
	        symIterator = Symbol ? Symbol.iterator : undefined$1,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());

	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;

	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);

	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined$1;
	        return result;
	      };
	    }());

	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined$1;
	    }

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined$1 : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
	    }

	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
	    }

	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
	      return this;
	    }

	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }

	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      return index < 0 ? undefined$1 : data[index][1];
	    }

	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }

	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);

	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }

	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;

	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }

	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }

	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }

	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }

	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }

	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;

	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }

	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;

	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }

	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }

	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }

	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }

	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }

	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);

	      this.size = data.size;
	      return result;
	    }

	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }

	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }

	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }

	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;

	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
	    }

	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }

	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }

	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined$1 && !eq(object[key], value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined$1 && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }

	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }

	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }

	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;

	      while (++index < length) {
	        result[index] = skip ? undefined$1 : get(object, paths[index]);
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined$1) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined$1) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }

	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined$1) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;

	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);

	      if (isSet(value)) {
	        value.forEach(function(subValue) {
	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	        });
	      } else if (isMap(value)) {
	        value.forEach(function(subValue, key) {
	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	      }

	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);

	      var props = isArr ? undefined$1 : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }

	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];

	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
	    }

	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;

	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);

	        if (current != null && (computed === undefined$1
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;

	      predicate || (predicate = isFlattenable);
	      result || (result = []);

	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }

	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);

	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined$1;
	    }

	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }

	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined$1 ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }

	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }

	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }

	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }

	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }

	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];

	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined$1;
	      }
	      array = arrays[0];

	      var index = -1,
	          seen = caches[0];

	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined$1 : apply(func, object, args);
	    }

	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }

	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }

	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }

	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);

	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;

	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;

	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }

	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined$1 && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined$1
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }

	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }

	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }

	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }

	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }

	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];

	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }

	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined$1 && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        stack || (stack = new Stack);
	        if (isObject(srcValue)) {
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	            : undefined$1;

	          if (newValue === undefined$1) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = safeGet(object, key),
	          srcValue = safeGet(source, key),
	          stacked = stack.get(srcValue);

	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined$1;

	      var isCommon = newValue === undefined$1;

	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || isFunction(objValue)) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }

	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined$1;
	    }

	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      if (iteratees.length) {
	        iteratees = arrayMap(iteratees, function(iteratee) {
	          if (isArray(iteratee)) {
	            return function(value) {
	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	            }
	          }
	          return iteratee;
	        });
	      } else {
	        iteratees = [identity];
	      }

	      var index = -1;
	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }

	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};

	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;

	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;

	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;

	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }

	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);

	      return result;
	    }

	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }

	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }

	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }

	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;

	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	          return object;
	        }

	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
	          if (newValue === undefined$1) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };

	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      var low = 0,
	          high = array == null ? 0 : array.length;
	      if (high === 0) {
	        return 0;
	      }

	      value = iteratee(value);
	      var valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined$1;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined$1,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);

	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }

	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;

	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;

	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }

	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }

	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}

	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }

	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);

	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;

	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }

	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};

	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined$1;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }

	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }

	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }

	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }

	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;

	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined$1 ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }

	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };

	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	      buffer.copy(result);
	      return result;
	    }

	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }

	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }

	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }

	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }

	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }

	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined$1,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);

	        var othIsDefined = other !== undefined$1,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);

	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }

	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;

	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;

	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];

	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined$1;

	        if (newValue === undefined$1) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }

	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }

	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }

	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }

	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined$1,
	            guard = length > 2 ? sources[2] : undefined$1;

	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined$1;

	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined$1 : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;

	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);

	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined$1;

	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);

	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);

	        return chr[methodName]() + trailing;
	      };
	    }

	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);

	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
	            args, holders, undefined$1, undefined$1, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;

	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined$1 : createCtor(func);

	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }

	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined$1 && other === undefined$1) {
	          return defaultValue;
	        }
	        if (value !== undefined$1) {
	          result = value;
	        }
	        if (other !== undefined$1) {
	          if (result === undefined$1) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }

	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }

	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);

	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined$1;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined$1) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }

	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined$1,
	          newHoldersRight = isCurry ? undefined$1 : holders,
	          newPartials = isCurry ? partials : undefined$1,
	          newPartialsRight = isCurry ? undefined$1 : partials;

	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];

	      var result = wrapFunc.apply(undefined$1, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }

	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision && nativeIsFinite(number)) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));

	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };

	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined$1;
	      }
	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined$1 ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;

	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined$1;
	      }
	      var data = isBindKey ? undefined$1 : getData(func);

	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];

	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined$1
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);

	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined$1, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined$1 ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }

	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined$1 : value;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Check that cyclic values are equal.
	      var arrStacked = stack.get(array);
	      var othStacked = stack.get(other);
	      if (arrStacked && othStacked) {
	        return arrStacked == other && othStacked == array;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

	      stack.set(array, other);
	      stack.set(other, array);

	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined$1) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;

	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;

	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');

	        case mapTag:
	          var convert = mapToArray;

	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);

	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;

	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;

	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Check that cyclic values are equal.
	      var objStacked = stack.get(object);
	      var othStacked = stack.get(other);
	      if (objStacked && othStacked) {
	        return objStacked == other && othStacked == object;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);

	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];

	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined$1
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }

	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined$1, flatten), func + '');
	    }

	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }

	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }

	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }

	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }

	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;

	      while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined$1;
	    }

	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];

	      try {
	        value[symToStringTag] = undefined$1;
	        var unmasked = true;
	      } catch (e) {}

	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };

	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };

	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;

	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined$1,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }

	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length,
	          result = false;

	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case dataViewTag:
	          return cloneDataView(object, isDeep);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);

	        case mapTag:
	          return new Ctor;

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          return cloneRegExp(object);

	        case setTag:
	          return new Ctor;

	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }

	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }

	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      var type = typeof value;
	      length = length == null ? MAX_SAFE_INTEGER : length;

	      return !!length &&
	        (type == 'number' ||
	          (type != 'symbol' && reIsUint.test(value))) &&
	            (value > -1 && value % 1 == 0 && value < length);
	    }

	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }

	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];

	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }

	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;

	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	      return value === proto;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined$1 || (key in Object(object)));
	      };
	    }

	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });

	      var cache = result.cache;
	      return result;
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }

	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);

	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }

	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
	      }
	      return array;
	    }

	    /**
	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to get.
	     * @returns {*} Returns the property value.
	     */
	    function safeGet(object, key) {
	      if (key === 'constructor' && typeof object[key] === 'function') {
	        return;
	      }

	      if (key == '__proto__') {
	        return;
	      }

	      return object[key];
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);

	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };

	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);

	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }

	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;

	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined$1, arguments);
	      };
	    }

	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;

	      size = size === undefined$1 ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];

	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }

	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (string.charCodeAt(0) === 46 /* . */) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, subString) {
	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });

	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }

	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }

	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;

	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }

	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined$1;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }

	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }

	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }

	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }

	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};

	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined$1;
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }

	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      if (iteratee === last(mapped)) {
	        iteratee = undefined$1;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });

	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);

	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined$1, comparator)
	        : [];
	    });

	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined$1;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined$1) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }

	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
	    }

	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);

	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }

	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined$1, comparator)
	        : array;
	    }

	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);

	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));

	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined$1 ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }

	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }

	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }

	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }

	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }

	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined$1, group);
	      });
	    }

	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined$1;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });

	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
	    });

	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);

	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }

	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
	      return unzipWith(arrays, iteratee);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }

	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };

	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined$1
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined$1);
	        }
	        return array;
	      });
	    });

	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined$1) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined$1 : this.__values__[this.__index__++];

	      return { 'done': done, 'value': value };
	    }

	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }

	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined$1;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined$1
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }

	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     *
	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	     * // => objects for ['fred', 'barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);

	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }

	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined$1 ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }

	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });

	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });

	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined$1 : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;

	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }

	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }

	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined$1;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined$1 : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined$1;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined$1 : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;

	        lastArgs = lastThis = undefined$1;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }

	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }

	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            timeWaiting = wait - timeSinceLastCall;

	        return maxing
	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	          : timeWaiting;
	      }

	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;

	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }

	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }

	      function trailingEdge(time) {
	        timerId = undefined$1;

	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined$1;
	        return result;
	      }

	      function cancel() {
	        if (timerId !== undefined$1) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
	      }

	      function flush() {
	        return timerId === undefined$1 ? result : trailingEdge(now());
	      }

	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);

	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;

	        if (isInvoking) {
	          if (timerId === undefined$1) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            clearTimeout(timerId);
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined$1) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }

	    // Expose `MapCache`.
	    memoize.Cache = MapCache;

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);

	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });

	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
	    });

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined$1 ? start : toInteger(start);
	      return baseRest(func, start);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);

	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }

	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }

	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }

	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }

	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }

	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }

	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });

	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;

	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }

	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }

	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      var result = customizer ? customizer(value, other) : undefined$1;
	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }

	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }

	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }

	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }

	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined$1;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }

	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	      return func(value);
	    }

	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }

	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;

	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }

	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }

	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = baseTrim(value);
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }

	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }

	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });

	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });

	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });

	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });

	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);

	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }

	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(object, sources) {
	      object = Object(object);

	      var index = -1;
	      var length = sources.length;
	      var guard = length > 2 ? sources[2] : undefined$1;

	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	        length = 1;
	      }

	      while (++index < length) {
	        var source = sources[index];
	        var props = keysIn(source);
	        var propsIndex = -1;
	        var propsLength = props.length;

	        while (++propsIndex < propsLength) {
	          var key = props[propsIndex];
	          var value = object[key];

	          if (value === undefined$1 ||
	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	            object[key] = source[key];
	          }
	        }
	      }

	      return object;
	    });

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined$1, customDefaultsMerge);
	      return apply(mergeWith, undefined$1, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }

	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }

	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }

	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }

	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined$1 : baseGet(object, path);
	      return result === undefined$1 ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }

	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      result[value] = key;
	    }, constant(identity));

	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (value != null &&
	          typeof value.toString != 'function') {
	        value = nativeObjectToString.call(value);
	      }

	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);

	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);

	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }

	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });

	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });

	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }

	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });

	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }

	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);

	      var index = -1,
	          length = path.length;

	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined$1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined$1 : object[toKey(path[index])];
	        if (value === undefined$1) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }

	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }

	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }

	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);

	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }

	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }

	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }

	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined$1) {
	        upper = lower;
	        lower = undefined$1;
	      }
	      if (upper !== undefined$1) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined$1) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }

	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined$1) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }

	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined$1;
	      }
	      if (floating === undefined$1) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined$1;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined$1;
	        }
	      }
	      if (lower === undefined$1 && upper === undefined$1) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined$1) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });

	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }

	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);

	      var length = string.length;
	      position = position === undefined$1
	        ? length
	        : baseClamp(toInteger(position), 0, length);

	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);

	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }

	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);

	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }

	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined$1;
	      }
	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }

	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);

	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined$1;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      // The sourceURL gets injected into the source that's eval-ed, so be careful
	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
	      // and escape the comment, thus injecting code that gets evaled.
	      var sourceURL = '//# sourceURL=' +
	        (hasOwnProperty.call(options, 'sourceURL')
	          ? (options.sourceURL + '').replace(/\s/g, ' ')
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Throw an error if a forbidden character was found in `variable`, to prevent
	      // potential command injection attacks.
	      else if (reForbiddenIdentifierChars.test(variable)) {
	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
	      }

	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined$1, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }

	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return baseTrim(string);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

	      return castSlice(strSymbols, start, end).join('');
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.slice(0, trimmedEndIndex(string) + 1);
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

	      return castSlice(strSymbols, 0, end).join('');
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined$1)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));

	      return castSlice(strSymbols, start).join('');
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);

	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);

	      if (separator === undefined$1) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;

	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });

	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined$1 : pattern;

	      if (pattern === undefined$1) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined$1, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });

	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();

	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });

	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }

	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }

	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * **Note:** Multiple values can be checked by combining several matchers
	     * using `_.overSome`
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     *
	     * // Checking for several possible values
	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }

	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);

	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);

	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);

	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });

	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }

	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }

	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);

	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);

	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * Following shorthands are possible for providing predicates.
	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     *
	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
	     */
	    var overSome = createOver(arraySome);

	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined$1 : baseGet(object, path);
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();

	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);

	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }

	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }

	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }

	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }

	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }

	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);

	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;

	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }

	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);

	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);

	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined$1;
	    }

	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }

	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }

	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined$1;
	    }

	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined$1;
	    }

	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);

	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);

	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }

	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }

	    /*------------------------------------------------------------------------*/

	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;

	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;

	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();

	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };

	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };

	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });

	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined$1) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;

	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });

	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });

	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name + '';
	        if (!hasOwnProperty.call(realNames, key)) {
	          realNames[key] = [];
	        }
	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined$1
	    }];

	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;

	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(commonjsGlobal));
	});

	var openParentheses$1 = "(".charCodeAt(0);
	var closeParentheses$1 = ")".charCodeAt(0);
	var singleQuote$1 = "'".charCodeAt(0);
	var doubleQuote$1 = '"'.charCodeAt(0);
	var backslash$1 = "\\".charCodeAt(0);
	var slash$1 = "/".charCodeAt(0);
	var comma$1 = ",".charCodeAt(0);
	var colon$1 = ":".charCodeAt(0);
	var star$1 = "*".charCodeAt(0);
	var uLower = "u".charCodeAt(0);
	var uUpper = "U".charCodeAt(0);
	var plus$2 = "+".charCodeAt(0);
	var isUnicodeRange = /^[a-f0-9?-]+$/i;

	var parse$1 = function(input) {
	  var tokens = [];
	  var value = input;

	  var next,
	    quote,
	    prev,
	    token,
	    escape,
	    escapePos,
	    whitespacePos,
	    parenthesesOpenPos;
	  var pos = 0;
	  var code = value.charCodeAt(pos);
	  var max = value.length;
	  var stack = [{ nodes: tokens }];
	  var balanced = 0;
	  var parent;

	  var name = "";
	  var before = "";
	  var after = "";

	  while (pos < max) {
	    // Whitespaces
	    if (code <= 32) {
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      token = value.slice(pos, next);

	      prev = tokens[tokens.length - 1];
	      if (code === closeParentheses$1 && balanced) {
	        after = token;
	      } else if (prev && prev.type === "div") {
	        prev.after = token;
	        prev.sourceEndIndex += token.length;
	      } else if (
	        code === comma$1 ||
	        code === colon$1 ||
	        (code === slash$1 &&
	          value.charCodeAt(next + 1) !== star$1 &&
	          (!parent ||
	            (parent && parent.type === "function" && parent.value !== "calc")))
	      ) {
	        before = token;
	      } else {
	        tokens.push({
	          type: "space",
	          sourceIndex: pos,
	          sourceEndIndex: next,
	          value: token
	        });
	      }

	      pos = next;

	      // Quotes
	    } else if (code === singleQuote$1 || code === doubleQuote$1) {
	      next = pos;
	      quote = code === singleQuote$1 ? "'" : '"';
	      token = {
	        type: "string",
	        sourceIndex: pos,
	        quote: quote
	      };
	      do {
	        escape = false;
	        next = value.indexOf(quote, next + 1);
	        if (~next) {
	          escapePos = next;
	          while (value.charCodeAt(escapePos - 1) === backslash$1) {
	            escapePos -= 1;
	            escape = !escape;
	          }
	        } else {
	          value += quote;
	          next = value.length - 1;
	          token.unclosed = true;
	        }
	      } while (escape);
	      token.value = value.slice(pos + 1, next);
	      token.sourceEndIndex = token.unclosed ? next : next + 1;
	      tokens.push(token);
	      pos = next + 1;
	      code = value.charCodeAt(pos);

	      // Comments
	    } else if (code === slash$1 && value.charCodeAt(pos + 1) === star$1) {
	      next = value.indexOf("*/", pos);

	      token = {
	        type: "comment",
	        sourceIndex: pos,
	        sourceEndIndex: next + 2
	      };

	      if (next === -1) {
	        token.unclosed = true;
	        next = value.length;
	        token.sourceEndIndex = next;
	      }

	      token.value = value.slice(pos + 2, next);
	      tokens.push(token);

	      pos = next + 2;
	      code = value.charCodeAt(pos);

	      // Operation within calc
	    } else if (
	      (code === slash$1 || code === star$1) &&
	      parent &&
	      parent.type === "function" &&
	      parent.value === "calc"
	    ) {
	      token = value[pos];
	      tokens.push({
	        type: "word",
	        sourceIndex: pos - before.length,
	        sourceEndIndex: pos + token.length,
	        value: token
	      });
	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Dividers
	    } else if (code === slash$1 || code === comma$1 || code === colon$1) {
	      token = value[pos];

	      tokens.push({
	        type: "div",
	        sourceIndex: pos - before.length,
	        sourceEndIndex: pos + token.length,
	        value: token,
	        before: before,
	        after: ""
	      });
	      before = "";

	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Open parentheses
	    } else if (openParentheses$1 === code) {
	      // Whitespaces after open parentheses
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      parenthesesOpenPos = pos;
	      token = {
	        type: "function",
	        sourceIndex: pos - name.length,
	        value: name,
	        before: value.slice(parenthesesOpenPos + 1, next)
	      };
	      pos = next;

	      if (name === "url" && code !== singleQuote$1 && code !== doubleQuote$1) {
	        next -= 1;
	        do {
	          escape = false;
	          next = value.indexOf(")", next + 1);
	          if (~next) {
	            escapePos = next;
	            while (value.charCodeAt(escapePos - 1) === backslash$1) {
	              escapePos -= 1;
	              escape = !escape;
	            }
	          } else {
	            value += ")";
	            next = value.length - 1;
	            token.unclosed = true;
	          }
	        } while (escape);
	        // Whitespaces before closed
	        whitespacePos = next;
	        do {
	          whitespacePos -= 1;
	          code = value.charCodeAt(whitespacePos);
	        } while (code <= 32);
	        if (parenthesesOpenPos < whitespacePos) {
	          if (pos !== whitespacePos + 1) {
	            token.nodes = [
	              {
	                type: "word",
	                sourceIndex: pos,
	                sourceEndIndex: whitespacePos + 1,
	                value: value.slice(pos, whitespacePos + 1)
	              }
	            ];
	          } else {
	            token.nodes = [];
	          }
	          if (token.unclosed && whitespacePos + 1 !== next) {
	            token.after = "";
	            token.nodes.push({
	              type: "space",
	              sourceIndex: whitespacePos + 1,
	              sourceEndIndex: next,
	              value: value.slice(whitespacePos + 1, next)
	            });
	          } else {
	            token.after = value.slice(whitespacePos + 1, next);
	            token.sourceEndIndex = next;
	          }
	        } else {
	          token.after = "";
	          token.nodes = [];
	        }
	        pos = next + 1;
	        token.sourceEndIndex = token.unclosed ? next : pos;
	        code = value.charCodeAt(pos);
	        tokens.push(token);
	      } else {
	        balanced += 1;
	        token.after = "";
	        token.sourceEndIndex = pos + 1;
	        tokens.push(token);
	        stack.push(token);
	        tokens = token.nodes = [];
	        parent = token;
	      }
	      name = "";

	      // Close parentheses
	    } else if (closeParentheses$1 === code && balanced) {
	      pos += 1;
	      code = value.charCodeAt(pos);

	      parent.after = after;
	      parent.sourceEndIndex += after.length;
	      after = "";
	      balanced -= 1;
	      stack[stack.length - 1].sourceEndIndex = pos;
	      stack.pop();
	      parent = stack[balanced];
	      tokens = parent.nodes;

	      // Words
	    } else {
	      next = pos;
	      do {
	        if (code === backslash$1) {
	          next += 1;
	        }
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (
	        next < max &&
	        !(
	          code <= 32 ||
	          code === singleQuote$1 ||
	          code === doubleQuote$1 ||
	          code === comma$1 ||
	          code === colon$1 ||
	          code === slash$1 ||
	          code === openParentheses$1 ||
	          (code === star$1 &&
	            parent &&
	            parent.type === "function" &&
	            parent.value === "calc") ||
	          (code === slash$1 &&
	            parent.type === "function" &&
	            parent.value === "calc") ||
	          (code === closeParentheses$1 && balanced)
	        )
	      );
	      token = value.slice(pos, next);

	      if (openParentheses$1 === code) {
	        name = token;
	      } else if (
	        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
	        plus$2 === token.charCodeAt(1) &&
	        isUnicodeRange.test(token.slice(2))
	      ) {
	        tokens.push({
	          type: "unicode-range",
	          sourceIndex: pos,
	          sourceEndIndex: next,
	          value: token
	        });
	      } else {
	        tokens.push({
	          type: "word",
	          sourceIndex: pos,
	          sourceEndIndex: next,
	          value: token
	        });
	      }

	      pos = next;
	    }
	  }

	  for (pos = stack.length - 1; pos; pos -= 1) {
	    stack[pos].unclosed = true;
	    stack[pos].sourceEndIndex = value.length;
	  }

	  return stack[0].nodes;
	};

	var walk$1 = function walk(nodes, cb, bubble) {
	  var i, max, node, result;

	  for (i = 0, max = nodes.length; i < max; i += 1) {
	    node = nodes[i];
	    if (!bubble) {
	      result = cb(node, i, nodes);
	    }

	    if (
	      result !== false &&
	      node.type === "function" &&
	      Array.isArray(node.nodes)
	    ) {
	      walk(node.nodes, cb, bubble);
	    }

	    if (bubble) {
	      cb(node, i, nodes);
	    }
	  }
	};

	function stringifyNode$1(node, custom) {
	  var type = node.type;
	  var value = node.value;
	  var buf;
	  var customResult;

	  if (custom && (customResult = custom(node)) !== undefined) {
	    return customResult;
	  } else if (type === "word" || type === "space") {
	    return value;
	  } else if (type === "string") {
	    buf = node.quote || "";
	    return buf + value + (node.unclosed ? "" : buf);
	  } else if (type === "comment") {
	    return "/*" + value + (node.unclosed ? "" : "*/");
	  } else if (type === "div") {
	    return (node.before || "") + value + (node.after || "");
	  } else if (Array.isArray(node.nodes)) {
	    buf = stringify$1(node.nodes, custom);
	    if (type !== "function") {
	      return buf;
	    }
	    return (
	      value +
	      "(" +
	      (node.before || "") +
	      buf +
	      (node.after || "") +
	      (node.unclosed ? "" : ")")
	    );
	  }
	  return value;
	}

	function stringify$1(nodes, custom) {
	  var result, i;

	  if (Array.isArray(nodes)) {
	    result = "";
	    for (i = nodes.length - 1; ~i; i -= 1) {
	      result = stringifyNode$1(nodes[i], custom) + result;
	    }
	    return result;
	  }
	  return stringifyNode$1(nodes, custom);
	}

	var stringify_1$1 = stringify$1;

	var minus$1 = "-".charCodeAt(0);
	var plus$1 = "+".charCodeAt(0);
	var dot$1 = ".".charCodeAt(0);
	var exp$1 = "e".charCodeAt(0);
	var EXP$1 = "E".charCodeAt(0);

	// Check if three code points would start a number
	// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
	function likeNumber(value) {
	  var code = value.charCodeAt(0);
	  var nextCode;

	  if (code === plus$1 || code === minus$1) {
	    nextCode = value.charCodeAt(1);

	    if (nextCode >= 48 && nextCode <= 57) {
	      return true;
	    }

	    var nextNextCode = value.charCodeAt(2);

	    if (nextCode === dot$1 && nextNextCode >= 48 && nextNextCode <= 57) {
	      return true;
	    }

	    return false;
	  }

	  if (code === dot$1) {
	    nextCode = value.charCodeAt(1);

	    if (nextCode >= 48 && nextCode <= 57) {
	      return true;
	    }

	    return false;
	  }

	  if (code >= 48 && code <= 57) {
	    return true;
	  }

	  return false;
	}

	// Consume a number
	// https://www.w3.org/TR/css-syntax-3/#consume-number
	var unit$1 = function(value) {
	  var pos = 0;
	  var length = value.length;
	  var code;
	  var nextCode;
	  var nextNextCode;

	  if (length === 0 || !likeNumber(value)) {
	    return false;
	  }

	  code = value.charCodeAt(pos);

	  if (code === plus$1 || code === minus$1) {
	    pos++;
	  }

	  while (pos < length) {
	    code = value.charCodeAt(pos);

	    if (code < 48 || code > 57) {
	      break;
	    }

	    pos += 1;
	  }

	  code = value.charCodeAt(pos);
	  nextCode = value.charCodeAt(pos + 1);

	  if (code === dot$1 && nextCode >= 48 && nextCode <= 57) {
	    pos += 2;

	    while (pos < length) {
	      code = value.charCodeAt(pos);

	      if (code < 48 || code > 57) {
	        break;
	      }

	      pos += 1;
	    }
	  }

	  code = value.charCodeAt(pos);
	  nextCode = value.charCodeAt(pos + 1);
	  nextNextCode = value.charCodeAt(pos + 2);

	  if (
	    (code === exp$1 || code === EXP$1) &&
	    ((nextCode >= 48 && nextCode <= 57) ||
	      ((nextCode === plus$1 || nextCode === minus$1) &&
	        nextNextCode >= 48 &&
	        nextNextCode <= 57))
	  ) {
	    pos += nextCode === plus$1 || nextCode === minus$1 ? 3 : 2;

	    while (pos < length) {
	      code = value.charCodeAt(pos);

	      if (code < 48 || code > 57) {
	        break;
	      }

	      pos += 1;
	    }
	  }

	  return {
	    number: value.slice(0, pos),
	    unit: value.slice(pos)
	  };
	};

	function ValueParser$1(value) {
	  if (this instanceof ValueParser$1) {
	    this.nodes = parse$1(value);
	    return this;
	  }
	  return new ValueParser$1(value);
	}

	ValueParser$1.prototype.toString = function() {
	  return Array.isArray(this.nodes) ? stringify_1$1(this.nodes) : "";
	};

	ValueParser$1.prototype.walk = function(cb, bubble) {
	  walk$1(this.nodes, cb, bubble);
	  return this;
	};

	ValueParser$1.unit = unit$1;

	ValueParser$1.walk = walk$1;

	ValueParser$1.stringify = stringify_1$1;

	var lib$2 = ValueParser$1;

	var defaultStylesheets = [
	  {
	    predicates: {},
	    // Copied from https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css
	    text: `
/*
 * The default style sheet used to render HTML.
 *
 * Copyright (C) 2000 Lars Knoll (knoll@kde.org)
 * Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 */
@namespace "http://www.w3.org/1999/xhtml";
html {
    display: block
}
/* children of the <head> element all have display:none */
head {
    display: none
}
meta {
    display: none
}
title {
    display: none
}
link {
    display: none
}
style {
    display: none
}
script {
    display: none
}
/* generic block-level elements */
body {
    display: block;
    margin: 8px
}
body:-webkit-full-page-media {
    background-color: rgb(0, 0, 0)
}
p {
    display: block;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1__qem;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
}
div {
    display: block
}
layer {
    display: block
}
article, aside, footer, header, hgroup, main, nav, section {
    display: block
}
marquee {
    display: inline-block;
}
address {
    display: block
}
blockquote {
    display: block;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 40px;
    -webkit-margin-end: 40px;
}
figcaption {
    display: block
}
figure {
    display: block;
    -webkit-margin-before: 1em;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 40px;
    -webkit-margin-end: 40px;
}
q {
    display: inline
}
q:before {
    content: open-quote;
}
q:after {
    content: close-quote;
}
center {
    display: block;
    /* special centering to be able to emulate the html4/netscape behaviour */
    text-align: -webkit-center
}
hr {
    display: block;
    -webkit-margin-before: 0.5em;
    -webkit-margin-after: 0.5em;
    -webkit-margin-start: auto;
    -webkit-margin-end: auto;
    border-style: inset;
    border-width: 1px
}
map {
    display: inline
}
video {
    object-fit: contain;
}
/* heading elements */
h1 {
    display: block;
    font-size: 2em;
    -webkit-margin-before: 0.67__qem;
    -webkit-margin-after: 0.67em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    font-weight: bold
}
:-webkit-any(article,aside,nav,section) h1 {
    font-size: 1.5em;
    -webkit-margin-before: 0.83__qem;
    -webkit-margin-after: 0.83em;
}
:-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) h1 {
    font-size: 1.17em;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1em;
}
:-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) h1 {
    font-size: 1.00em;
    -webkit-margin-before: 1.33__qem;
    -webkit-margin-after: 1.33em;
}
:-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) h1 {
    font-size: .83em;
    -webkit-margin-before: 1.67__qem;
    -webkit-margin-after: 1.67em;
}
:-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) :-webkit-any(article,aside,nav,section) h1 {
    font-size: .67em;
    -webkit-margin-before: 2.33__qem;
    -webkit-margin-after: 2.33em;
}
h2 {
    display: block;
    font-size: 1.5em;
    -webkit-margin-before: 0.83__qem;
    -webkit-margin-after: 0.83em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    font-weight: bold
}
h3 {
    display: block;
    font-size: 1.17em;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    font-weight: bold
}
h4 {
    display: block;
    -webkit-margin-before: 1.33__qem;
    -webkit-margin-after: 1.33em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    font-weight: bold
}
h5 {
    display: block;
    font-size: .83em;
    -webkit-margin-before: 1.67__qem;
    -webkit-margin-after: 1.67em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    font-weight: bold
}
h6 {
    display: block;
    font-size: .67em;
    -webkit-margin-before: 2.33__qem;
    -webkit-margin-after: 2.33em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    font-weight: bold
}
/* tables */
table {
    display: table;
    border-collapse: separate;
    border-spacing: 2px;
    border-color: gray
}
thead {
    display: table-header-group;
    vertical-align: middle;
    border-color: inherit
}
tbody {
    display: table-row-group;
    vertical-align: middle;
    border-color: inherit
}
tfoot {
    display: table-footer-group;
    vertical-align: middle;
    border-color: inherit
}
/* for tables without table section elements (can happen with XHTML or dynamically created tables) */
table > tr {
    vertical-align: middle;
}
col {
    display: table-column
}
colgroup {
    display: table-column-group
}
tr {
    display: table-row;
    vertical-align: inherit;
    border-color: inherit
}
td, th {
    display: table-cell;
    vertical-align: inherit
}
th {
    font-weight: bold
}
caption {
    display: table-caption;
    text-align: -webkit-center
}
/* lists */
ul, menu, dir {
    display: block;
    list-style-type: disc;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    -webkit-padding-start: 40px
}
ol {
    display: block;
    list-style-type: decimal;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    -webkit-padding-start: 40px
}
li {
    display: list-item;
    text-align: -webkit-match-parent;
}
ul ul, ol ul {
    list-style-type: circle
}
ol ol ul, ol ul ul, ul ol ul, ul ul ul {
    list-style-type: square
}
dd {
    display: block;
    -webkit-margin-start: 40px
}
dl {
    display: block;
    -webkit-margin-before: 1__qem;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
}
dt {
    display: block
}
ol ul, ul ol, ul ul, ol ol {
    -webkit-margin-before: 0;
    -webkit-margin-after: 0
}
/* form elements */
form {
    display: block;
    margin-top: 0__qem;
}
label {
    cursor: default;
}
legend {
    display: block;
    -webkit-padding-start: 2px;
    -webkit-padding-end: 2px;
    border: none
}
fieldset {
    display: block;
    -webkit-margin-start: 2px;
    -webkit-margin-end: 2px;
    -webkit-padding-before: 0.35em;
    -webkit-padding-start: 0.75em;
    -webkit-padding-end: 0.75em;
    -webkit-padding-after: 0.625em;
    border: 2px groove ThreeDFace;
    min-width: -webkit-min-content;
}
button {
    -webkit-appearance: button;
}
/* Form controls don't go vertical. */
input, textarea, keygen, select, button, meter, progress {
    -webkit-writing-mode: horizontal-tb !important;
}
input, textarea, keygen, select, button {
    margin: 0__qem;
    /* font: -webkit-small-control; */
    text-rendering: auto; /* FIXME: Remove when tabs work with optimizeLegibility. */
    color: initial;
    letter-spacing: normal;
    word-spacing: normal;
    line-height: normal;
    text-transform: none;
    text-indent: 0;
    text-shadow: none;
    display: inline-block;
    text-align: start;
}
input[type="hidden" i] {
    display: none
}
input {
    -webkit-appearance: textfield;
    padding: 1px;
    background-color: white;
    border: 2px inset;
    -webkit-rtl-ordering: logical;
    -webkit-user-select: text;
    cursor: auto;
}
input[type="search" i] {
    -webkit-appearance: searchfield;
    box-sizing: border-box;
}
input::-webkit-textfield-decoration-container {
    display: flex;
    align-items: center;
    -webkit-user-modify: read-only !important;
    content: none !important;
}
input[type="search" i]::-webkit-textfield-decoration-container {
    direction: ltr;
}
input::-webkit-clear-button {
    -webkit-appearance: searchfield-cancel-button;
    display: inline-block;
    flex: none;
    -webkit-user-modify: read-only !important;
    -webkit-margin-start: 2px;
    opacity: 0;
    pointer-events: none;
}
input:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-clear-button {
    opacity: 1;
    pointer-events: auto;
}
input[type="search" i]::-webkit-search-cancel-button {
    -webkit-appearance: searchfield-cancel-button;
    display: block;
    flex: none;
    -webkit-user-modify: read-only !important;
    -webkit-margin-start: 1px;
    opacity: 0;
    pointer-events: none;
}
input[type="search" i]:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-search-cancel-button {
    opacity: 1;
    pointer-events: auto;
}
input[type="search" i]::-webkit-search-decoration {
    -webkit-appearance: searchfield-decoration;
    display: block;
    flex: none;
    -webkit-user-modify: read-only !important;
    -webkit-align-self: flex-start;
    margin: auto 0;
}
input[type="search" i]::-webkit-search-results-decoration {
    -webkit-appearance: searchfield-results-decoration;
    display: block;
    flex: none;
    -webkit-user-modify: read-only !important;
    -webkit-align-self: flex-start;
    margin: auto 0;
}
input::-webkit-inner-spin-button {
    -webkit-appearance: inner-spin-button;
    display: inline-block;
    cursor: default;
    flex: none;
    align-self: stretch;
    -webkit-user-select: none;
    -webkit-user-modify: read-only !important;
    opacity: 0;
    pointer-events: none;
}
input:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-inner-spin-button {
    opacity: 1;
    pointer-events: auto;
}
keygen, select {
    border-radius: 5px;
}
keygen::-webkit-keygen-select {
    margin: 0px;
}
textarea {
    -webkit-appearance: textarea;
    background-color: white;
    border: 1px solid;
    -webkit-rtl-ordering: logical;
    -webkit-user-select: text;
    flex-direction: column;
    resize: auto;
    cursor: auto;
    padding: 2px;
    white-space: pre-wrap;
    word-wrap: break-word;
}
::-webkit-input-placeholder {
    -webkit-text-security: none;
    color: darkGray;
    pointer-events: none !important;
}
input::-webkit-input-placeholder {
    white-space: pre;
    word-wrap: normal;
    overflow: hidden;
    -webkit-user-modify: read-only !important;
}
input[type="password" i] {
    -webkit-text-security: disc !important;
}
input[type="hidden" i], input[type="image" i], input[type="file" i] {
    -webkit-appearance: initial;
    padding: initial;
    background-color: initial;
    border: initial;
}
input[type="file" i] {
    align-items: baseline;
    color: inherit;
    text-align: start !important;
}
input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {
    background-color: #FAFFBD !important;
    background-image:none !important;
    color: #000000 !important;
}
input[type="radio" i], input[type="checkbox" i] {
    margin: 3px 0.5ex;
    padding: initial;
    background-color: initial;
    border: initial;
}
input[type="button" i], input[type="submit" i], input[type="reset" i] {
    -webkit-appearance: push-button;
    -webkit-user-select: none;
    white-space: pre
}
input[type="file" i]::-webkit-file-upload-button {
    -webkit-appearance: push-button;
    -webkit-user-modify: read-only !important;
    white-space: nowrap;
    margin: 0;
    font-size: inherit;
}
input[type="button" i], input[type="submit" i], input[type="reset" i], input[type="file" i]::-webkit-file-upload-button, button {
    align-items: flex-start;
    text-align: center;
    cursor: default;
    color: ButtonText;
    padding: 2px 6px 3px 6px;
    border: 2px outset ButtonFace;
    background-color: ButtonFace;
    box-sizing: border-box
}
input[type="range" i] {
    -webkit-appearance: slider-horizontal;
    padding: initial;
    border: initial;
    margin: 2px;
    color: #909090;
}
input[type="range" i]::-webkit-slider-container, input[type="range" i]::-webkit-media-slider-container {
    flex: 1;
    min-width: 0;
    box-sizing: border-box;
    -webkit-user-modify: read-only !important;
    display: flex;
}
input[type="range" i]::-webkit-slider-runnable-track {
    flex: 1;
    min-width: 0;
    -webkit-align-self: center;
    box-sizing: border-box;
    -webkit-user-modify: read-only !important;
    display: block;
}
input[type="range" i]::-webkit-slider-thumb, input[type="range" i]::-webkit-media-slider-thumb {
    -webkit-appearance: sliderthumb-horizontal;
    box-sizing: border-box;
    -webkit-user-modify: read-only !important;
    display: block;
}
input[type="button" i]:disabled, input[type="submit" i]:disabled, input[type="reset" i]:disabled,
input[type="file" i]:disabled::-webkit-file-upload-button, button:disabled,
select:disabled, keygen:disabled, optgroup:disabled, option:disabled,
select[disabled]>option {
    color: GrayText
}
input[type="button" i]:active, input[type="submit" i]:active, input[type="reset" i]:active, input[type="file" i]:active::-webkit-file-upload-button, button:active {
    border-style: inset
}
input[type="button" i]:active:disabled, input[type="submit" i]:active:disabled, input[type="reset" i]:active:disabled, input[type="file" i]:active:disabled::-webkit-file-upload-button, button:active:disabled {
    border-style: outset
}
option:-internal-spatial-navigation-focus {
    outline: black dashed 1px;
    outline-offset: -1px;
}
datalist {
    display: none
}
area {
    display: inline;
    cursor: pointer;
}
param {
    display: none
}
input[type="checkbox" i] {
    -webkit-appearance: checkbox;
    box-sizing: border-box;
}
input[type="radio" i] {
    -webkit-appearance: radio;
    box-sizing: border-box;
}
input[type="color" i] {
    -webkit-appearance: square-button;
    width: 44px;
    height: 23px;
    background-color: ButtonFace;
    /* Same as native_theme_base. */
    border: 1px #a9a9a9 solid;
    padding: 1px 2px;
}
input[type="color" i]::-webkit-color-swatch-wrapper {
    display:flex;
    padding: 4px 2px;
    box-sizing: border-box;
    -webkit-user-modify: read-only !important;
    width: 100%;
    height: 100%
}
input[type="color" i]::-webkit-color-swatch {
    background-color: #000000;
    border: 1px solid #777777;
    flex: 1;
    min-width: 0;
    -webkit-user-modify: read-only !important;
}
input[type="color" i][list] {
    -webkit-appearance: menulist;
    width: 88px;
    height: 23px
}
input[type="color" i][list]::-webkit-color-swatch-wrapper {
    padding-left: 8px;
    padding-right: 24px;
}
input[type="color" i][list]::-webkit-color-swatch {
    border-color: #000000;
}
input::-webkit-calendar-picker-indicator {
    display: inline-block;
    width: 0.66em;
    height: 0.66em;
    padding: 0.17em 0.34em;
    -webkit-user-modify: read-only !important;
    opacity: 0;
    pointer-events: none;
}
input::-webkit-calendar-picker-indicator:hover {
    background-color: #eee;
}
input:enabled:read-write:-webkit-any(:focus,:hover)::-webkit-calendar-picker-indicator,
input::-webkit-calendar-picker-indicator:focus {
    opacity: 1;
    pointer-events: auto;
}
input[type="date" i]:disabled::-webkit-clear-button,
input[type="date" i]:disabled::-webkit-inner-spin-button,
input[type="datetime-local" i]:disabled::-webkit-clear-button,
input[type="datetime-local" i]:disabled::-webkit-inner-spin-button,
input[type="month" i]:disabled::-webkit-clear-button,
input[type="month" i]:disabled::-webkit-inner-spin-button,
input[type="week" i]:disabled::-webkit-clear-button,
input[type="week" i]:disabled::-webkit-inner-spin-button,
input:disabled::-webkit-calendar-picker-indicator,
input[type="date" i][readonly]::-webkit-clear-button,
input[type="date" i][readonly]::-webkit-inner-spin-button,
input[type="datetime-local" i][readonly]::-webkit-clear-button,
input[type="datetime-local" i][readonly]::-webkit-inner-spin-button,
input[type="month" i][readonly]::-webkit-clear-button,
input[type="month" i][readonly]::-webkit-inner-spin-button,
input[type="week" i][readonly]::-webkit-clear-button,
input[type="week" i][readonly]::-webkit-inner-spin-button,
input[readonly]::-webkit-calendar-picker-indicator {
    visibility: hidden;
}
select {
    -webkit-appearance: menulist;
    box-sizing: border-box;
    align-items: center;
    border: 1px solid;
    white-space: pre;
    -webkit-rtl-ordering: logical;
    color: black;
    background-color: white;
    cursor: default;
}
select:not(:-internal-list-box) {
    overflow: visible !important;
}
select:-internal-list-box {
    -webkit-appearance: listbox;
    align-items: flex-start;
    border: 1px inset gray;
    border-radius: initial;
    overflow-x: hidden;
    overflow-y: scroll;
    vertical-align: text-bottom;
    -webkit-user-select: none;
    white-space: nowrap;
}
optgroup {
    font-weight: bolder;
    display: block;
}
option {
    font-weight: normal;
    display: block;
    padding: 0 2px 1px 2px;
    white-space: pre;
    min-height: 1.2em;
}
select:-internal-list-box optgroup option:before {
    content: "\\00a0\\00a0\\00a0\\00a0";;
}
select:-internal-list-box option,
select:-internal-list-box optgroup {
    line-height: initial !important;
}
select:-internal-list-box:focus option:checked {
    background-color: -internal-active-list-box-selection !important;
    color: -internal-active-list-box-selection-text !important;
}
select:-internal-list-box option:checked {
    background-color: -internal-inactive-list-box-selection !important;
    color: -internal-inactive-list-box-selection-text !important;
}
select:-internal-list-box:disabled option:checked,
select:-internal-list-box option:checked:disabled {
    color: gray !important;
}
select:-internal-list-box hr {
    border-style: none;
}
output {
    display: inline;
}
/* meter */
meter {
    -webkit-appearance: meter;
    box-sizing: border-box;
    display: inline-block;
    height: 1em;
    width: 5em;
    vertical-align: -0.2em;
}
meter::-webkit-meter-inner-element {
    -webkit-appearance: inherit;
    box-sizing: inherit;
    -webkit-user-modify: read-only !important;
    height: 100%;
    width: 100%;
}
meter::-webkit-meter-bar {
    background: linear-gradient(to bottom, #ddd, #eee 20%, #ccc 45%, #ccc 55%, #ddd);
    height: 100%;
    width: 100%;
    -webkit-user-modify: read-only !important;
    box-sizing: border-box;
}
meter::-webkit-meter-optimum-value {
    background: linear-gradient(to bottom, #ad7, #cea 20%, #7a3 45%, #7a3 55%, #ad7);
    height: 100%;
    -webkit-user-modify: read-only !important;
    box-sizing: border-box;
}
meter::-webkit-meter-suboptimum-value {
    background: linear-gradient(to bottom, #fe7, #ffc 20%, #db3 45%, #db3 55%, #fe7);
    height: 100%;
    -webkit-user-modify: read-only !important;
    box-sizing: border-box;
}
meter::-webkit-meter-even-less-good-value {
    background: linear-gradient(to bottom, #f77, #fcc 20%, #d44 45%, #d44 55%, #f77);
    height: 100%;
    -webkit-user-modify: read-only !important;
    box-sizing: border-box;
}
/* progress */
progress {
    -webkit-appearance: progress-bar;
    box-sizing: border-box;
    display: inline-block;
    height: 1em;
    width: 10em;
    vertical-align: -0.2em;
}
progress::-webkit-progress-inner-element {
    -webkit-appearance: inherit;
    box-sizing: inherit;
    -webkit-user-modify: read-only;
    height: 100%;
    width: 100%;
}
progress::-webkit-progress-bar {
    background-color: gray;
    height: 100%;
    width: 100%;
    -webkit-user-modify: read-only !important;
    box-sizing: border-box;
}
progress::-webkit-progress-value {
    background-color: green;
    height: 100%;
    width: 50%; /* should be removed later */
    -webkit-user-modify: read-only !important;
    box-sizing: border-box;
}
/* inline elements */
u, ins {
    text-decoration: underline
}
strong, b {
    font-weight: bold
}
i, cite, em, var, address, dfn {
    font-style: italic
}
tt, code, kbd, samp {
    font-family: monospace
}
pre, xmp, plaintext, listing {
    display: block;
    font-family: monospace;
    white-space: pre;
    margin: 1__qem 0
}
mark {
    background-color: yellow;
    color: black
}
big {
    font-size: larger
}
small {
    font-size: smaller
}
s, strike, del {
    text-decoration: line-through
}
sub {
    vertical-align: sub;
    font-size: smaller
}
sup {
    vertical-align: super;
    font-size: smaller
}
nobr {
    white-space: nowrap
}
/* states */
:focus {
    outline: auto 5px -webkit-focus-ring-color
}
/* Read-only text fields do not show a focus ring but do still receive focus */
html:focus, body:focus, input[readonly]:focus {
    outline: none
}
embed:focus, iframe:focus, object:focus {
    outline: none
}

input:focus, textarea:focus, keygen:focus, select:focus {
    outline-offset: -2px
}
input[type="button" i]:focus,
input[type="checkbox" i]:focus,
input[type="file" i]:focus,
input[type="hidden" i]:focus,
input[type="image" i]:focus,
input[type="radio" i]:focus,
input[type="reset" i]:focus,
input[type="search" i]:focus,
input[type="submit" i]:focus,
input[type="file" i]:focus::-webkit-file-upload-button {
    outline-offset: 0
}

a:-webkit-any-link {
    color: -webkit-link;
    text-decoration: underline;
    cursor: auto;
}
a:-webkit-any-link:active {
    color: -webkit-activelink
}
/* HTML5 ruby elements */
ruby, rt {
    text-indent: 0; /* blocks used for ruby rendering should not trigger this */
}
rt {
    line-height: normal;
    -webkit-text-emphasis: none;
}
ruby > rt {
    display: block;
    font-size: 50%;
    text-align: start;
}
ruby > rp {
    display: none;
}
/* other elements */
noframes {
    display: none
}
frameset, frame {
    display: block
}
frameset {
    border-color: inherit
}
iframe {
    border: 2px inset
}
details {
    display: block
}
summary {
    display: block
}
summary::-webkit-details-marker {
    display: inline-block;
    width: 0.66em;
    height: 0.66em;
    -webkit-margin-end: 0.4em;
}
template {
    display: none
}
bdi, output {
    unicode-bidi: -webkit-isolate;
}
bdo {
    unicode-bidi: bidi-override;
}
textarea[dir=auto i] {
    unicode-bidi: -webkit-plaintext;
}
dialog:not([open]) {
    display: none
}
dialog {
    position: absolute;
    left: 0;
    right: 0;
    width: -webkit-fit-content;
    height: -webkit-fit-content;
    margin: auto;
    border: solid;
    padding: 1em;
    background: white;
    color: black
}
dialog::backdrop {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: rgba(0,0,0,0.1)
}
/* page */
@page {
    /* FIXME: Define the right default values for page properties. */
    size: auto;
    margin: auto;
    padding: 0px;
    border-width: 0px;
}
/* Disable multicol in printing, since it's not implemented properly. See crbug.com/99358 */
@media print {
    * { -webkit-columns: auto !important; }
}
/* noscript is handled internally, as it depends on settings. */
`,
	  },
	  {
	    predicates: { 'browser:firefox': true },
	    text: `
b, strong {
  font-weight: bolder;
}
`,
	  },
	];

	// Calculate the specificity for a selector by dividing it into simple selectors and counting them
	var calculate = function(input) {
		var selectors,
			selector,
			i,
			len,
			results = [];

		// Separate input by commas
		selectors = input.split(',');

		for (i = 0, len = selectors.length; i < len; i += 1) {
			selector = selectors[i];
			if (selector.length > 0) {
				results.push(calculateSingle(selector));
			}
		}

		return results;
	};

	/**
	 * Calculates the specificity of CSS selectors
	 * http://www.w3.org/TR/css3-selectors/#specificity
	 *
	 * Returns an object with the following properties:
	 *  - selector: the input
	 *  - specificity: e.g. 0,1,0,0
	 *  - parts: array with details about each part of the selector that counts towards the specificity
	 *  - specificityArray: e.g. [0, 1, 0, 0]
	 */
	var calculateSingle = function(input) {
		var selector = input,
			findMatch,
			typeCount = {
				'a': 0,
				'b': 0,
				'c': 0
			},
			parts = [],
			// The following regular expressions assume that selectors matching the preceding regular expressions have been removed
			attributeRegex = /(\[[^\]]+\])/g,
			idRegex = /(#[^\#\s\+>~\.\[:\)]+)/g,
			classRegex = /(\.[^\s\+>~\.\[:\)]+)/g,
			pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,
			// A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()
			// The negation psuedo class (:not) is filtered out because specificity is calculated on its argument
			// :global and :local are filtered out - they look like psuedo classes but are an identifier for CSS Modules
			pseudoClassWithBracketsRegex = /(:(?!not|global|local)[\w-]+\([^\)]*\))/gi,
			// A regex for other pseudo classes, which don't have brackets
			pseudoClassRegex = /(:(?!not|global|local)[^\s\+>~\.\[:]+)/g,
			elementRegex = /([^\s\+>~\.\[:]+)/g;

		// Find matches for a regular expression in a string and push their details to parts
		// Type is "a" for IDs, "b" for classes, attributes and pseudo-classes and "c" for elements and pseudo-elements
		findMatch = function(regex, type) {
			var matches, i, len, match, index, length;
			if (regex.test(selector)) {
				matches = selector.match(regex);
				for (i = 0, len = matches.length; i < len; i += 1) {
					typeCount[type] += 1;
					match = matches[i];
					index = selector.indexOf(match);
					length = match.length;
					parts.push({
						selector: input.substr(index, length),
						type: type,
						index: index,
						length: length
					});
					// Replace this simple selector with whitespace so it won't be counted in further simple selectors
					selector = selector.replace(match, Array(length + 1).join(' '));
				}
			}
		};

		// Replace escaped characters with plain text, using the "A" character
		// https://www.w3.org/TR/CSS21/syndata.html#characters
		(function() {
			var replaceWithPlainText = function(regex) {
					var matches, i, len, match;
					if (regex.test(selector)) {
						matches = selector.match(regex);
						for (i = 0, len = matches.length; i < len; i += 1) {
							match = matches[i];
							selector = selector.replace(match, Array(match.length + 1).join('A'));
						}
					}
				},
				// Matches a backslash followed by six hexadecimal digits followed by an optional single whitespace character
				escapeHexadecimalRegex = /\\[0-9A-Fa-f]{6}\s?/g,
				// Matches a backslash followed by fewer than six hexadecimal digits followed by a mandatory single whitespace character
				escapeHexadecimalRegex2 = /\\[0-9A-Fa-f]{1,5}\s/g,
				// Matches a backslash followed by any character
				escapeSpecialCharacter = /\\./g;

			replaceWithPlainText(escapeHexadecimalRegex);
			replaceWithPlainText(escapeHexadecimalRegex2);
			replaceWithPlainText(escapeSpecialCharacter);
		}());

		// Remove anything after a left brace in case a user has pasted in a rule, not just a selector
		(function() {
			var regex = /{[^]*/gm,
				matches, i, len, match;
			if (regex.test(selector)) {
				matches = selector.match(regex);
				for (i = 0, len = matches.length; i < len; i += 1) {
					match = matches[i];
					selector = selector.replace(match, Array(match.length + 1).join(' '));
				}
			}
		}());

		// Add attribute selectors to parts collection (type b)
		findMatch(attributeRegex, 'b');

		// Add ID selectors to parts collection (type a)
		findMatch(idRegex, 'a');

		// Add class selectors to parts collection (type b)
		findMatch(classRegex, 'b');

		// Add pseudo-element selectors to parts collection (type c)
		findMatch(pseudoElementRegex, 'c');

		// Add pseudo-class selectors to parts collection (type b)
		findMatch(pseudoClassWithBracketsRegex, 'b');
		findMatch(pseudoClassRegex, 'b');

		// Remove universal selector and separator characters
		selector = selector.replace(/[\*\s\+>~]/g, ' ');

		// Remove any stray dots or hashes which aren't attached to words
		// These may be present if the user is live-editing this selector
		selector = selector.replace(/[#\.]/g, ' ');

		// Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument
	 	// Remove non-standard :local and :global CSS Module identifiers because they do not effect the specificity
		selector = selector.replace(/:not/g, '    ');
		selector = selector.replace(/:local/g, '      ');
		selector = selector.replace(/:global/g, '       ');
		selector = selector.replace(/[\(\)]/g, ' ');

		// The only things left should be element selectors (type c)
		findMatch(elementRegex, 'c');

		// Order the parts in the order they appear in the original selector
		// This is neater for external apps to deal with
		parts.sort(function(a, b) {
			return a.index - b.index;
		});

		return {
			selector: input,
			specificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),
			specificityArray: [0, typeCount.a, typeCount.b, typeCount.c],
			parts: parts
		};
	};

	/**
	 * Compares two CSS selectors for specificity
	 * Alternatively you can replace one of the CSS selectors with a specificity array
	 *
	 *  - it returns -1 if a has a lower specificity than b
	 *  - it returns 1 if a has a higher specificity than b
	 *  - it returns 0 if a has the same specificity than b
	 */
	var compare = function(a, b) {
		var aSpecificity,
			bSpecificity,
			i;

		if (typeof a ==='string') {
			if (a.indexOf(',') !== -1) {
				throw 'Invalid CSS selector';
			} else {
				aSpecificity = calculateSingle(a)['specificityArray'];
			}
		} else if (Array.isArray(a)) {
			if (a.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {
				throw 'Invalid specificity array';
			} else {
				aSpecificity = a;
			}
		} else {
			throw 'Invalid CSS selector or specificity array';
		}

		if (typeof b ==='string') {
			if (b.indexOf(',') !== -1) {
				throw 'Invalid CSS selector';
			} else {
				bSpecificity = calculateSingle(b)['specificityArray'];
			}
		} else if (Array.isArray(b)) {
			if (b.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {
				throw 'Invalid specificity array';
			} else {
				bSpecificity = b;
			}
		} else {
			throw 'Invalid CSS selector or specificity array';
		}

		for (i = 0; i < 4; i += 1) {
			if (aSpecificity[i] < bSpecificity[i]) {
				return -1;
			} else if (aSpecificity[i] > bSpecificity[i]) {
				return 1;
			}
		}

		return 0;
	};

	var specificity$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		calculate: calculate,
		compare: compare
	});

	var specificity = getCjsExportFromNamespace(specificity$1);

	function stylePropObjectComparator(array, a, b) {
	  // Compare importance
	  const importanceComparison = b.important - a.important;

	  if (importanceComparison !== 0) {
	    return importanceComparison;
	  }

	  // Compare specificity
	  const specificityComparison =
	    -1 * specificity.compare(a.specificityArray, b.specificityArray);

	  if (specificityComparison !== 0) {
	    return specificityComparison;
	  }

	  // Fall back to sorting by original order
	  return array.indexOf(b) - array.indexOf(a);
	}

	// FIXME: Is this slice necessary?
	var stylePropObjectComparator_1 = (array) => stylePropObjectComparator.bind(null, array.slice());

	var lruCache = createCommonjsModule(function (module) {
	(function () { // closure for web browsers

	if (module.exports) {
	  module.exports = LRUCache;
	} else {
	  // just set the global for non-node platforms.
	  this.LRUCache = LRUCache;
	}

	function hOP (obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key)
	}

	function naiveLength () { return 1 }

	function LRUCache (options) {
	  if (!(this instanceof LRUCache)) {
	    return new LRUCache(options)
	  }

	  var max;
	  if (typeof options === 'number') {
	    max = options;
	    options = { max: max };
	  }

	  if (!options) options = {};

	  max = options.max;

	  var lengthCalculator = options.length || naiveLength;

	  if (typeof lengthCalculator !== "function") {
	    lengthCalculator = naiveLength;
	  }

	  if (!max || !(typeof max === "number") || max <= 0 ) {
	    // a little bit silly.  maybe this should throw?
	    max = Infinity;
	  }

	  var allowStale = options.stale || false;

	  var maxAge = options.maxAge || null;

	  var dispose = options.dispose;

	  var cache = Object.create(null) // hash of items by key
	    , lruList = Object.create(null) // list of items in order of use recency
	    , mru = 0 // most recently used
	    , lru = 0 // least recently used
	    , length = 0 // number of items in the list
	    , itemCount = 0;


	  // resize the cache when the max changes.
	  Object.defineProperty(this, "max",
	    { set : function (mL) {
	        if (!mL || !(typeof mL === "number") || mL <= 0 ) mL = Infinity;
	        max = mL;
	        // if it gets above double max, trim right away.
	        // otherwise, do it whenever it's convenient.
	        if (length > max) trim();
	      }
	    , get : function () { return max }
	    , enumerable : true
	    });

	  // resize the cache when the lengthCalculator changes.
	  Object.defineProperty(this, "lengthCalculator",
	    { set : function (lC) {
	        if (typeof lC !== "function") {
	          lengthCalculator = naiveLength;
	          length = itemCount;
	          for (var key in cache) {
	            cache[key].length = 1;
	          }
	        } else {
	          lengthCalculator = lC;
	          length = 0;
	          for (var key in cache) {
	            cache[key].length = lengthCalculator(cache[key].value);
	            length += cache[key].length;
	          }
	        }

	        if (length > max) trim();
	      }
	    , get : function () { return lengthCalculator }
	    , enumerable : true
	    });

	  Object.defineProperty(this, "length",
	    { get : function () { return length }
	    , enumerable : true
	    });


	  Object.defineProperty(this, "itemCount",
	    { get : function () { return itemCount }
	    , enumerable : true
	    });

	  this.forEach = function (fn, thisp) {
	    thisp = thisp || this;
	    var i = 0;
	    for (var k = mru - 1; k >= 0 && i < itemCount; k--) if (lruList[k]) {
	      i++;
	      var hit = lruList[k];
	      if (maxAge && (Date.now() - hit.now > maxAge)) {
	        del(hit);
	        if (!allowStale) hit = undefined;
	      }
	      if (hit) {
	        fn.call(thisp, hit.value, hit.key, this);
	      }
	    }
	  };

	  this.keys = function () {
	    var keys = new Array(itemCount);
	    var i = 0;
	    for (var k = mru - 1; k >= 0 && i < itemCount; k--) if (lruList[k]) {
	      var hit = lruList[k];
	      keys[i++] = hit.key;
	    }
	    return keys
	  };

	  this.values = function () {
	    var values = new Array(itemCount);
	    var i = 0;
	    for (var k = mru - 1; k >= 0 && i < itemCount; k--) if (lruList[k]) {
	      var hit = lruList[k];
	      values[i++] = hit.value;
	    }
	    return values
	  };

	  this.reset = function () {
	    if (dispose) {
	      for (var k in cache) {
	        dispose(k, cache[k].value);
	      }
	    }
	    cache = {};
	    lruList = {};
	    lru = 0;
	    mru = 0;
	    length = 0;
	    itemCount = 0;
	  };

	  // Provided for debugging/dev purposes only. No promises whatsoever that
	  // this API stays stable.
	  this.dump = function () {
	    return cache
	  };

	  this.dumpLru = function () {
	    return lruList
	  };

	  this.set = function (key, value) {
	    if (hOP(cache, key)) {
	      // dispose of the old one before overwriting
	      if (dispose) dispose(key, cache[key].value);
	      if (maxAge) cache[key].now = Date.now();
	      cache[key].value = value;
	      this.get(key);
	      return true
	    }

	    var len = lengthCalculator(value);
	    var age = maxAge ? Date.now() : 0;
	    var hit = new Entry(key, value, mru++, len, age);

	    // oversized objects fall out of cache automatically.
	    if (hit.length > max) {
	      if (dispose) dispose(key, value);
	      return false
	    }

	    length += hit.length;
	    lruList[hit.lu] = cache[key] = hit;
	    itemCount ++;

	    if (length > max) trim();
	    return true
	  };

	  this.has = function (key) {
	    if (!hOP(cache, key)) return false
	    var hit = cache[key];
	    if (maxAge && (Date.now() - hit.now > maxAge)) {
	      return false
	    }
	    return true
	  };

	  this.get = function (key) {
	    return get(key, true)
	  };

	  this.peek = function (key) {
	    return get(key, false)
	  };

	  function get (key, doUse) {
	    var hit = cache[key];
	    if (hit) {
	      if (maxAge && (Date.now() - hit.now > maxAge)) {
	        del(hit);
	        if (!allowStale) hit = undefined;
	      } else {
	        if (doUse) use(hit);
	      }
	      if (hit) hit = hit.value;
	    }
	    return hit
	  }

	  function use (hit) {
	    shiftLU(hit);
	    hit.lu = mru ++;
	    lruList[hit.lu] = hit;
	  }

	  this.del = function (key) {
	    del(cache[key]);
	  };

	  function trim () {
	    while (lru < mru && length > max)
	      del(lruList[lru]);
	  }

	  function shiftLU(hit) {
	    delete lruList[ hit.lu ];
	    while (lru < mru && !lruList[lru]) lru ++;
	  }

	  function del(hit) {
	    if (hit) {
	      if (dispose) dispose(hit.key, hit.value);
	      length -= hit.length;
	      itemCount --;
	      delete cache[ hit.key ];
	      shiftLU(hit);
	    }
	  }
	}

	// classy, since V8 prefers predictable objects.
	function Entry (key, value, mru, len, age) {
	  this.key = key;
	  this.value = value;
	  this.lu = mru;
	  this.length = len;
	  this.now = age;
	}

	})();
	});

	var memoizeSync = createCommonjsModule(function (module, exports) {
	(function (root, factory) {
	    /* istanbul ignore next */
	    {
	        module.exports = factory(lruCache);
	    }
	}(commonjsGlobal, function (LRU) {
	    var nextCacheKeyPrefix = 1;
	    return function memoizeSync(lambda, options) {
	        options = options || {};
	        var argumentsStringifier = options.argumentsStringifier || function (args) {
	                return args.map(String).join('\x1d'); // Group separator
	            },
	            cacheKeyPrefix,
	            cache;

	        if ('cacheKeyPrefix' in options) {
	            cacheKeyPrefix = String(options.cacheKeyPrefix);
	        } else {
	            cacheKeyPrefix = nextCacheKeyPrefix + '\x1d',
	            nextCacheKeyPrefix += 1;
	        }

	        if (options.cache) {
	            cache = options.cache;
	        } else {
	            var lruCacheOptions = {};
	            for (var propertyName in options) {
	                if (Object.prototype.hasOwnProperty.call(options, propertyName) && propertyName !== 'argumentsStringifier' && propertyName !== 'cacheKeyPrefix' && propertyName !== 'context') {
	                    lruCacheOptions[propertyName] = options[propertyName];
	                }
	            }
	            cache = new LRU(lruCacheOptions);
	        }

	        function returnValueOrThrowException(exceptionAndReturnValue) {
	            if (exceptionAndReturnValue[0]) {
	                throw exceptionAndReturnValue[0];
	            } else {
	                return exceptionAndReturnValue[1];
	            }
	        }

	        function memoizer() { // ...
	            var that = this, // In case you want to create a memoized method
	                args = Array.prototype.slice.call(arguments),
	                stringifiedArguments = argumentsStringifier(args);
	            if (stringifiedArguments === false) {
	                return lambda.apply(options.context || that, args);
	            }
	            stringifiedArguments = String(stringifiedArguments); // In case the function returns a non-string
	            var exceptionAndReturnValue = cache.get(cacheKeyPrefix + stringifiedArguments);
	            if (!exceptionAndReturnValue) {
	                var returnValue,
	                    exception = null;
	                try {
	                    returnValue = lambda.apply(options.context || that, args);
	                } catch (e) {
	                    exception = e;
	                }
	                exceptionAndReturnValue = [exception, returnValue];
	                cache.set(cacheKeyPrefix + stringifiedArguments, exceptionAndReturnValue);
	            }
	            return returnValueOrThrowException(exceptionAndReturnValue);
	        }

	        memoizer.cache = cache;
	        memoizer.cacheKeyPrefix = cacheKeyPrefix;
	        memoizer.argumentsStringifier = argumentsStringifier;

	        memoizer.peek = function () { // ...
	            var cacheEntry = cache.get(cacheKeyPrefix + argumentsStringifier(Array.prototype.slice.call(arguments)));
	            if (cacheEntry) {
	                return returnValueOrThrowException(cacheEntry);
	            }
	        };

	        memoizer.purge = function () { // ...
	            cache.del(cacheKeyPrefix + argumentsStringifier(Array.prototype.slice.call(arguments)));
	        };

	        memoizer.purgeAll = function () {
	            // Cannot use cache.forEach with cache.del in the callback, that screws up the iteration.
	            var keys = cache.keys();
	            for (var i = 0 ; i < keys.length ; i += 1) {
	                var key = keys[i];
	                if (key.indexOf(cacheKeyPrefix) === 0) {
	                    cache.del(key);
	                }
	            }
	        };

	        return memoizer;
	    };
	}));
	});

	function capitalize (string, opts) {
	  opts = normalizeOptions(opts);
	  if (!opts.preserve) {
	    string = string.toLowerCase();
	  }
	  return string.charAt(0).toUpperCase() + string.substring(1);
	}

	// a QUOTE character immediately followed by a word character
	var QUOTE = /['"`’]/;
	var WORD = /[0-9a-zA-Z\u00C0-\u017F\u0400-\u04FF]/;

	capitalize.words = function (string, opts) {
	  opts = normalizeOptions(opts);
	  if (!opts.preserve) {
	    string = string.toLowerCase();
	  }
	  var startOfWord = 0;
	  var nonWord = /[^0-9a-zA-Z\u00C0-\u017F\u0400-\u04FF]+|$/g;
	  var match;
	  var out = "";
	  var count = 0;

	  while (match = nonWord.exec(string)) {
	    var sep = match[0];
	    var sepStart = nonWord.lastIndex - sep.length;
	    if (QUOTE.test(string[sepStart]) && WORD.test(string[sepStart + 1])) {
	      // don't capitalize after an embedded quote
	      continue
	    }
	    var word = string.substring(startOfWord, nonWord.lastIndex - sep.length);
	    if (QUOTE.test(word[0])) {
	      // strip leading quote
	      out += word[0];
	      word = word.substring(1);
	    }
	    if (typeof opts.skipWord === 'function' && opts.skipWord(word, count)) {
	      out += word;
	    } else {
	      out += capitalize(word, opts);
	    }
	    out += sep;
	    startOfWord = nonWord.lastIndex;
	    count++;
	    if (startOfWord == string.length) {
	      break
	    }
	  }

	  return out
	};

	function normalizeOptions(opts) {
	  if (!opts) {
	    return { preserve: false }
	  }
	  if (typeof opts === 'boolean') {
	    return { preserve: opts }
	  }
	  if (opts.skipWord instanceof RegExp) {
	    const rgx = opts.skipWord;
	    opts.skipWord = function (word, position) {
	      return position > 0 && rgx.test(word)
	    };
	  }
	  return opts || {}
	}

	var capitalize_1 = capitalize;

	function applyTextTransform(text, textTransform) {
	  if (textTransform === 'uppercase') {
	    return text.toUpperCase();
	  } else if (textTransform === 'lowercase') {
	    return text.toLowerCase();
	  } else if (textTransform === 'capitalize') {
	    return capitalize_1.words(text);
	  }
	  // textTransform === 'none' or unsupported value
	  return text;
	}

	var applyTextTransform_1 = applyTextTransform;

	const multiPseudoClassMatcher =
	  /(?::(?:active|any|checked|default|empty|enabled|fullscreen|focus|hover|indeterminate|in-range|invalid|link|optional|out-of-range|read-only|read-write|scope|target|valid|visited))+/gi;

	const cssCombinators = [' ', '>', '+', '~', '/'];

	function stripPseudoClassesFromSelector(str) {
	  return str.replace(multiPseudoClassMatcher, (match, offset) => {
	    if (offset === 0) {
	      return '*';
	    }

	    if (cssCombinators.includes(str.charAt(offset - 1))) {
	      return '*';
	    }

	    return '';
	  });
	}

	var stripPseudoClassesFromSelector_1 = stripPseudoClassesFromSelector;

	function unescapeCssString$2(cssString) {
	  return cssString
	    .replace(/\\([0-9a-f]{1,6})\s*/gi, ($0, hexDigits) =>
	      String.fromCharCode(parseInt(hexDigits, 16))
	    )
	    .replace(/\\n/g, '\n')
	    .replace(/\\t/g, '\t')
	    .replace(/\\/g, '');
	}

	var unescapeCssString_1$1 = unescapeCssString$2;

	function unescapeCssString$1(cssString) {
	  return cssString
	    .replace(/\\([0-9a-f]{1,6})\s*/gi, ($0, hexDigits) =>
	      String.fromCharCode(parseInt(hexDigits, 16))
	    )
	    .replace(/\\n/g, '\n')
	    .replace(/\\t/g, '\t')
	    .replace(/\\/g, '');
	}

	var unescapeCssString_1 = unescapeCssString$1;

	var unquote$2 = function unquote(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return str.replace(
	    /^'([^']*)'$|^"([^"]*)"$/,
	    ($0, singleQuoted, doubleQuoted) =>
	      typeof singleQuoted === 'string'
	        ? singleQuoted.replace(/\\'/g, "'")
	        : doubleQuoted.replace(/\\"/g, '"')
	  );
	};

	var counteraction = lib$1;

	function isWithinRange(value, range) {
	  const subRanges = range.split(/\s*,\s*/);
	  for (let i = 0; i < subRanges.length; i += 1) {
	    const endpoints = subRanges[i].split(/\s+/);
	    let lower = endpoints[0];
	    let upper = endpoints[1];
	    if (lower.toLowerCase() === 'infinite') {
	      lower = -Infinity;
	    }
	    if (upper.toLowerCase() === 'infinite') {
	      upper = Infinity;
	    }
	    if (value >= lower && value <= upper) {
	      return true;
	    }
	  }
	  return false;
	}

	var CounterStyle_1 = class CounterStyle {
	  constructor({
	    prefix,
	    suffix,
	    negative,
	    pad,
	    range,
	    fallback,
	    symbols,
	  } = {}) {
	    this.prefix = prefix;
	    this.suffix = suffix;
	    this.negative = negative;
	    this.pad = pad;
	    this.range = range;
	    this.fallback = fallback;
	    if (Array.isArray(symbols)) {
	      this.symbols = symbols;
	    } else {
	      this.symbols = [];
	      if (typeof symbols === 'string') {
	        symbols.replace(
	          /"((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)'|(url\(\s*(?:'(?:[^']|\\')*'|"(?:[^"]|\\")*"|(?:[^'"\\]|\\.)*?\s*)\)|([^'" ]+))/g,
	          ($0, doubleQuotedString, singleQuotedString, url, other) => {
	            if (typeof doubleQuotedString === 'string') {
	              this.symbols.push(unescapeCssString_1(doubleQuotedString));
	            } else if (typeof singleQuotedString === 'string') {
	              this.symbols.push(unescapeCssString_1(singleQuotedString));
	            } else if (typeof other === 'string') {
	              this.symbols.push(other.trim());
	            }
	          }
	        );
	      }
	    }
	  }

	  renderFallback(counterValue) {
	    let fallback = this.fallback;
	    let fallbackRenderer;
	    if (typeof fallback === 'function') {
	      fallback = fallback();
	    }
	    if (typeof fallback === 'string') {
	      fallbackRenderer = counteraction(fallback);
	    } else if (typeof fallback === 'object') {
	      fallbackRenderer = fallback;
	    }
	    fallbackRenderer = fallbackRenderer || counteraction('decimal');
	    return fallbackRenderer.render(counterValue);
	  }

	  render(counterValue) {
	    let text = '';

	    if (
	      this.range &&
	      this.range !== 'auto' &&
	      !isWithinRange(counterValue, this.range)
	    ) {
	      return this.renderFallback(counterValue);
	    }

	    if (typeof this.prefix === 'string') {
	      text += unescapeCssString_1(unquote$2(this.prefix));
	    }

	    if (counterValue < 0 && typeof this.negative === 'string') {
	      text += unescapeCssString_1(unquote$2(this.negative));
	    }

	    const renderedValue = this.renderValue(counterValue);
	    if (renderedValue === undefined) {
	      text += this.renderFallback(counterValue);
	    } else {
	      text += renderedValue;
	    }

	    if (typeof this.suffix === 'string') {
	      text += unescapeCssString_1(unquote$2(this.suffix));
	    }
	    if (typeof this.pad === 'string') {
	      this.pad.replace(
	        /\d+ (?:"((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)'|(url\(\s*(?:'(?:[^']|\\')*'|"(?:[^"]|\\")*"|(?:[^'"\\]|\\.)*?\s*)\)))/g,
	        ($0, doubleQuotedString, singleQuotedString) => {
	          if (typeof doubleQuotedString === 'string') {
	            text += unescapeCssString_1(doubleQuotedString);
	          } else if (typeof singleQuotedString === 'string') {
	            text += unescapeCssString_1(singleQuotedString);
	          }
	        }
	      );
	    }

	    return text;
	  }
	};

	var Additive_1 = class Additive extends CounterStyle_1 {
	  static get cssName() {
	    return 'additive';
	  }

	  constructor({ 'additive-symbols': additiveSymbols, ...options } = {}) {
	    super(options);
	    this.additiveSymbols = additiveSymbols;
	  }

	  renderValue(counterValue) {
	    const tokens = [];
	    (this.additiveSymbols || '').replace(
	      /(\d+)\s+(?:(url\(\s*(?:'(?:[^']|\\')*'|"(?:[^"]|\\")*"|(?:[^'"\\]|\\.)*?\s*)\))|"((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)'|([^'",]+))/g,
	      ($0, value, url, doubleQuotedString, singleQuotedString, other) => {
	        let text = '';
	        if (typeof doubleQuotedString === 'string') {
	          text = doubleQuotedString;
	        } else if (typeof singleQuotedString === 'string') {
	          text = singleQuotedString;
	        } else if (typeof other === 'string') {
	          text = other;
	        }
	        tokens.push({
	          value: parseInt(value, 10),
	          text,
	        });
	      }
	    );
	    if (tokens.length > 0) {
	      let text = '';
	      let remainder = counterValue;
	      // Sort by descending value so we can greedily find the symbols to use:
	      tokens.sort((a, b) => b.value - a.value);
	      remainder = counterValue;
	      for (const token of tokens) {
	        while (remainder >= token.value) {
	          text += token.text;
	          remainder -= token.value;
	        }
	      }
	      return text;
	    }
	  }
	};

	var Alphabetic_1 = class Alphabetic extends CounterStyle_1 {
	  static get cssName() {
	    return 'alphabetic';
	  }

	  renderValue(counterValue) {
	    let remainder = counterValue;
	    if (remainder >= 1 && this.symbols.length > 0) {
	      let text = '';
	      while (remainder > 0) {
	        text = this.symbols[(remainder - 1) % this.symbols.length] + text;
	        remainder = Math.floor((remainder - 1) / this.symbols.length);
	      }
	      return text;
	    }
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderArmenianLower');

	var Armenian_1 = class Armenian {
	  static get cssName() {
	    return 'armenian';
	  }

	  render(counterValue) {
	    return this.renderArmenianLower(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderArmenianLower(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderArmenianLower(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 10000) return this.renderNumber(n, '#,##0');
	    if (n >= 9000)
	      return `ք${n % 9000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 8000)
	      return `փ${n % 8000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 7000)
	      return `ւ${n % 7000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 6000)
	      return `ց${n % 6000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 5000)
	      return `ր${n % 5000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 4000)
	      return `տ${n % 4000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 3000)
	      return `վ${n % 3000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 2000)
	      return `ս${n % 2000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 1000)
	      return `ռ${n % 1000 === 0 ? '' : this.renderArmenianLower(n % 1000)}`;
	    if (n >= 900)
	      return `ջ${n % 900 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 800)
	      return `պ${n % 800 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 700)
	      return `չ${n % 700 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 600)
	      return `ո${n % 600 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 500)
	      return `շ${n % 500 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 400)
	      return `ն${n % 400 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 300)
	      return `յ${n % 300 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 200)
	      return `մ${n % 200 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 100)
	      return `ճ${n % 100 === 0 ? '' : this.renderArmenianLower(n % 100)}`;
	    if (n >= 90)
	      return `ղ${n % 90 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 80)
	      return `ձ${n % 80 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 70)
	      return `հ${n % 70 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 60)
	      return `կ${n % 60 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 50)
	      return `ծ${n % 50 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 40)
	      return `խ${n % 40 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 30)
	      return `լ${n % 30 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 20)
	      return `ի${n % 20 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 10)
	      return `ժ${n % 10 === 0 ? '' : this.renderArmenianLower(n % 10)}`;
	    if (n >= 9) return 'թ';
	    if (n >= 8) return 'ը';
	    if (n >= 7) return 'է';
	    if (n >= 6) return 'զ';
	    if (n >= 5) return 'ե';
	    if (n >= 4) return 'դ';
	    if (n >= 3) return 'գ';
	    if (n >= 2) return 'բ';
	    if (n >= 1) return 'ա';
	    return '0';
	  }
	};

	var Cyclic_1 = class Cyclic extends CounterStyle_1 {
	  static get cssName() {
	    return 'cyclic';
	  }

	  renderValue(counterValue) {
	    if (counterValue >= 1 && this.symbols.length > 0) {
	      return this.symbols[(counterValue - 1) % this.symbols.length];
	    }
	  }
	};

	var Decimal = class DecimalLeadingZero {
	  static get cssName() {
	    return 'decimal';
	  }

	  render(counterValue) {
	    return String(counterValue);
	  }
	};

	var DecimalLeadingZero_1 = class DecimalLeadingZero {
	  static get cssName() {
	    return 'decimal-leading-zero';
	  }

	  render(counterValue) {
	    // FIXME: Depends on the number of digits in the max (possible) overall counter value
	    if (counterValue < 0) {
	      return `-0${-counterValue}`;
	    } else {
	      return `0${counterValue}`;
	    }
	  }
	};

	var Disc_1 = class Disc {
	  static get cssName() {
	    return 'disc';
	  }

	  render() {
	    return '•';
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderEthiopic');

	var Ethiopic_1 = class Ethiopic {
	  static get cssName() {
	    return 'ethiopic';
	  }

	  render(counterValue) {
	    return this.renderEthiopic(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderEthiopic(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderEthiopic(-n)}`;
	    if (isFractional && n > 1)
	      return `${this.renderEthiopic(Math.floor(n))}\u1361${this.renderEthiopic(
        parseInt(String(n).replace(/\d*\./, ''), 10)
      )}`;
	    if (n >= 1000000000000000000) return this.renderNumber(n, '#,##0');
	    if (n >= 20000000000000000)
	      return `${this.renderEthiopic(
        Math.floor(n / 10000000000000000)
      )}\u137C${this.renderEthiopicP3(n % 10000000000000000)}`;
	    if (n >= 10000000000000000)
	      return `\u137C${this.renderEthiopicP3(n % 10000000000000000)}`;
	    if (n >= 2000000000000)
	      return `${this.renderEthiopic(
        Math.floor(n / 1000000000000)
      )}\u137C${this.renderEthiopicP2(n % 1000000000000)}`;
	    if (n >= 1000000000000)
	      return `\u137C${this.renderEthiopicP2(n % 1000000000000)}`;
	    if (n >= 200000000)
	      return `${this.renderEthiopic(
        Math.floor(n / 100000000)
      )}\u137C${this.renderEthiopicP1(n % 100000000)}`;
	    if (n >= 100000000) return `\u137C${this.renderEthiopicP1(n % 100000000)}`;
	    if (n >= 20000)
	      return `${this.renderEthiopic(Math.floor(n / 10000))}\u137C${
        n % 20000 === 0 ? '' : this.renderEthiopic(n % 10000)
      }`;
	    if (n >= 10000)
	      return `\u137C${n % 10000 === 0 ? '' : this.renderEthiopic(n % 10000)}`;
	    if (n >= 200)
	      return `${this.renderEthiopic(Math.floor(n / 100))}\u137B${
        n % 200 === 0 ? '' : this.renderEthiopic(n % 100)
      }`;
	    if (n >= 100)
	      return `\u137B${n % 100 === 0 ? '' : this.renderEthiopic(n % 100)}`;
	    if (n >= 90)
	      return `\u137A${n % 90 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 80)
	      return `\u1379${n % 80 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 70)
	      return `\u1378${n % 70 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 60)
	      return `\u1377${n % 60 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 50)
	      return `\u1376${n % 50 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 40)
	      return `\u1375${n % 40 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 30)
	      return `\u1374${n % 30 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 20)
	      return `\u1373${n % 20 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 10)
	      return `\u1372${n % 10 === 0 ? '' : this.renderEthiopic(n % 10)}`;
	    if (n >= 9) return '\u1371';
	    if (n >= 8) return '\u1370';
	    if (n >= 7) return '\u136F';
	    if (n >= 6) return '\u136E';
	    if (n >= 5) return '\u136D';
	    if (n >= 4) return '\u136C';
	    if (n >= 3) return '\u136B';
	    if (n >= 2) return '\u136A';
	    if (n >= 1) return '\u1369';
	    return 'ባዶ';
	  }

	  renderEthiopicP3(n) {
	    if (n >= 1000000000000)
	      return `${this.renderEthiopic(
        Math.floor(n / 1000000000000)
      )}\u137C${this.renderEthiopicP2(n % 1000000000000)}`;
	    if (n >= 1) return `\u137C\u137C\u137C${this.renderEthiopicP(n)}`;
	    return '\u137C\u137C\u137C';
	  }

	  renderEthiopicP2(n) {
	    if (n >= 100000000)
	      return `${this.renderEthiopic(
        Math.floor(n / 100000000)
      )}\u137C${this.renderEthiopicP1(n % 100000000)}`;
	    if (n >= 1) return `\u137C\u137C${this.renderEthiopicP(n)}`;
	    return '\u137C\u137C';
	  }

	  renderEthiopicP1(n) {
	    if (n >= 10000)
	      return `${this.renderEthiopic(Math.floor(n / 10000))}\u137C${
        n % 10000 === 0 ? '' : this.renderEthiopic(n % 10000)
      }`;
	    if (n >= 1) return `\u137C${this.renderEthiopicP(n)}`;
	    return '\u137C';
	  }

	  renderEthiopicP(n) {
	    if (n >= 10000000000000000)
	      return `${this.renderEthiopicP(
        Math.floor(n / 10000000000000000)
      )}\u137C${this.renderEthiopicP3(n % 10000000000000000)}`;
	    if (n >= 1000000000000)
	      return `${this.renderEthiopicP(
        Math.floor(n / 1000000000000)
      )}\u137C${this.renderEthiopicP2(n % 1000000000000)}`;
	    if (n >= 100000000)
	      return `${this.renderEthiopicP(
        Math.floor(n / 100000000)
      )}\u137C${this.renderEthiopicP1(n % 100000000)}`;
	    if (n >= 10000)
	      return `${this.renderEthiopicP(Math.floor(n / 10000))}\u137C${
        n % 10000 === 0 ? '' : this.renderEthiopicP(n % 10000)
      }`;
	    if (n >= 1) return this.renderEthiopic(n);
	  }
	};

	var Fixed_1 = class Fixed extends CounterStyle_1 {
	  static get cssName() {
	    return 'fixed';
	  }

	  renderValue(counterValue) {
	    const firstSymbolValue = 1;
	    // TODO: Find out where this came from:
	    // const matchFixedWithNumber = system.match(/^\s*fixed\s+(-?\d+)\s*$/);
	    // if (matchFixedWithNumber) {
	    //   firstSymbolValue = parseInt(matchFixedWithNumber[1]);
	    // }
	    const symbolIndex = counterValue - firstSymbolValue;
	    if (symbolIndex >= 0 && symbolIndex < this.symbols.length) {
	      return this.symbols[symbolIndex];
	    }
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderGeorgian');

	var Georgian_1 = class Georgian {
	  static get cssName() {
	    return 'georgian';
	  }

	  render(counterValue) {
	    return this.renderGeorgian(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderGeorgian(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderGeorgian(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 20000) return this.renderNumber(n, '#,##0');
	    if (n >= 10000)
	      return `ჯ${n % 10000 === 0 ? '' : this.renderGeorgian(n % 10000)}`;
	    if (n >= 9000)
	      return `ჵ${n % 9000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 8000)
	      return `ჴ${n % 8000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 7000)
	      return `ხ${n % 7000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 6000)
	      return `ჭ${n % 6000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 5000)
	      return `წ${n % 5000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 4000)
	      return `ძ${n % 4000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 3000)
	      return `ც${n % 3000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 2000)
	      return `ჩ${n % 2000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 1000)
	      return `შ${n % 1000 === 0 ? '' : this.renderGeorgian(n % 1000)}`;
	    if (n >= 900)
	      return `ყ${n % 900 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 800)
	      return `ღ${n % 800 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 700)
	      return `ქ${n % 700 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 600)
	      return `ფ${n % 600 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 500)
	      return `ჳ${n % 500 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 400)
	      return `უ${n % 400 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 300)
	      return `ტ${n % 300 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 200)
	      return `ს${n % 200 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 100)
	      return `რ${n % 100 === 0 ? '' : this.renderGeorgian(n % 100)}`;
	    if (n >= 90) return `ჟ${n % 90 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 80) return `პ${n % 80 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 70) return `ო${n % 70 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 60) return `ჲ${n % 60 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 50) return `ნ${n % 50 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 40) return `მ${n % 40 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 30) return `ლ${n % 30 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 20) return `კ${n % 20 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 10) return `ი${n % 10 === 0 ? '' : this.renderGeorgian(n % 10)}`;
	    if (n >= 9) return 'თ';
	    if (n >= 8) return 'ჱ';
	    if (n >= 7) return 'ზ';
	    if (n >= 6) return 'ვ';
	    if (n >= 5) return 'ე';
	    if (n >= 4) return 'დ';
	    if (n >= 3) return 'გ';
	    if (n >= 2) return 'ბ';
	    if (n >= 1) return 'ა';
	    return this.renderNumber(n, '#,##0');
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderHebrew');

	var Hebrew_1 = class Hebrew {
	  static get cssName() {
	    return 'hebrew';
	  }

	  render(counterValue) {
	    return this.renderHebrew(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderHebrew(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderHebrew(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 1000001) return this.renderNumber(n, '#,##0');
	    if (n >= 1000000) return 'אלף אלפים';
	    if (n >= 3001)
	      return (
	        this.renderHebrewThousands(Math.floor(n / 1000)) +
	        (n % 3001 === 0 ? '' : this.renderHebrew(n % 1000))
	      );
	    if (n >= 3000) return `${this.renderHebrew(Math.floor(n / 1000))} אלפים`;
	    if (n >= 2001)
	      return (
	        this.renderHebrewThousands(Math.floor(n / 1000)) +
	        (n % 2001 === 0 ? '' : this.renderHebrew(n % 1000))
	      );
	    if (n >= 2000) return 'אלפיים';
	    if (n >= 1001)
	      return (
	        this.renderHebrewThousands(Math.floor(n / 1000)) +
	        (n % 1001 === 0 ? '' : this.renderHebrew(n % 1000))
	      );
	    if (n >= 1000) return 'אלף';
	    if (n >= 901) return `תתק${this.renderHebrew099(n % 100)}`;
	    if (n >= 900) return 'תת\u05F4ק';
	    if (n >= 801) return `תת${this.renderHebrew099(n % 100)}`;
	    if (n >= 800) return 'ת\u05F4ת';
	    if (n >= 745) return `תש${this.renderHebrew099(n % 100)}`;
	    if (n >= 744) return 'תשד\u05F4מ';
	    if (n >= 701) return `תש${this.renderHebrew099(n % 100)}`;
	    if (n >= 700) return 'ת\u05F4ש';
	    if (n >= 699) return `תר${this.renderHebrew099(n % 100)}`;
	    if (n >= 698) return 'תרח\u05F4צ';
	    if (n >= 601) return `תר${this.renderHebrew099(n % 100)}`;
	    if (n >= 600) return 'ת\u05F4ר';
	    if (n >= 501) return `תק${this.renderHebrew099(n % 100)}`;
	    if (n >= 500) return 'ת\u05F4ק';
	    if (n >= 400) return `ת${this.renderHebrew099(n % 100)}`;
	    if (n >= 345) return `ש${this.renderHebrew099(n % 100)}`;
	    if (n >= 344) return 'שד\u05F4מ';
	    if (n >= 305) return `ש${this.renderHebrew099(n % 100)}`;
	    if (n >= 304) return 'ד\u05F4ש';
	    if (n >= 300) return `ש${this.renderHebrew099(n % 100)}`;
	    if (n >= 299) return `ר${this.renderHebrew099(n % 100)}`;
	    if (n >= 298) return 'רח\u05F4צ';
	    if (n >= 200) return `ר${this.renderHebrew099(n % 100)}`;
	    if (n >= 100) return `ק${this.renderHebrew099(n % 100)}`;
	    if (n >= 91) return `צ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 90) return 'צ\u05F3';
	    if (n >= 81) return `פ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 80) return 'פ\u05F3';
	    if (n >= 71) return `ע\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 70) return 'ע\u05F3';
	    if (n >= 61) return `ס\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 60) return 'ס\u05F3';
	    if (n >= 51) return `נ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 50) return 'נ\u05F3';
	    if (n >= 41) return `מ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 40) return 'מ\u05F3';
	    if (n >= 31) return `ל\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 30) return 'ל\u05F3';
	    if (n >= 21) return `כ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 20) return 'כ\u05F3';
	    if (n >= 17) return `י\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 16) return 'ט\u05F4ז';
	    if (n >= 15) return 'ט\u05F4ו';
	    if (n >= 11) return `י\u05F4${this.renderHebrewItem(n % 10)}`;
	    return `${this.renderHebrewItem(n)}\u05F3`;
	  }

	  renderHebrewThousands(n) {
	    if (n >= 401) return `${this.renderHebrew(n)}\u05F3`;
	    if (n >= 100) return this.renderHebrew(n) + (n % 100 === 0 ? '' : '\u05F3');
	    if (n >= 10) return this.renderHebrew(n) + (n % 10 === 0 ? '' : '\u05F3');
	    return this.renderHebrew(n);
	  }

	  renderHebrew099(n) {
	    if (n >= 91) return `צ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 90) return '\u05F4צ';
	    if (n >= 81) return `פ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 80) return '\u05F4פ';
	    if (n >= 71) return `ע\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 70) return '\u05F4ע';
	    if (n >= 61) return `ס\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 60) return '\u05F4ס';
	    if (n >= 51) return `נ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 50) return '\u05F4נ';
	    if (n >= 41) return `מ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 40) return '\u05F4מ';
	    if (n >= 31) return `ל\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 30) return '\u05F4ל';
	    if (n >= 21) return `כ\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 20) return '\u05F4כ';
	    if (n >= 17) return `י\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 16) return 'ט\u05F4ז';
	    if (n >= 15) return 'ט\u05F4ו';
	    if (n >= 11) return `י\u05F4${this.renderHebrewItem(n % 10)}`;
	    if (n >= 1) return `\u05F4${this.renderHebrewItem(n)}`;
	    return '\u05F3';
	  }

	  renderHebrewItem(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderHebrewItem(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 2100) return this.renderNumber(n, '#,##0');
	    if (n >= 2000)
	      return `תתתתת${n % 2000 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1900)
	      return `תתתתש${n % 1900 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1800)
	      return `תתתתר${n % 1800 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1700)
	      return `תתתתק${n % 1700 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1600)
	      return `תתתת${n % 1600 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1500)
	      return `תתתש${n % 1500 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1400)
	      return `תתתר${n % 1400 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1300)
	      return `תתתק${n % 1300 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1200)
	      return `תתת${n % 1200 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1100)
	      return `תתש${n % 1100 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 1000)
	      return `תתר${n % 1000 === 0 ? '' : this.renderHebrewItem(n % 1000)}`;
	    if (n >= 900)
	      return `תתק${n % 900 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 800)
	      return `תת${n % 800 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 745) return `תש${this.renderHebrewItem(n % 100)}`;
	    if (n >= 744) return 'תשדמ';
	    if (n >= 700)
	      return `תש${n % 700 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 699) return `תר${this.renderHebrewItem(n % 100)}`;
	    if (n >= 698) return 'תרחצ';
	    if (n >= 600)
	      return `תר${n % 600 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 500)
	      return `תק${n % 500 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 400)
	      return `ת${n % 400 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 345) return `ש${this.renderHebrewItem(n % 100)}`;
	    if (n >= 344) return 'שדמ';
	    if (n >= 305) return `ש${this.renderHebrewItem(n % 100)}`;
	    if (n >= 304) return 'דש';
	    if (n >= 300)
	      return `ש${n % 300 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 299) return `ר${this.renderHebrewItem(n % 100)}`;
	    if (n >= 298) return 'רחצ';
	    if (n >= 200)
	      return `ר${n % 200 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 100)
	      return `ק${n % 100 === 0 ? '' : this.renderHebrewItem(n % 100)}`;
	    if (n >= 90) return `צ${n % 90 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 80) return `פ${n % 80 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 70) return `ע${n % 70 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 60) return `ס${n % 60 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 50) return `נ${n % 50 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 40) return `מ${n % 40 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 30) return `ל${n % 30 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 20) return `כ${n % 20 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 17) return `י${this.renderHebrewItem(n % 10)}`;
	    if (n >= 16) return 'טז';
	    if (n >= 15) return 'טו';
	    if (n >= 10) return `י${n % 10 === 0 ? '' : this.renderHebrewItem(n % 10)}`;
	    if (n >= 9) return 'ט';
	    if (n >= 8) return 'ח';
	    if (n >= 7) return 'ז';
	    if (n >= 6) return 'ו';
	    if (n >= 5) return 'ה';
	    if (n >= 4) return 'ד';
	    if (n >= 3) return 'ג';
	    if (n >= 2) return 'ב';
	    if (n >= 1) return 'א';
	    return '\u05F4';
	  }
	};

	var LowerAlpha_1 = class LowerAlpha extends Alphabetic_1 {
	  static get cssName() {
	    return 'lower-alpha';
	  }

	  constructor() {
	    super({
	      symbols: 'a b c d e f g h i j k l m n o p q r s t u v w x y z',
	    });
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderGreekNumeralMinuscules');

	var LowerGreek_1 = class LowerGreek {
	  static get cssName() {
	    return 'lower-greek';
	  }

	  render(counterValue) {
	    return this.renderGreekNumeralMinuscules(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderGreekNumeralMinuscules(n) {
	    if (n >= 1000000000000000000) return this.renderNumber(n, '#,##0');
	    if (n >= 10000000000000000)
	      return `${this.renderGreekNumeralMinuscules(
        Math.floor(n / 10000000000000000)
      )}μμμμ${
        n % 10000000000000000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMinuscules(n % 10000000000000000)}`
      }`;
	    if (n >= 1000000000000)
	      return `${this.renderGreekNumeralMinuscules(
        Math.floor(n / 1000000000000)
      )}μμμ${
        n % 1000000000000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMinuscules(n % 1000000000000)}`
      }`;
	    if (n >= 100000000)
	      return `${this.renderGreekNumeralMinuscules(
        Math.floor(n / 100000000)
      )}μμ${
        n % 100000000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMinuscules(n % 100000000)}`
      }`;
	    if (n >= 10000)
	      return `${this.renderGreekNumeralMinuscules(Math.floor(n / 10000))}μ${
        n % 10000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMinuscules(n % 10000)}`
      }`;
	    if (n >= 1000)
	      return `\u0375${this.renderGreekNumeralMinuscules(Math.floor(n / 1000))}${
        n % 1000 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 1000)
      }`;
	    if (n >= 900)
	      return `ϡ${
        n % 900 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 800)
	      return `ω${
        n % 800 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 700)
	      return `ψ${
        n % 700 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 600)
	      return `χ${
        n % 600 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 500)
	      return `φ${
        n % 500 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 400)
	      return `υ${
        n % 400 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 300)
	      return `τ${
        n % 300 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 200)
	      return `σ${
        n % 200 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 100)
	      return `ρ${
        n % 100 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 100)
      }`;
	    if (n >= 90)
	      return `ϟ${
        n % 90 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 80)
	      return `π${
        n % 80 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 70)
	      return `ο${
        n % 70 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 60)
	      return `ξ${
        n % 60 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 50)
	      return `ν${
        n % 50 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 40)
	      return `μ${
        n % 40 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 30)
	      return `λ${
        n % 30 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 20)
	      return `κ${
        n % 20 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 10)
	      return `ι${
        n % 10 === 0 ? '' : this.renderGreekNumeralMinuscules(n % 10)
      }`;
	    if (n >= 9) return 'θ';
	    if (n >= 8) return 'η';
	    if (n >= 7) return 'ζ';
	    if (n >= 6) return 'ϝ';
	    if (n >= 5) return 'ε';
	    if (n >= 4) return 'δ';
	    if (n >= 3) return 'γ';
	    if (n >= 2) return 'β';
	    if (n >= 1) return 'α';
	    return '\uD800\uDD8A';
	  }
	};

	var LowerLatin_1 = class LowerLatin extends Alphabetic_1 {
	  static get cssName() {
	    return 'lower-latin';
	  }

	  constructor() {
	    super({
	      symbols: 'a b c d e f g h i j k l m n o p q r s t u v w x y z',
	    });
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderRomanLower');

	var LowerRoman_1 = class LowerRoman {
	  static get cssName() {
	    return 'lower-roman';
	  }

	  render(counterValue) {
	    return this.renderRomanLower(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderRomanLower(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderRomanLower(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 5000) return this.renderNumber(n, '#,##0');
	    if (n >= 4000)
	      return `mmmm${n % 4000 === 0 ? '' : this.renderRomanLower(n % 1000)}`;
	    if (n >= 3000)
	      return `mmm${n % 3000 === 0 ? '' : this.renderRomanLower(n % 1000)}`;
	    if (n >= 2000)
	      return `mm${n % 2000 === 0 ? '' : this.renderRomanLower(n % 1000)}`;
	    if (n >= 1000)
	      return `m${n % 1000 === 0 ? '' : this.renderRomanLower(n % 1000)}`;
	    if (n >= 900)
	      return `cm${n % 900 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 800)
	      return `dccc${n % 800 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 700)
	      return `dcc${n % 700 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 600)
	      return `dc${n % 600 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 500)
	      return `d${n % 500 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 400)
	      return `cd${n % 400 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 300)
	      return `ccc${n % 300 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 200)
	      return `cc${n % 200 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 100)
	      return `c${n % 100 === 0 ? '' : this.renderRomanLower(n % 100)}`;
	    if (n >= 90)
	      return `xc${n % 90 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 80)
	      return `lxxx${n % 80 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 70)
	      return `lxx${n % 70 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 60)
	      return `lx${n % 60 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 50) return `l${n % 50 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 40)
	      return `xl${n % 40 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 30)
	      return `xxx${n % 30 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 20)
	      return `xx${n % 20 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 10) return `x${n % 10 === 0 ? '' : this.renderRomanLower(n % 10)}`;
	    if (n >= 9) return 'ix';
	    if (n >= 8) return 'viii';
	    if (n >= 7) return 'vii';
	    if (n >= 6) return 'vi';
	    if (n >= 5) return 'v';
	    if (n >= 4) return 'iv';
	    if (n >= 3) return 'iii';
	    if (n >= 2) return 'ii';
	    if (n >= 1) return 'i';
	    return 'n';
	  }
	};

	var None_1 = class None {
	  static get cssName() {
	    return 'none';
	  }

	  render() {
	    return '';
	  }
	};

	var Numeric_1 = class Numeric extends CounterStyle_1 {
	  static get cssName() {
	    return 'numeric';
	  }

	  renderValue(counterValue) {
	    let remainder = counterValue + 1;
	    if (remainder >= 1 && this.symbols.length > 0) {
	      let text = '';
	      while (remainder > 0) {
	        text = this.symbols[(remainder - 1) % this.symbols.length] + text;
	        remainder = Math.floor((remainder - 1) / this.symbols.length);
	      }
	      return text;
	    }
	  }
	};

	var Symbolic_1 = class Symbolic extends CounterStyle_1 {
	  static get cssName() {
	    return 'symbolic';
	  }

	  renderValue(counterValue) {
	    if (counterValue >= 1 && this.symbols.length > 0) {
	      const numRepetitions =
	        1 + Math.floor((counterValue - 1) / this.symbols.length);
	      return this.symbols[(counterValue - 1) % this.symbols.length].repeat(
	        numRepetitions
	      );
	    }
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderTamil');

	var Tamil_1 = class Tamil {
	  static get cssName() {
	    return 'tamil';
	  }

	  render(counterValue) {
	    return this.renderTamil(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderTamil(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderTamil(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 100000000) return this.renderNumber(n, '#,##,##0');
	    if (n >= 1000000)
	      return `${this.renderTamil(Math.floor(n / 1000000))}\u0BF1\u0BF2${
        n % 1000000 === 0 ? '' : this.renderTamilThousands(n % 1000000)
      }`;
	    if (n >= 2000)
	      return `${this.renderTamil(Math.floor(n / 1000))}\u0BF2${
        n % 2000 === 0 ? '' : this.renderTamil(n % 1000)
      }`;
	    if (n >= 1000)
	      return `\u0BF2${n % 1000 === 0 ? '' : this.renderTamil(n % 1000)}`;
	    if (n >= 200)
	      return `${this.renderTamil(Math.floor(n / 100))}\u0BF1${
        n % 200 === 0 ? '' : this.renderTamil(n % 100)
      }`;
	    if (n >= 100)
	      return `\u0BF1${n % 100 === 0 ? '' : this.renderTamil(n % 100)}`;
	    if (n >= 20)
	      return `${this.renderTamil(Math.floor(n / 10))}\u0BF0${
        n % 20 === 0 ? '' : this.renderTamil(n % 10)
      }`;
	    if (n >= 10) return `\u0BF0${n % 10 === 0 ? '' : this.renderTamil(n % 10)}`;
	    if (n >= 9) return '௯';
	    if (n >= 8) return '௮';
	    if (n >= 7) return '௭';
	    if (n >= 6) return '௬';
	    if (n >= 5) return '௫';
	    if (n >= 4) return '௪';
	    if (n >= 3) return '௩';
	    if (n >= 2) return '௨';
	    if (n >= 1) return '௧';
	    return '௦';
	  }

	  renderTamilThousands(n) {
	    if (n >= 1000)
	      return `${this.renderTamilThousands(Math.floor(n / 1000))}\u0BF2${
        n % 1000 === 0 ? '' : this.renderTamilThousands(n % 1000)
      }`;
	    return this.renderTamil(n);
	  }
	};

	var UpperAlpha = class LowerLatin extends Alphabetic_1 {
	  static get cssName() {
	    return 'upper-alpha';
	  }

	  constructor() {
	    super({
	      symbols: 'A B C D E F G H I J K L M N O P Q R S T U V W Z Y Z',
	    });
	  }
	};

	var UpperLatin = class LowerLatin extends Alphabetic_1 {
	  static get cssName() {
	    return 'upper-latin';
	  }

	  constructor() {
	    super({
	      symbols: 'A B C D E F G H I J K L M N O P Q R S T U V W Z Y Z',
	    });
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderGreekNumeralMajuscules');

	var UpperGreek_1 = class UpperGreek {
	  static get cssName() {
	    return 'upper-greek';
	  }

	  render(counterValue) {
	    return this.renderGreekNumeralMajuscules(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderGreekNumeralMajuscules(n) {
	    if (n >= 1000000000000000000) return this.renderNumber(n, '#,##0');
	    if (n >= 10000000000000000)
	      return `${this.renderGreekNumeralMajuscules(
        Math.floor(n / 10000000000000000)
      )}ΜΜΜΜ${
        n % 10000000000000000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMajuscules(n % 10000000000000000)}`
      }`;
	    if (n >= 1000000000000)
	      return `${this.renderGreekNumeralMajuscules(
        Math.floor(n / 1000000000000)
      )}ΜΜΜ${
        n % 1000000000000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMajuscules(n % 1000000000000)}`
      }`;
	    if (n >= 100000000)
	      return `${this.renderGreekNumeralMajuscules(
        Math.floor(n / 100000000)
      )}ΜΜ${
        n % 100000000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMajuscules(n % 100000000)}`
      }`;
	    if (n >= 10000)
	      return `${this.renderGreekNumeralMajuscules(Math.floor(n / 10000))}Μ${
        n % 10000 === 0
          ? ''
          : ` ${this.renderGreekNumeralMajuscules(n % 10000)}`
      }`;
	    if (n >= 1000)
	      return `\u0375${this.renderGreekNumeralMajuscules(Math.floor(n / 1000))}${
        n % 1000 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 1000)
      }`;
	    if (n >= 900)
	      return `Ϡ${
        n % 900 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 800)
	      return `Ω${
        n % 800 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 700)
	      return `Ψ${
        n % 700 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 600)
	      return `Χ${
        n % 600 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 500)
	      return `Φ${
        n % 500 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 400)
	      return `Υ${
        n % 400 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 300)
	      return `Τ${
        n % 300 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 200)
	      return `Σ${
        n % 200 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 100)
	      return `Ρ${
        n % 100 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 100)
      }`;
	    if (n >= 90)
	      return `Ϟ${
        n % 90 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 80)
	      return `Π${
        n % 80 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 70)
	      return `Ο${
        n % 70 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 60)
	      return `Ξ${
        n % 60 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 50)
	      return `Ν${
        n % 50 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 40)
	      return `Μ${
        n % 40 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 30)
	      return `Λ${
        n % 30 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 20)
	      return `Κ${
        n % 20 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 10)
	      return `Ι${
        n % 10 === 0 ? '' : this.renderGreekNumeralMajuscules(n % 10)
      }`;
	    if (n >= 9) return 'Θ';
	    if (n >= 8) return 'Η';
	    if (n >= 7) return 'Ζ';
	    if (n >= 6) return 'Ϝ';
	    if (n >= 5) return 'Ε';
	    if (n >= 4) return 'Δ';
	    if (n >= 3) return 'Γ';
	    if (n >= 2) return 'Β';
	    if (n >= 1) return 'Α';
	    return '\uD800\uDD8A';
	  }
	};

	// Generated from require('cldr').extractRbnfFunctionByType('root', 'renderRomanUpper');

	var UpperRoman_1 = class UpperRoman {
	  static get cssName() {
	    return 'upper-roman';
	  }

	  render(counterValue) {
	    return this.renderRomanUpper(counterValue);
	  }

	  renderNumber(n) {
	    return String(n);
	  }

	  renderRomanUpper(n) {
	    const isFractional = n !== Math.floor(n);
	    if (n < 0) return `\u2212${this.renderRomanUpper(-n)}`;
	    if (isFractional && n > 1) return this.renderNumber(n, '#,##0.00');
	    if (n >= 400000) return this.renderNumber(n, '#,##0');
	    if (n >= 300000)
	      return `ↈↈↈ${n % 300000 === 0 ? '' : this.renderRomanUpper(n % 100000)}`;
	    if (n >= 200000)
	      return `ↈↈ${n % 200000 === 0 ? '' : this.renderRomanUpper(n % 100000)}`;
	    if (n >= 100000)
	      return `ↈ${n % 100000 === 0 ? '' : this.renderRomanUpper(n % 100000)}`;
	    if (n >= 90000)
	      return `ↂↈ${n % 90000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 80000)
	      return `ↇↂↂↂ${n % 80000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 70000)
	      return `ↇↂↂ${n % 70000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 60000)
	      return `ↇↂ${n % 60000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 50000)
	      return `ↇ${n % 50000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 40000)
	      return `ↂↇ${n % 40000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 30000)
	      return `ↂↂↂ${n % 30000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 20000)
	      return `ↂↂ${n % 20000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 10000)
	      return `ↂ${n % 10000 === 0 ? '' : this.renderRomanUpper(n % 10000)}`;
	    if (n >= 9000)
	      return `Mↂ${n % 9000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 8000)
	      return `ↁMMM${n % 8000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 7000)
	      return `ↁMM${n % 7000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 6000)
	      return `ↁM${n % 6000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 5000)
	      return `ↁ${n % 5000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 4000)
	      return `Mↁ${n % 4000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 3000)
	      return `MMM${n % 3000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 2000)
	      return `MM${n % 2000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 1000)
	      return `M${n % 1000 === 0 ? '' : this.renderRomanUpper(n % 1000)}`;
	    if (n >= 900)
	      return `CM${n % 900 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 800)
	      return `DCCC${n % 800 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 700)
	      return `DCC${n % 700 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 600)
	      return `DC${n % 600 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 500)
	      return `D${n % 500 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 400)
	      return `CD${n % 400 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 300)
	      return `CCC${n % 300 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 200)
	      return `CC${n % 200 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 100)
	      return `C${n % 100 === 0 ? '' : this.renderRomanUpper(n % 100)}`;
	    if (n >= 90)
	      return `XC${n % 90 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 80)
	      return `LXXX${n % 80 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 70)
	      return `LXX${n % 70 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 60)
	      return `LX${n % 60 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 50) return `L${n % 50 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 40)
	      return `XL${n % 40 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 30)
	      return `XXX${n % 30 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 20)
	      return `XX${n % 20 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 10) return `X${n % 10 === 0 ? '' : this.renderRomanUpper(n % 10)}`;
	    if (n >= 9) return 'IX';
	    if (n >= 8) return 'VIII';
	    if (n >= 7) return 'VII';
	    if (n >= 6) return 'VI';
	    if (n >= 5) return 'V';
	    if (n >= 4) return 'IV';
	    if (n >= 3) return 'III';
	    if (n >= 2) return 'II';
	    if (n >= 1) return 'I';
	    return 'N';
	  }
	};

	const CounterClassByType = {};

	function create(name, options) {
	  if (typeof name === 'object' && name) {
	    if (options) {
	      options = {
	        ...name,
	        ...options,
	      };
	    } else {
	      options = name;
	    }
	    name = name.system;
	  }
	  if (name) {
	    const Constructor = CounterClassByType[name.toLowerCase()];
	    if (Constructor) {
	      return new Constructor(options);
	    }
	  }
	}

	var lib$1 = create;

	create.supports = create.isSupported = (name) => {
	  if (typeof name === 'object' && name) {
	    name = name.system;
	  }
	  return Object.prototype.hasOwnProperty.call(
	    CounterClassByType,
	    name.toLowerCase()
	  );
	};

	for (const Class of [
	  Additive_1,
	  Alphabetic_1,
	  Armenian_1,
	  CounterStyle_1,
	  Cyclic_1,
	  Decimal,
	  DecimalLeadingZero_1,
	  Disc_1,
	  Ethiopic_1,
	  Fixed_1,
	  Georgian_1,
	  Hebrew_1,
	  LowerAlpha_1,
	  LowerGreek_1,
	  LowerLatin_1,
	  LowerRoman_1,
	  None_1,
	  Numeric_1,
	  Symbolic_1,
	  Tamil_1,
	  UpperAlpha,
	  UpperLatin,
	  UpperGreek_1,
	  UpperRoman_1,
	]) {
	  if (Class.cssName) {
	    CounterClassByType[Class.cssName] = Class;
	  }
	}

	// Expand an object with array values into all possible permutations of the properties

	// expandPermutations({a: [1, 2], b: [3, 4]}) =>
	// [
	//   { b: 3, a: 1 },
	//   { b: 4, a: 1 },
	//   { b: 3, a: 2 },
	//   { b: 4, a: 2 }
	// ]

	function* expandPermutations(obj, propertyNames) {
	  propertyNames = propertyNames || Object.keys(obj);
	  if (propertyNames.length === 0) {
	    return [];
	  }
	  const firstPropertyName = propertyNames[0];
	  const firstPropertyValues = obj[propertyNames[0]];

	  for (let i = 0; i < Math.max(1, firstPropertyValues.length); i += 1) {
	    if (propertyNames.length > 1) {
	      for (const permutation of expandPermutations(
	        obj,
	        propertyNames.slice(1)
	      )) {
	        permutation[firstPropertyName] = firstPropertyValues[i];
	        yield permutation;
	      }
	    } else {
	      const permutation = {};
	      permutation[firstPropertyName] = firstPropertyValues[i];
	      yield permutation;
	    }
	  }
	}

	var expandPermutations_1 = expandPermutations;

	// Object.assign-like function that turns the values into nulls in case of mismatches
	// Returns undefined if combining the predicates would result in a conflict,
	// eg. combinePredicates([{ 'mediaQuery:3dglasses': false }, { 'mediaQuery:3dglasses': true }])
	function combinePredicates(predicatesArray) {
	  // ...
	  const combinedPredicates = {};
	  for (let i = 0; i < predicatesArray.length; i += 1) {
	    const predicates = predicatesArray[i];
	    const predicateNames = Object.keys(predicates);
	    for (let j = 0; j < predicateNames.length; j += 1) {
	      const predicateName = predicateNames[j];
	      const value = predicates[predicateName];
	      if (typeof combinedPredicates[predicateName] === 'undefined') {
	        combinedPredicates[predicateName] = value;
	      } else if (combinedPredicates[predicateName] !== value) {
	        return; // Conflict, return undefined
	      }
	    }
	  }
	  return combinedPredicates;
	}

	var combinePredicates_1 = combinePredicates;

	function createCounterRenderer(props, counterStyles) {
	  const { fallback, ...options } = props;
	  return counteraction(options, {
	    fallback() {
	      if (fallback) {
	        const fallbackCounterStyle = counterStyles.find(
	          (counterStyle) => counterStyle.name === fallback
	        );
	        if (fallbackCounterStyle) {
	          return createCounterRenderer(
	            fallbackCounterStyle.props,
	            counterStyles
	          );
	        } else {
	          return fallback;
	        }
	      }
	    },
	  });
	}

	var createCounterRenderer_1 = createCounterRenderer;

	function extractQuotes(quotes, token) {
	  if (!quotes || quotes === 'none') {
	    return '';
	  }
	  let text = '';
	  let num = 0;
	  // Tokenize the quotes attribute into quoted strings, eg.: '>>' '<<'
	  quotes.replace(
	    /"((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)'/g,
	    ($0, doubleQuotedString, singleQuotedString) => {
	      if (
	        (token === 'open-quote' && num % 2 === 0) ||
	        (token === 'close-quote' && num % 2 === 1)
	      ) {
	        if (typeof doubleQuotedString === 'string') {
	          text += unescapeCssString_1$1(doubleQuotedString);
	        } else {
	          // typeof singleQuotedString === 'string'
	          text += unescapeCssString_1$1(singleQuotedString);
	        }
	      }
	      num += 1;
	    }
	  );
	  return text;
	}

	function tokenizeContent(content) {
	  const tokens = [];
	  // <content-list> = [ <string> | contents | <image> | <quote> | <target> | <leader()> ]+
	  (content || 'normal').replace(
	    /(url\(\s*(?:'(?:[^']|\\')*'|"(?:[^"]|\\")*"|(?:[^'"\\]|\\.)*?\s*)\))|counter\(\s*([a-z0-9-]+)\s*,\s*([a-zA-Z0-9-]+)\s*\)|counters\(\s*([a-z0-9-]+)\s*,\s*(?:"((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)')\s*(?:,\s*([a-zA-Z0-9-]+)\s*)?\)|"((?:[^"\\]|\\.)*)"|'((?:[^'\\]|\\.)*)'|([^'"]+)/g,
	    (
	      $0,
	      url,
	      counterName,
	      counterStyle,
	      countersCounterName,
	      doubleQuotedCountersSeparator,
	      singleQuotedCountersSeparator,
	      countersCounterStyle,
	      doubleQuotedString,
	      singleQuotedString,
	      other
	    ) => {
	      if (typeof doubleQuotedString === 'string') {
	        tokens.push({
	          type: 'string',
	          value: unescapeCssString_1$1(doubleQuotedString),
	        });
	      } else if (typeof singleQuotedString === 'string') {
	        tokens.push({
	          type: 'string',
	          value: unescapeCssString_1$1(singleQuotedString),
	        });
	      } else if (url) {
	        tokens.push({ type: 'url', value: url });
	      } else if (counterStyle) {
	        tokens.push({
	          type: 'counter',
	          name: counterName,
	          value: counterStyle,
	        });
	      } else if (typeof doubleQuotedCountersSeparator === 'string') {
	        tokens.push({
	          type: 'counters',
	          separator: unescapeCssString_1$1(doubleQuotedCountersSeparator),
	          value: countersCounterStyle || 'decimal',
	          name: countersCounterName,
	        });
	      } else if (typeof singleQuotedCountersSeparator === 'string') {
	        tokens.push({
	          type: 'counters',
	          separator: unescapeCssString_1$1(singleQuotedCountersSeparator),
	          value: countersCounterStyle || 'decimal',
	          name: countersCounterName,
	        });
	      } else {
	        other = other.trim();
	        if (other === 'open-quote' || other === 'close-quote') {
	          tokens.push({ type: other });
	        } else if (other === 'normal' || other === 'none') {
	          tokens.push({ type: other });
	        } else {
	          const matchAttr = other.trim().match(/^attr\(([\w-]+)\)$/);
	          if (matchAttr) {
	            tokens.push({ type: 'attr', value: matchAttr[1] });
	          } else {
	            // throw new Error('Cannot parse token: ' + other);
	            tokens.push({ type: 'string', value: other });
	          }
	        }
	      }
	    }
	  );
	  return tokens;
	}

	function expandContent(
	  tokens,
	  node,
	  quotes,
	  hypotheticalCounterStyleByName,
	  possibleCounterValuesByName
	) {
	  let text = '';
	  for (const token of tokens) {
	    if (token.type === 'string') {
	      text += token.value;
	    } else if (token.type === 'counter' || token.type === 'counters') {
	      const renderer = counteraction(token.value);
	      if (renderer) {
	        text += (possibleCounterValuesByName[token.name] || [0])
	          .map((counterValue) => renderer.render(counterValue))
	          .join('');
	      } else if (hypotheticalCounterStyleByName[token.value]) {
	        const counterStyles = Object.keys(hypotheticalCounterStyleByName).map(
	          (name) => ({
	            name,
	            props: hypotheticalCounterStyleByName[name].value,
	          })
	        );
	        const renderer = createCounterRenderer_1(
	          hypotheticalCounterStyleByName[token.value].value,
	          counterStyles
	        );
	        text += (possibleCounterValuesByName[token.name] || [0]).map(
	          (counterValue) => renderer.render(counterValue)
	        );
	      } else ;
	      if (token.type === 'counters') {
	        text += token.separator;
	      }
	    } else if (token.type === 'open-quote' || token.type === 'close-quote') {
	      text += extractQuotes(quotes, token.type);
	    } else if (token.type === 'attr') {
	      text += node.getAttribute(token.value) || '';
	    }
	  }
	  return text;
	}

	function extractTextFromContentPropertyValue(
	  value,
	  node,
	  hypotheticalQuotesValues,
	  hypotheticalCounterStyleValuesByName,
	  possibleCounterValuesByName
	) {
	  const tokens = tokenizeContent(value);
	  const isSeenByCounterStyle = {};
	  function markCounterStyleAsSeen(counterStyleName) {
	    if (!counteraction.isSupported(counterStyleName)) {
	      isSeenByCounterStyle[counterStyleName] = true;
	      const hypotheticalValues =
	        hypotheticalCounterStyleValuesByName[counterStyleName];
	      if (hypotheticalValues) {
	        for (const hypotheticalValue of hypotheticalValues) {
	          if (hypotheticalValue.value.fallback) {
	            markCounterStyleAsSeen(hypotheticalValue.value.fallback);
	          }
	        }
	      }
	    }
	  }

	  for (const token of tokens) {
	    if (token.type === 'counter' || token.type === 'counters') {
	      markCounterStyleAsSeen(token.value);
	    }
	  }
	  const usesQuotes = tokens.some(
	    (token) => token.type === 'open-quote' || token.type === 'close-quote'
	  );
	  function expandCounterStyles(quotes) {
	    const referencedCounterStyleNames = Object.keys(isSeenByCounterStyle);
	    if (referencedCounterStyleNames.length > 0) {
	      const result = [];
	      for (const hypotheticalCounterStyleByName of expandPermutations_1(
	        hypotheticalCounterStyleValuesByName,
	        referencedCounterStyleNames
	      )) {
	        const value = expandContent(
	          tokens,
	          node,
	          quotes,
	          hypotheticalCounterStyleByName,
	          possibleCounterValuesByName
	        );
	        if (value) {
	          const predicates = combinePredicates_1(
	            Object.keys(hypotheticalCounterStyleByName).map(
	              (counterStyleName) =>
	                hypotheticalCounterStyleByName[counterStyleName].predicates
	            )
	          );
	          if (predicates) {
	            result.push({ value, predicates });
	          }
	        }
	      }
	      return result;
	    } else {
	      return [
	        {
	          value: expandContent(
	            tokens,
	            node,
	            quotes,
	            hypotheticalCounterStyleValuesByName,
	            possibleCounterValuesByName
	          ),
	          predicates: {},
	        },
	      ];
	    }
	  }

	  if (usesQuotes) {
	    const result = [];
	    for (const hypotheticalQuotesValue of hypotheticalQuotesValues) {
	      const expandedContentValues = expandCounterStyles(
	        hypotheticalQuotesValue.value
	      );
	      for (const value of expandedContentValues) {
	        value.predicates = combinePredicates_1([
	          value.predicates,
	          hypotheticalQuotesValue.predicates,
	        ]);
	        if (value.predicates) {
	          result.push(value);
	        }
	      }
	    }
	    return result;
	  } else {
	    return expandCounterStyles();
	  }
	}

	var extractTextFromContentPropertyValue_1 = extractTextFromContentPropertyValue;

	function e(e){return !/^(-?\d|--)/.test(e)}function t(t){for(var l,n=[],f="",i="",r=7,s=0;l=t.charAt(s);s++)if(/[a-zA-Z\d\xa0-\uffff_-]/.test(l)&&7===r)f+=l;else if("\\"===l&&7===r)r=6;else if(" "===l&&7===r){if(""!==f){if(!e(f))return null;n.push(f),f="";}}else if(6===r)/[0-9a-f]/i.test(l)?(i+=l,r=8):(f+=l,r=7);else {if(8!==r)return null;/[0-9a-f]/i.test(l)&&i.length<6?i+=l:(f+=String.fromCodePoint(parseInt(i,16)),f+=l,i="",r=7);}if(""!==f){if(!e(f))return null;n.push(f);}return n.join(" ")}function l(e,l){for(var n,f=l,i="",r={"font-family":[]},s=0;n=e.charAt(s);s+=1)if(4!==f||'"'!==n&&"'"!==n)if(3===f&&","===n)f=4,i="";else if(4===f&&","===n){var a=t(i);a&&r["font-family"].push(a),i="";}else if(5===f&&" "===n)/^(?:\+|-)?(?:[0-9]*\.)?[0-9]+(?:deg|grad|rad|turn)$/.test(i)?(r["font-style"]+=" "+i,i=""):s-=1,f=1;else if(1!==f||" "!==n&&"/"!==n)2===f&&" "===n?(/^(?:\+|-)?([0-9]*\.)?[0-9]+(?:em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)?$/.test(i)&&(r["line-height"]=i),f=4,i=""):i+=n;else {if(/^(?:(?:xx|x)-large|(?:xx|s)-small|small|large|medium)$/.test(i)||/^(?:larg|small)er$/.test(i)||/^(?:\+|-)?(?:[0-9]*\.)?[0-9]+(?:em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|%)$/.test(i))f="/"===n?2:4,r["font-size"]=i;else if(/^italic$/.test(i))r["font-style"]=i;else if(/^oblique$/.test(i))r["font-style"]=i,f=5;else if(/^small-caps$/.test(i))r["font-variant"]=i;else if(/^(?:bold(?:er)?|lighter|normal)$/.test(i))r["font-weight"]=i;else if(/^[+-]?(?:[0-9]*\.)?[0-9]+(?:e[+-]?(?:0|[1-9][0-9]*))?$/.test(i)){var u=parseFloat(i);u>=1&&u<=1e3&&(r["font-weight"]=i);}else /^(?:(?:ultra|extra|semi)-)?(?:condensed|expanded)$/.test(i)&&(r["font-stretch"]=i);i="";}else {var o=s+1;do{if(!(o=e.indexOf(n,o)+1))return null}while("\\"===e.charAt(o-2));r["font-family"].push(e.slice(s+1,o-1).replace(/\\('|")/g,"$1")),s=o-1,f=3,i="";}if(3===f&&!/^\s*$/.test(i))return null;if(4===f){var m=t(i);m&&r["font-family"].push(m);}return r}function n(e){var t=l(e,4);return null!==t?t["font-family"]:null}function f(e){var t=l(e,1);return null!==t&&t["font-size"]&&t["font-family"].length?t:null}

	var cssFontParser_module = /*#__PURE__*/Object.freeze({
		__proto__: null,
		parseFont: f,
		parseFontFamily: n
	});

	var initialValueByProp = {
	  // 'font-family': 'serif'
	  'font-weight': 'normal',
	  'font-style': 'normal',
	  'font-stretch': 'normal',
	  content: 'normal',
	  quotes: '"«" "»" "‹" "›" "‘" "’" "\'" "\'" "\\"" "\\""', // Wide default set to account for browser differences
	  'list-style-type': 'none',
	  display: 'inline',
	  'animation-name': 'none',
	  'animation-timing-function': 'ease',
	  'text-transform': 'none',
	  'transition-property': 'all',
	  'transition-duration': '0s',
	  'counter-increment': 'none',
	  'counter-reset': 'none',
	  'counter-set': 'none',
	  'white-space': 'normal',
	  'font-variation-settings': 'normal',
	};

	function duplicateComputedStyle({ props, ...rest }) {
	  const duplicatedComputedStyle = {
	    ...rest,
	    props: {},
	  };
	  for (const prop of Object.keys(props)) {
	    let duplicatedValue = props[prop];
	    if (Array.isArray(duplicatedValue)) {
	      duplicatedValue = [...duplicatedValue];
	    }
	    duplicatedComputedStyle.props[prop] = duplicatedValue;
	  }
	  return duplicatedComputedStyle;
	}

	var duplicateComputedStyle_1 = duplicateComputedStyle;

	function* postcssValueVarNodeGenerator(parentNode) {
	  for (const node of parentNode.nodes) {
	    if (node.type === 'function' && node.value === 'var') {
	      if (
	        node.nodes.length > 0 &&
	        node.nodes[0].type === 'word' &&
	        /^--/.test(node.nodes[0].value)
	      ) {
	        yield [node, parentNode];
	      }
	    } else if (node.nodes) {
	      yield* postcssValueVarNodeGenerator(node);
	    }
	  }
	}

	var postcssValueVarNodeGenerator_1 = postcssValueVarNodeGenerator;

	var thin = 100;
	var extralight = 200;
	var ultralight = 200;
	var light = 300;
	var book = 400;
	var normal = 400;
	var regular = 400;
	var roman = 400;
	var medium = 500;
	var semibold = 600;
	var demibold = 600;
	var bold = 700;
	var extrabold = 800;
	var ultrabold = 800;
	var black = 900;
	var heavy = 900;
	var cssFontWeightNames$1 = {
		thin: thin,
		extralight: extralight,
		ultralight: ultralight,
		light: light,
		book: book,
		normal: normal,
		regular: regular,
		roman: roman,
		medium: medium,
		semibold: semibold,
		demibold: demibold,
		bold: bold,
		extrabold: extrabold,
		ultrabold: ultrabold,
		black: black,
		heavy: heavy
	};

	var cssFontWeightNames$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		thin: thin,
		extralight: extralight,
		ultralight: ultralight,
		light: light,
		book: book,
		normal: normal,
		regular: regular,
		roman: roman,
		medium: medium,
		semibold: semibold,
		demibold: demibold,
		bold: bold,
		extrabold: extrabold,
		ultrabold: ultrabold,
		black: black,
		heavy: heavy,
		'default': cssFontWeightNames$1
	});

	var cssFontWeightNames = getCjsExportFromNamespace(cssFontWeightNames$2);

	function parseFontWeight(value) {
	  let parsedValue = value;
	  if (typeof parsedValue === 'string') {
	    // FIXME: Stripping the +bolder... suffix here will not always yield the correct result
	    // when expanding animations and transitions
	    parsedValue = parsedValue.replace(/\+.*$/, '').toLowerCase();
	  }
	  parsedValue = parseFloat(cssFontWeightNames[parsedValue] || parsedValue);
	  if (parsedValue >= 1 && parsedValue <= 1000) {
	    return parsedValue;
	  } else {
	    return value;
	  }
	}

	var parseFontWeight_1 = parseFontWeight;

	function expandAnimations(computedStyle, keyframesDefinitions) {
	  if (computedStyle.props['animation-name'].length > 0) {
	    const isAnimatedByPropertyName = { 'animation-name': true };
	    for (const animationNameValue of computedStyle.props['animation-name']) {
	      for (const keyframesDefinition of keyframesDefinitions) {
	        if (keyframesDefinition.name === animationNameValue.value) {
	          keyframesDefinition.node.walkDecls((decl) => {
	            if (/^--/.test(decl.prop) || computedStyle.props[decl.prop]) {
	              isAnimatedByPropertyName[decl.prop] = true;
	            }
	          });
	        }
	      }
	    }
	    const animatedPropertyNames = Object.keys(isAnimatedByPropertyName);
	    if (animatedPropertyNames.length > 0) {
	      // Create a 1-level deep copy with new value arrays so we can add more items
	      // without mutating the caller's copy:
	      computedStyle = duplicateComputedStyle_1(computedStyle);
	      const extraValuesByProp = {};
	      for (const permutation of expandPermutations_1(
	        computedStyle.props,
	        animatedPropertyNames
	      )) {
	        if (permutation['animation-name'].value !== 'none') {
	          for (const keyframesDefinition of keyframesDefinitions) {
	            if (
	              keyframesDefinition.name === permutation['animation-name'].value
	            ) {
	              const seenValuesByProp = {};
	              for (const prop of Object.keys(permutation)) {
	                seenValuesByProp[prop] = [permutation[prop].value];
	              }
	              keyframesDefinition.node.walkDecls((decl) => {
	                if (/^--/.test(decl.prop) || computedStyle.props[decl.prop]) {
	                  seenValuesByProp[decl.prop].push(decl.value);
	                }
	              });
	              for (const prop of Object.keys(seenValuesByProp)) {
	                let values = seenValuesByProp[prop];
	                if (prop === 'font-weight') {
	                  // https://drafts.csswg.org/css-transitions/#animtype-font-weight
	                  const sortedValues = values.map(parseFontWeight_1).sort();
	                  values = [];
	                  for (
	                    let fontWeight = sortedValues[0];
	                    fontWeight <= sortedValues[sortedValues.length - 1];
	                    fontWeight += 100
	                  ) {
	                    values.push(String(fontWeight));
	                  }
	                }
	                for (const value of values) {
	                  (extraValuesByProp[prop] =
	                    extraValuesByProp[prop] || []).push({
	                    prop,
	                    value,
	                    predicates: permutation['animation-name'].predicates,
	                  });
	                }
	              }
	            }
	          }
	        }
	      }
	      for (const prop of Object.keys(extraValuesByProp)) {
	        computedStyle.props[prop].push(...extraValuesByProp[prop]);
	      }
	    }
	  }
	  return computedStyle;
	}

	var expandAnimations_1 = expandAnimations;

	function expandTransitions(computedStyle) {
	  if (
	    computedStyle.props['font-weight'] &&
	    computedStyle.props['transition-property']
	  ) {
	    const fontWeightTransitions = computedStyle.props[
	      'transition-property'
	    ].filter((hypotheticalValue) =>
	      /\b(?:font-weight|all)\b/.test(hypotheticalValue.value)
	    );
	    if (fontWeightTransitions.length > 0) {
	      const hypotheticalFontWeightValuesInPseudoClassStates =
	        computedStyle.props['font-weight'].filter((hypotheticalValue) =>
	          Object.keys(hypotheticalValue.predicates).some(
	            (predicate) =>
	              hypotheticalValue.predicates[predicate] &&
	              /^selectorWithPseudoClasses:/.test(predicate)
	          )
	        );
	      if (hypotheticalFontWeightValuesInPseudoClassStates.length > 0) {
	        const hypotheticalNonZeroTransitionDurations = computedStyle.props[
	          'transition-duration'
	        ].filter(
	          (hypotheticalValue) =>
	            !/^\s*0s\s*(,\s*0s\s*)*$/.test(hypotheticalValue.value)
	        );
	        if (hypotheticalNonZeroTransitionDurations.length > 0) {
	          const extraHypotheticalFontWeightValues = [];
	          for (const transitionDuration of hypotheticalNonZeroTransitionDurations) {
	            for (const fontWeightTransition of fontWeightTransitions) {
	              for (const hypotheticalFontWeightValueInPseudoClassStates of hypotheticalFontWeightValuesInPseudoClassStates) {
	                for (const hypotheticalFontWeightValue of computedStyle.props[
	                  'font-weight'
	                ]) {
	                  const fontWeightEndPoints = [
	                    hypotheticalFontWeightValue.value,
	                    hypotheticalFontWeightValueInPseudoClassStates.value,
	                  ].map(parseFontWeight_1);
	                  for (
	                    let fontWeight = Math.min(...fontWeightEndPoints) + 100;
	                    fontWeight < Math.max(...fontWeightEndPoints);
	                    fontWeight += 100
	                  ) {
	                    // Explicitly don't include hypotheticalFontWeightValueInPseudoClassStates.predicates
	                    const combinedPredicates = combinePredicates_1([
	                      transitionDuration.predicates,
	                      fontWeightTransition.predicates,
	                      hypotheticalFontWeightValue.predicates,
	                    ]);
	                    if (combinedPredicates) {
	                      extraHypotheticalFontWeightValues.push({
	                        prop: 'font-weight',
	                        value: String(fontWeight),
	                        predicates: combinedPredicates,
	                      });
	                    }
	                  }
	                }
	              }
	            }
	          }
	          if (extraHypotheticalFontWeightValues.length > 0) {
	            // Create a shallow copy and add the extra hypothetical font-weight values
	            computedStyle = duplicateComputedStyle_1(computedStyle);
	            computedStyle.props['font-weight'] = [
	              ...computedStyle.props['font-weight'],
	              ...extraHypotheticalFontWeightValues,
	            ];
	          }
	        }
	      }
	    }
	  }
	  return computedStyle;
	}

	var expandTransitions_1 = expandTransitions;

	function replaceChildNode(parentNode, node, replacement) {
	  const index = parentNode.nodes.indexOf(node);
	  if (index === -1) {
	    throw new Error(
	      'The node to replace is not a child of the specified parent node'
	    );
	  }
	  if (replacement === undefined) {
	    parentNode.nodes.splice(index, 1);
	  } else if (Array.isArray(replacement)) {
	    parentNode.nodes.splice(index, 1, ...replacement);
	  } else if (typeof replacement === 'string') {
	    parentNode.nodes.splice(index, 1, ...lib$2(replacement).nodes);
	  } else {
	    // Assume postcss-value-parser node
	    parentNode.nodes.splice(index, 1, replacement);
	  }
	}

	function expandCustomProperties(computedStyle) {
	  let hasCopiedOuter = false;
	  for (const prop of Object.keys(computedStyle.props)) {
	    let hasCopiedInner = false;
	    let hypotheticalValues = computedStyle.props[prop];
	    const hypotheticalValuesByCustomProp = {};
	    for (let i = 0; i < hypotheticalValues.length; i += 1) {
	      const hypotheticalValue = hypotheticalValues[i];
	      // Quick test for whether the value contains custom properties:
	      if (/var\(--[^)]+\)/.test(hypotheticalValue.value)) {
	        const rootNode = lib$2(hypotheticalValue.value);
	        const seenCustomProperties = new Set();
	        for (const [node] of postcssValueVarNodeGenerator_1(rootNode)) {
	          const customPropertyName = node.nodes[0].value;
	          hypotheticalValuesByCustomProp[customPropertyName] =
	            hypotheticalValuesByCustomProp[customPropertyName] ||
	              computedStyle.props[customPropertyName] || [
	                {
	                  prop: hypotheticalValue.prop,
	                  value: undefined,
	                  predicates: hypotheticalValue.predicates,
	                },
	              ];
	          seenCustomProperties.add(customPropertyName);
	        }
	        if (seenCustomProperties.size === 0) {
	          // The quick regexp test was a false positive
	          continue;
	        }
	        const replacementHypotheticalValues = [];
	        for (const permutation of expandPermutations_1(
	          hypotheticalValuesByCustomProp
	        )) {
	          const predicates = combinePredicates_1([
	            hypotheticalValue.predicates,
	            ...Object.values(permutation).map((v) => v.predicates),
	          ]);
	          if (!predicates) {
	            // Skip value because of an impossible combination of predicates
	            continue;
	          }
	          const expandedRootNode = lib$2(hypotheticalValue.value);
	          const replacements = [];
	          for (const [node, parentNode] of postcssValueVarNodeGenerator_1(
	            expandedRootNode
	          )) {
	            const customPropertyName = node.nodes[0].value;

	            if (
	              permutation[customPropertyName] &&
	              permutation[customPropertyName].value &&
	              (!hypotheticalValue.expandedCustomProperties ||
	                !hypotheticalValue.expandedCustomProperties.has(
	                  customPropertyName
	                ))
	            ) {
	              replacements.push({
	                parentNode,
	                node,
	                replacement: permutation[customPropertyName].value,
	              });
	            } else if (
	              node.nodes.length > 2 &&
	              node.nodes[1].type === 'div' &&
	              node.nodes[1].value === ','
	            ) {
	              // Undefined property, but there is a default value
	              replacements.push({
	                parentNode,
	                node,
	                replacement: node.nodes.slice(2),
	              });
	            } else {
	              // Reference to an undefined custom property and no default value
	              replacements.push({
	                parentNode,
	                node,
	                replacement: initialValueByProp[prop],
	              });
	              break;
	            }
	          }
	          for (const { parentNode, node, replacement } of replacements) {
	            replaceChildNode(parentNode, node, replacement);
	          }
	          replacementHypotheticalValues.push({
	            predicates,
	            value: lib$2.stringify(expandedRootNode),
	            prop: hypotheticalValue.prop,
	            expandedCustomProperties: new Set([
	              ...(hypotheticalValues.expandedCustomProperties || []),
	              ...seenCustomProperties,
	            ]),
	          });
	        }
	        if (!hasCopiedOuter) {
	          computedStyle = duplicateComputedStyle_1(computedStyle);
	          hasCopiedOuter = true;
	        }
	        if (!hasCopiedInner) {
	          hypotheticalValues = computedStyle.props[prop] = [
	            ...hypotheticalValues,
	          ];
	          hasCopiedInner = true;
	        }
	        hypotheticalValues.splice(i, 1, ...replacementHypotheticalValues);
	        i -= 1;
	      }
	    }
	  }
	  return computedStyle;
	}

	var expandCustomProperties_1 = expandCustomProperties;

	var openParentheses = "(".charCodeAt(0);
	var closeParentheses = ")".charCodeAt(0);
	var singleQuote = "'".charCodeAt(0);
	var doubleQuote = '"'.charCodeAt(0);
	var backslash = "\\".charCodeAt(0);
	var slash = "/".charCodeAt(0);
	var comma = ",".charCodeAt(0);
	var colon = ":".charCodeAt(0);
	var star = "*".charCodeAt(0);

	var parse = function(input) {
	  var tokens = [];
	  var value = input;

	  var next, quote, prev, token, escape, escapePos, whitespacePos;
	  var pos = 0;
	  var code = value.charCodeAt(pos);
	  var max = value.length;
	  var stack = [{ nodes: tokens }];
	  var balanced = 0;
	  var parent;

	  var name = "";
	  var before = "";
	  var after = "";

	  while (pos < max) {
	    // Whitespaces
	    if (code <= 32) {
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      token = value.slice(pos, next);

	      prev = tokens[tokens.length - 1];
	      if (code === closeParentheses && balanced) {
	        after = token;
	      } else if (prev && prev.type === "div") {
	        prev.after = token;
	      } else if (
	        code === comma ||
	        code === colon ||
	        (code === slash && value.charCodeAt(next + 1) !== star)
	      ) {
	        before = token;
	      } else {
	        tokens.push({
	          type: "space",
	          sourceIndex: pos,
	          value: token
	        });
	      }

	      pos = next;

	      // Quotes
	    } else if (code === singleQuote || code === doubleQuote) {
	      next = pos;
	      quote = code === singleQuote ? "'" : '"';
	      token = {
	        type: "string",
	        sourceIndex: pos,
	        quote: quote
	      };
	      do {
	        escape = false;
	        next = value.indexOf(quote, next + 1);
	        if (~next) {
	          escapePos = next;
	          while (value.charCodeAt(escapePos - 1) === backslash) {
	            escapePos -= 1;
	            escape = !escape;
	          }
	        } else {
	          value += quote;
	          next = value.length - 1;
	          token.unclosed = true;
	        }
	      } while (escape);
	      token.value = value.slice(pos + 1, next);

	      tokens.push(token);
	      pos = next + 1;
	      code = value.charCodeAt(pos);

	      // Comments
	    } else if (code === slash && value.charCodeAt(pos + 1) === star) {
	      token = {
	        type: "comment",
	        sourceIndex: pos
	      };

	      next = value.indexOf("*/", pos);
	      if (next === -1) {
	        token.unclosed = true;
	        next = value.length;
	      }

	      token.value = value.slice(pos + 2, next);
	      tokens.push(token);

	      pos = next + 2;
	      code = value.charCodeAt(pos);

	      // Dividers
	    } else if (code === slash || code === comma || code === colon) {
	      token = value[pos];

	      tokens.push({
	        type: "div",
	        sourceIndex: pos - before.length,
	        value: token,
	        before: before,
	        after: ""
	      });
	      before = "";

	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Open parentheses
	    } else if (openParentheses === code) {
	      // Whitespaces after open parentheses
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      token = {
	        type: "function",
	        sourceIndex: pos - name.length,
	        value: name,
	        before: value.slice(pos + 1, next)
	      };
	      pos = next;

	      if (name === "url" && code !== singleQuote && code !== doubleQuote) {
	        next -= 1;
	        do {
	          escape = false;
	          next = value.indexOf(")", next + 1);
	          if (~next) {
	            escapePos = next;
	            while (value.charCodeAt(escapePos - 1) === backslash) {
	              escapePos -= 1;
	              escape = !escape;
	            }
	          } else {
	            value += ")";
	            next = value.length - 1;
	            token.unclosed = true;
	          }
	        } while (escape);
	        // Whitespaces before closed
	        whitespacePos = next;
	        do {
	          whitespacePos -= 1;
	          code = value.charCodeAt(whitespacePos);
	        } while (code <= 32);
	        if (pos !== whitespacePos + 1) {
	          token.nodes = [
	            {
	              type: "word",
	              sourceIndex: pos,
	              value: value.slice(pos, whitespacePos + 1)
	            }
	          ];
	        } else {
	          token.nodes = [];
	        }
	        if (token.unclosed && whitespacePos + 1 !== next) {
	          token.after = "";
	          token.nodes.push({
	            type: "space",
	            sourceIndex: whitespacePos + 1,
	            value: value.slice(whitespacePos + 1, next)
	          });
	        } else {
	          token.after = value.slice(whitespacePos + 1, next);
	        }
	        pos = next + 1;
	        code = value.charCodeAt(pos);
	        tokens.push(token);
	      } else {
	        balanced += 1;
	        token.after = "";
	        tokens.push(token);
	        stack.push(token);
	        tokens = token.nodes = [];
	        parent = token;
	      }
	      name = "";

	      // Close parentheses
	    } else if (closeParentheses === code && balanced) {
	      pos += 1;
	      code = value.charCodeAt(pos);

	      parent.after = after;
	      after = "";
	      balanced -= 1;
	      stack.pop();
	      parent = stack[balanced];
	      tokens = parent.nodes;

	      // Words
	    } else {
	      next = pos;
	      do {
	        if (code === backslash) {
	          next += 1;
	        }
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (
	        next < max &&
	        !(
	          code <= 32 ||
	          code === singleQuote ||
	          code === doubleQuote ||
	          code === comma ||
	          code === colon ||
	          code === slash ||
	          code === openParentheses ||
	          (code === closeParentheses && balanced)
	        )
	      );
	      token = value.slice(pos, next);

	      if (openParentheses === code) {
	        name = token;
	      } else {
	        tokens.push({
	          type: "word",
	          sourceIndex: pos,
	          value: token
	        });
	      }

	      pos = next;
	    }
	  }

	  for (pos = stack.length - 1; pos; pos -= 1) {
	    stack[pos].unclosed = true;
	  }

	  return stack[0].nodes;
	};

	var walk = function walk(nodes, cb, bubble) {
	  var i, max, node, result;

	  for (i = 0, max = nodes.length; i < max; i += 1) {
	    node = nodes[i];
	    if (!bubble) {
	      result = cb(node, i, nodes);
	    }

	    if (
	      result !== false &&
	      node.type === "function" &&
	      Array.isArray(node.nodes)
	    ) {
	      walk(node.nodes, cb, bubble);
	    }

	    if (bubble) {
	      cb(node, i, nodes);
	    }
	  }
	};

	function stringifyNode(node, custom) {
	  var type = node.type;
	  var value = node.value;
	  var buf;
	  var customResult;

	  if (custom && (customResult = custom(node)) !== undefined) {
	    return customResult;
	  } else if (type === "word" || type === "space") {
	    return value;
	  } else if (type === "string") {
	    buf = node.quote || "";
	    return buf + value + (node.unclosed ? "" : buf);
	  } else if (type === "comment") {
	    return "/*" + value + (node.unclosed ? "" : "*/");
	  } else if (type === "div") {
	    return (node.before || "") + value + (node.after || "");
	  } else if (Array.isArray(node.nodes)) {
	    buf = stringify(node.nodes);
	    if (type !== "function") {
	      return buf;
	    }
	    return (
	      value +
	      "(" +
	      (node.before || "") +
	      buf +
	      (node.after || "") +
	      (node.unclosed ? "" : ")")
	    );
	  }
	  return value;
	}

	function stringify(nodes, custom) {
	  var result, i;

	  if (Array.isArray(nodes)) {
	    result = "";
	    for (i = nodes.length - 1; ~i; i -= 1) {
	      result = stringifyNode(nodes[i], custom) + result;
	    }
	    return result;
	  }
	  return stringifyNode(nodes, custom);
	}

	var stringify_1 = stringify;

	var minus = "-".charCodeAt(0);
	var plus = "+".charCodeAt(0);
	var dot = ".".charCodeAt(0);
	var exp = "e".charCodeAt(0);
	var EXP = "E".charCodeAt(0);

	var unit = function(value) {
	  var pos = 0;
	  var length = value.length;
	  var dotted = false;
	  var sciPos = -1;
	  var containsNumber = false;
	  var code;

	  while (pos < length) {
	    code = value.charCodeAt(pos);

	    if (code >= 48 && code <= 57) {
	      containsNumber = true;
	    } else if (code === exp || code === EXP) {
	      if (sciPos > -1) {
	        break;
	      }
	      sciPos = pos;
	    } else if (code === dot) {
	      if (dotted) {
	        break;
	      }
	      dotted = true;
	    } else if (code === plus || code === minus) {
	      if (pos !== 0) {
	        break;
	      }
	    } else {
	      break;
	    }

	    pos += 1;
	  }

	  if (sciPos + 1 === pos) pos--;

	  return containsNumber
	    ? {
	        number: value.slice(0, pos),
	        unit: value.slice(pos)
	      }
	    : false;
	};

	function ValueParser(value) {
	  if (this instanceof ValueParser) {
	    this.nodes = parse(value);
	    return this;
	  }
	  return new ValueParser(value);
	}

	ValueParser.prototype.toString = function() {
	  return Array.isArray(this.nodes) ? stringify_1(this.nodes) : "";
	};

	ValueParser.prototype.walk = function(cb, bubble) {
	  walk(this.nodes, cb, bubble);
	  return this;
	};

	ValueParser.unit = unit;

	ValueParser.walk = walk;

	ValueParser.stringify = stringify_1;

	var lib = ValueParser;

	var parser_1 = createCommonjsModule(function (module, exports) {
	/* parser generated by jison 0.6.1-215 */

	/*
	 * Returns a Parser object of the following structure:
	 *
	 *  Parser: {
	 *    yy: {}     The so-called "shared state" or rather the *source* of it;
	 *               the real "shared state" `yy` passed around to
	 *               the rule actions, etc. is a derivative/copy of this one,
	 *               not a direct reference!
	 *  }
	 *
	 *  Parser.prototype: {
	 *    yy: {},
	 *    EOF: 1,
	 *    TERROR: 2,
	 *
	 *    trace: function(errorMessage, ...),
	 *
	 *    JisonParserError: function(msg, hash),
	 *
	 *    quoteName: function(name),
	 *               Helper function which can be overridden by user code later on: put suitable
	 *               quotes around literal IDs in a description string.
	 *
	 *    originalQuoteName: function(name),
	 *               The basic quoteName handler provided by JISON.
	 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
	 *               at the end of the `parse()`.
	 *
	 *    describeSymbol: function(symbol),
	 *               Return a more-or-less human-readable description of the given symbol, when
	 *               available, or the symbol itself, serving as its own 'description' for lack
	 *               of something better to serve up.
	 *
	 *               Return NULL when the symbol is unknown to the parser.
	 *
	 *    symbols_: {associative list: name ==> number},
	 *    terminals_: {associative list: number ==> name},
	 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
	 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
	 *    productions_: [...],
	 *
	 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
	 *
	 *               The function parameters and `this` have the following value/meaning:
	 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
	 *                             to store/reference the rule value `$$` and location info `@$`.
	 *
	 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
	 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
	 *                 data from one reduce action through to the next within a single parse run, then you
	 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
	 *
	 *                 `this.yy` is a direct reference to the `yy` shared state object.
	 *
	 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
	 *                 object at `parse()` start and are therefore available to the action code via the
	 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
	 *                 the %parse-param` list.
	 *
	 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
	 *                             to match this rule. This is *not* the look-ahead token, but the last token
	 *                             that's actually part of this rule.
	 *
	 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
	 *                 the current look-ahead token.
	 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
	 *
	 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
	 *
	 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
	 *
	 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
	 *
	 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
	 *                               of an empty object when no suitable location info can be provided.
	 *
	 *               - `yystate` : the current parser state number, used internally for dispatching and
	 *                               executing the action code chunk matching the rule currently being reduced.
	 *
	 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
	 *
	 *                 This one comes in handy when you are going to do advanced things to the parser
	 *                 stacks, all of which are accessible from your action code (see the next entries below).
	 *
	 *                 Also note that you can access this and other stack index values using the new double-hash
	 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
	 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
	 *                 This is made available to write very advanced grammar action rules, e.g. when you want
	 *                 to investigate the parse state stack in your action code, which would, for example,
	 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
	 *                 to the work described here:
	 *
	 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
	 *                   In Journées Francophones des Languages Applicatifs.
	 *
	 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
	 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
	 *
	 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
	 *
	 *                 This one comes in handy when you are going to do advanced things to the parser
	 *                 stacks, all of which are accessible from your action code (see the next entries below).
	 *
	 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
	 *                             constructs.
	 *
	 *               - `yylstack`: reference to the parser token location stack. Also accessed via
	 *                             the `@1` etc. constructs.
	 *
	 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
	 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
	 *                             action code did not provide a suitable location info object when such a
	 *                             slot was filled!
	 *
	 *               - `yystack` : reference to the parser token id stack. Also accessed via the
	 *                             `#1` etc. constructs.
	 *
	 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
	 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
	 *                 want access this array for your own purposes, such as error analysis as mentioned above!
	 *
	 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
	 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
	 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
	 *                 *reduced*.
	 *
	 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
	 *                             *states* such as the one in `yystate`, which are used to represent
	 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
	 *                             what can I say? If you access this one, you're clearly doing wicked things
	 *
	 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
	 *                             grammar definition file.
	 *
	 *    table: [...],
	 *               State transition table
	 *               ----------------------
	 *
	 *               index levels are:
	 *               - `state`  --> hash table
	 *               - `symbol` --> action (number or array)
	 *
	 *                 If the `action` is an array, these are the elements' meaning:
	 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
	 *                 - index [1]: GOTO `state`
	 *
	 *                 If the `action` is a number, it is the GOTO `state`
	 *
	 *    defaultActions: {...},
	 *
	 *    parseError: function(str, hash, ExceptionClass),
	 *    yyError: function(str, ...),
	 *    yyRecovering: function(),
	 *    yyErrOk: function(),
	 *    yyClearIn: function(),
	 *
	 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
	 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
	 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
	 *               See it's use in this parser kernel in many places; example usage:
	 *
	 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
	 *                                     parser.collect_expected_token_set(state), true);
	 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
	 *
	 *    originalParseError: function(str, hash, ExceptionClass),
	 *               The basic `parseError` handler provided by JISON.
	 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
	 *               at the end of the `parse()`.
	 *
	 *    options: { ... parser %options ... },
	 *
	 *    parse: function(input[, args...]),
	 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
	 *               the root action, in which case the parser is acting as a *matcher*).
	 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
	 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
	 *
	 *               WARNING:
	 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
	 *               any attributes already added to `yy` by the jison run-time;
	 *               when such a collision is detected an exception is thrown to prevent the generated run-time
	 *               from silently accepting this confusing and potentially hazardous situation!
	 *
	 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
	 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
	 *               object and any collision with those will be reported by the lexer via a thrown exception.
	 *
	 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
	 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
	 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
	 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
	 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
	 *               the internal parser gets properly garbage collected under these particular circumstances.
	 *
	 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
	 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
	 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
	 *
	 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
	 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
	 *               backwards.
	 *
	 *               For more info see the documentation comment further below, immediately above this function's
	 *               implementation.
	 *
	 *    lexer: {
	 *        yy: {...},           A reference to the so-called "shared state" `yy` once
	 *                             received via a call to the `.setInput(input, yy)` lexer API.
	 *        EOF: 1,
	 *        ERROR: 2,
	 *        JisonLexerError: function(msg, hash),
	 *        parseError: function(str, hash, ExceptionClass),
	 *        setInput: function(input, [yy]),
	 *        input: function(),
	 *        unput: function(str),
	 *        more: function(),
	 *        reject: function(),
	 *        less: function(n),
	 *        pastInput: function(n),
	 *        upcomingInput: function(n),
	 *        showPosition: function(),
	 *        test_match: function(regex_match_array, rule_index, ...),
	 *        next: function(...),
	 *        lex: function(...),
	 *        begin: function(condition),
	 *        pushState: function(condition),
	 *        popState: function(),
	 *        topState: function(),
	 *        _currentRules: function(),
	 *        stateStackSize: function(),
	 *        cleanupAfterLex: function()
	 *
	 *        options: { ... lexer %options ... },
	 *
	 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
	 *        rules: [...],
	 *        conditions: {associative list: name ==> set},
	 *    }
	 *  }
	 *
	 *
	 *  token location info (@$, _$, etc.): {
	 *    first_line: n,
	 *    last_line: n,
	 *    first_column: n,
	 *    last_column: n,
	 *    range: [start_number, end_number]
	 *               (where the numbers are indexes into the input string, zero-based)
	 *  }
	 *
	 * ---
	 *
	 * The `parseError` function receives a 'hash' object with these members for lexer and
	 * parser errors:
	 *
	 *  {
	 *    text:        (matched text)
	 *    token:       (the produced terminal token, if any)
	 *    token_id:    (the produced terminal token numeric ID, if any)
	 *    line:        (yylineno)
	 *    loc:         (yylloc)
	 *  }
	 *
	 * parser (grammar) errors will also provide these additional members:
	 *
	 *  {
	 *    expected:    (array describing the set of expected tokens;
	 *                  may be UNDEFINED when we cannot easily produce such a set)
	 *    state:       (integer (or array when the table includes grammar collisions);
	 *                  represents the current internal state of the parser kernel.
	 *                  can, for example, be used to pass to the `collect_expected_token_set()`
	 *                  API to obtain the expected token set)
	 *    action:      (integer; represents the current internal action which will be executed)
	 *    new_state:   (integer; represents the next/planned internal state, once the current
	 *                  action has executed)
	 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
	 *                  available for this particular error)
	 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
	 *                  for instance, for advanced error analysis and reporting)
	 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
	 *                  for instance, for advanced error analysis and reporting)
	 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
	 *                  for instance, for advanced error analysis and reporting)
	 *    yy:          (object: the current parser internal "shared state" `yy`
	 *                  as is also available in the rule actions; this can be used,
	 *                  for instance, for advanced error analysis and reporting)
	 *    lexer:       (reference to the current lexer instance used by the parser)
	 *    parser:      (reference to the current parser instance)
	 *  }
	 *
	 * while `this` will reference the current parser instance.
	 *
	 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
	 * instance, while these additional `hash` fields will also be provided:
	 *
	 *  {
	 *    lexer:       (reference to the current lexer instance which reported the error)
	 *  }
	 *
	 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
	 * from either the parser or lexer, `this` will still reference the related *parser*
	 * instance, while these additional `hash` fields will also be provided:
	 *
	 *  {
	 *    exception:   (reference to the exception thrown)
	 *  }
	 *
	 * Please do note that in the latter situation, the `expected` field will be omitted as
	 * this type of failure is assumed not to be due to *parse errors* but rather due to user
	 * action code in either parser or lexer failing unexpectedly.
	 *
	 * ---
	 *
	 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
	 * These options are available:
	 *
	 * ### options which are global for all parser instances
	 *
	 *  Parser.pre_parse: function(yy)
	 *                 optional: you can specify a pre_parse() function in the chunk following
	 *                 the grammar, i.e. after the last `%%`.
	 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
	 *                 optional: you can specify a post_parse() function in the chunk following
	 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
	 *                 the parser will return the original `retval`.
	 *
	 * ### options which can be set up per parser instance
	 *
	 *  yy: {
	 *      pre_parse:  function(yy)
	 *                 optional: is invoked before the parse cycle starts (and before the first
	 *                 invocation of `lex()`) but immediately after the invocation of
	 *                 `parser.pre_parse()`).
	 *      post_parse: function(yy, retval, parseInfo) { return retval; }
	 *                 optional: is invoked when the parse terminates due to success ('accept')
	 *                 or failure (even when exceptions are thrown).
	 *                 `retval` contains the return value to be produced by `Parser.parse()`;
	 *                 this function can override the return value by returning another.
	 *                 When it does not return any value, the parser will return the original
	 *                 `retval`.
	 *                 This function is invoked immediately before `parser.post_parse()`.
	 *
	 *      parseError: function(str, hash, ExceptionClass)
	 *                 optional: overrides the default `parseError` function.
	 *      quoteName: function(name),
	 *                 optional: overrides the default `quoteName` function.
	 *  }
	 *
	 *  parser.lexer.options: {
	 *      pre_lex:  function()
	 *                 optional: is invoked before the lexer is invoked to produce another token.
	 *                 `this` refers to the Lexer object.
	 *      post_lex: function(token) { return token; }
	 *                 optional: is invoked when the lexer has produced a token `token`;
	 *                 this function can override the returned token value by returning another.
	 *                 When it does not return any (truthy) value, the lexer will return
	 *                 the original `token`.
	 *                 `this` refers to the Lexer object.
	 *
	 *      ranges: boolean
	 *                 optional: `true` ==> token location info will include a .range[] member.
	 *      flex: boolean
	 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
	 *                 exhaustively to find the longest match.
	 *      backtrack_lexer: boolean
	 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
	 *                 the lexer terminates the scan when a token is returned by the action code.
	 *      xregexp: boolean
	 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
	 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
	 *                 rule regexes have been written as standard JavaScript RegExp expressions.
	 *  }
	 */

	        
	    
	            var parser = (function () {


	// See also:
	// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
	// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
	// with userland code which might access the derived class in a 'classic' way.
	function JisonParserError(msg, hash) {
	    Object.defineProperty(this, 'name', {
	        enumerable: false,
	        writable: false,
	        value: 'JisonParserError'
	    });

	    if (msg == null) msg = '???';

	    Object.defineProperty(this, 'message', {
	        enumerable: false,
	        writable: true,
	        value: msg
	    });

	    this.hash = hash;

	    var stacktrace;
	    if (hash && hash.exception instanceof Error) {
	        var ex2 = hash.exception;
	        this.message = ex2.message || msg;
	        stacktrace = ex2.stack;
	    }
	    if (!stacktrace) {
	        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
	            Error.captureStackTrace(this, this.constructor);
	        } else {
	            stacktrace = (new Error(msg)).stack;
	        }
	    }
	    if (stacktrace) {
	        Object.defineProperty(this, 'stack', {
	            enumerable: false,
	            writable: false,
	            value: stacktrace
	        });
	    }
	}

	if (typeof Object.setPrototypeOf === 'function') {
	    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
	} else {
	    JisonParserError.prototype = Object.create(Error.prototype);
	}
	JisonParserError.prototype.constructor = JisonParserError;
	JisonParserError.prototype.name = 'JisonParserError';




	        // helper: reconstruct the productions[] table
	        function bp(s) {
	            var rv = [];
	            var p = s.pop;
	            var r = s.rule;
	            for (var i = 0, l = p.length; i < l; i++) {
	                rv.push([
	                    p[i],
	                    r[i]
	                ]);
	            }
	            return rv;
	        }
	    


	        // helper: reconstruct the defaultActions[] table
	        function bda(s) {
	            var rv = {};
	            var d = s.idx;
	            var g = s.goto;
	            for (var i = 0, l = d.length; i < l; i++) {
	                var j = d[i];
	                rv[j] = g[i];
	            }
	            return rv;
	        }
	    


	        // helper: reconstruct the 'goto' table
	        function bt(s) {
	            var rv = [];
	            var d = s.len;
	            var y = s.symbol;
	            var t = s.type;
	            var a = s.state;
	            var m = s.mode;
	            var g = s.goto;
	            for (var i = 0, l = d.length; i < l; i++) {
	                var n = d[i];
	                var q = {};
	                for (var j = 0; j < n; j++) {
	                    var z = y.shift();
	                    switch (t.shift()) {
	                    case 2:
	                        q[z] = [
	                            m.shift(),
	                            g.shift()
	                        ];
	                        break;

	                    case 0:
	                        q[z] = a.shift();
	                        break;

	                    default:
	                        // type === 1: accept
	                        q[z] = [
	                            3
	                        ];
	                    }
	                }
	                rv.push(q);
	            }
	            return rv;
	        }
	    


	        // helper: runlength encoding with increment step: code, length: step (default step = 0)
	        // `this` references an array
	        function s(c, l, a) {
	            a = a || 0;
	            for (var i = 0; i < l; i++) {
	                this.push(c);
	                c += a;
	            }
	        }

	        // helper: duplicate sequence from *relative* offset and length.
	        // `this` references an array
	        function c(i, l) {
	            i = this.length - i;
	            for (l += i; i < l; i++) {
	                this.push(this[i]);
	            }
	        }

	        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
	        function u(a) {
	            var rv = [];
	            for (var i = 0, l = a.length; i < l; i++) {
	                var e = a[i];
	                // Is this entry a helper function?
	                if (typeof e === 'function') {
	                    i++;
	                    e.apply(rv, a[i]);
	                } else {
	                    rv.push(e);
	                }
	            }
	            return rv;
	        }
	    

	var parser = {
	    // Code Generator Information Report
	    // ---------------------------------
	    //
	    // Options:
	    //
	    //   default action mode: ............. ["classic","merge"]
	    //   test-compile action mode: ........ "parser:*,lexer:*"
	    //   try..catch: ...................... true
	    //   default resolve on conflict: ..... true
	    //   on-demand look-ahead: ............ false
	    //   error recovery token skip maximum: 3
	    //   yyerror in parse actions is: ..... NOT recoverable,
	    //   yyerror in lexer actions and other non-fatal lexer are:
	    //   .................................. NOT recoverable,
	    //   debug grammar/output: ............ false
	    //   has partial LR conflict upgrade:   true
	    //   rudimentary token-stack support:   false
	    //   parser table compression mode: ... 2
	    //   export debug tables: ............. false
	    //   export *all* tables: ............. false
	    //   module type: ..................... commonjs
	    //   parser engine type: .............. lalr
	    //   output main() in the module: ..... true
	    //   has user-specified main(): ....... false
	    //   has user-specified require()/import modules for main():
	    //   .................................. false
	    //   number of expected conflicts: .... 0
	    //
	    //
	    // Parser Analysis flags:
	    //
	    //   no significant actions (parser is a language matcher only):
	    //   .................................. false
	    //   uses yyleng: ..................... false
	    //   uses yylineno: ................... false
	    //   uses yytext: ..................... false
	    //   uses yylloc: ..................... false
	    //   uses ParseError API: ............. false
	    //   uses YYERROR: .................... false
	    //   uses YYRECOVERING: ............... false
	    //   uses YYERROK: .................... false
	    //   uses YYCLEARIN: .................. false
	    //   tracks rule values: .............. true
	    //   assigns rule values: ............. true
	    //   uses location tracking: .......... false
	    //   assigns location: ................ false
	    //   uses yystack: .................... false
	    //   uses yysstack: ................... false
	    //   uses yysp: ....................... true
	    //   uses yyrulelength: ............... false
	    //   uses yyMergeLocationInfo API: .... false
	    //   has error recovery: .............. false
	    //   has error reporting: ............. false
	    //
	    // --------- END OF REPORT -----------

	trace: function no_op_trace() { },
	JisonParserError: JisonParserError,
	yy: {},
	options: {
	  type: "lalr",
	  hasPartialLrUpgradeOnConflict: true,
	  errorRecoveryTokenDiscardCount: 3
	},
	symbols_: {
	  "$accept": 0,
	  "$end": 1,
	  "ADD": 3,
	  "ANGLE": 16,
	  "CHS": 22,
	  "COMMA": 14,
	  "CSS_CPROP": 13,
	  "CSS_VAR": 12,
	  "DIV": 6,
	  "EMS": 20,
	  "EOF": 1,
	  "EXS": 21,
	  "FREQ": 18,
	  "LENGTH": 15,
	  "LPAREN": 7,
	  "MUL": 5,
	  "NESTED_CALC": 9,
	  "NUMBER": 11,
	  "PERCENTAGE": 28,
	  "PREFIX": 10,
	  "REMS": 23,
	  "RES": 19,
	  "RPAREN": 8,
	  "SUB": 4,
	  "TIME": 17,
	  "VHS": 24,
	  "VMAXS": 27,
	  "VMINS": 26,
	  "VWS": 25,
	  "css_value": 33,
	  "css_variable": 32,
	  "error": 2,
	  "expression": 29,
	  "math_expression": 30,
	  "value": 31
	},
	terminals_: {
	  1: "EOF",
	  2: "error",
	  3: "ADD",
	  4: "SUB",
	  5: "MUL",
	  6: "DIV",
	  7: "LPAREN",
	  8: "RPAREN",
	  9: "NESTED_CALC",
	  10: "PREFIX",
	  11: "NUMBER",
	  12: "CSS_VAR",
	  13: "CSS_CPROP",
	  14: "COMMA",
	  15: "LENGTH",
	  16: "ANGLE",
	  17: "TIME",
	  18: "FREQ",
	  19: "RES",
	  20: "EMS",
	  21: "EXS",
	  22: "CHS",
	  23: "REMS",
	  24: "VHS",
	  25: "VWS",
	  26: "VMINS",
	  27: "VMAXS",
	  28: "PERCENTAGE"
	},
	TERROR: 2,
	    EOF: 1,

	    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
	    // thus helping JIT compilers like Chrome V8.
	    originalQuoteName: null,
	    originalParseError: null,
	    cleanupAfterParse: null,
	    constructParseErrorInfo: null,
	    yyMergeLocationInfo: null,

	    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
	    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
	    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

	    // APIs which will be set up depending on user action code analysis:
	    //yyRecovering: 0,
	    //yyErrOk: 0,
	    //yyClearIn: 0,

	    // Helper APIs
	    // -----------

	    // Helper function which can be overridden by user code later on: put suitable quotes around
	    // literal IDs in a description string.
	    quoteName: function parser_quoteName(id_str) {
	        return '"' + id_str + '"';
	    },

	    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
	    //
	    // Return NULL when the symbol is unknown to the parser.
	    getSymbolName: function parser_getSymbolName(symbol) {
	        if (this.terminals_[symbol]) {
	            return this.terminals_[symbol];
	        }

	        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
	        //
	        // An example of this may be where a rule's action code contains a call like this:
	        //
	        //      parser.getSymbolName(#$)
	        //
	        // to obtain a human-readable name of the current grammar rule.
	        var s = this.symbols_;
	        for (var key in s) {
	            if (s[key] === symbol) {
	                return key;
	            }
	        }
	        return null;
	    },

	    // Return a more-or-less human-readable description of the given symbol, when available,
	    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
	    //
	    // Return NULL when the symbol is unknown to the parser.
	    describeSymbol: function parser_describeSymbol(symbol) {
	        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
	            return this.terminal_descriptions_[symbol];
	        }
	        else if (symbol === this.EOF) {
	            return 'end of input';
	        }
	        var id = this.getSymbolName(symbol);
	        if (id) {
	            return this.quoteName(id);
	        }
	        return null;
	    },

	    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
	    //
	    // The produced list may contain token or token set descriptions instead of the tokens
	    // themselves to help turning this output into something that easier to read by humans
	    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
	    // expected terminals and nonterminals is produced.
	    //
	    // The returned list (array) will not contain any duplicate entries.
	    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
	        var TERROR = this.TERROR;
	        var tokenset = [];
	        var check = {};
	        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
	        // If so, use that one instead of the less palatable token set.
	        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
	            return [
	                this.state_descriptions_[state]
	            ];
	        }
	        for (var p in this.table[state]) {
	            p = +p;
	            if (p !== TERROR) {
	                var d = do_not_describe ? p : this.describeSymbol(p);
	                if (d && !check[d]) {
	                    tokenset.push(d);
	                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
	                }
	            }
	        }
	        return tokenset;
	    },
	productions_: bp({
	  pop: u([
	  29,
	  s,
	  [30, 10],
	  31,
	  31,
	  32,
	  32,
	  s,
	  [33, 15]
	]),
	  rule: u([
	  2,
	  s,
	  [3, 5],
	  4,
	  7,
	  s,
	  [1, 4],
	  2,
	  4,
	  6,
	  s,
	  [1, 14],
	  2
	])
	}),
	performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

	          /* this == yyval */

	          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
	          var yy = this.yy;
	          yy.parser;
	          yy.lexer;

	          

	          switch (yystate) {
	case 0:
	    /*! Production::    $accept : expression $end */

	    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
	    this.$ = yyvstack[yysp - 1];
	    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
	    break;

	case 1:
	    /*! Production::    expression : math_expression EOF */

	    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
	    this.$ = yyvstack[yysp - 1];
	    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
	    
	    
	    return yyvstack[yysp - 1];

	case 2:
	    /*! Production::    math_expression : math_expression ADD math_expression */
	case 3:
	    /*! Production::    math_expression : math_expression SUB math_expression */
	case 4:
	    /*! Production::    math_expression : math_expression MUL math_expression */
	case 5:
	    /*! Production::    math_expression : math_expression DIV math_expression */

	    this.$ = { type: 'MathExpression', operator: yyvstack[yysp - 1], left: yyvstack[yysp - 2], right: yyvstack[yysp] };
	    break;

	case 6:
	    /*! Production::    math_expression : LPAREN math_expression RPAREN */

	    this.$ = yyvstack[yysp - 1];
	    break;

	case 7:
	    /*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */

	    this.$ = { type: 'Calc', value: yyvstack[yysp - 1] };
	    break;

	case 8:
	    /*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */

	    this.$ = { type: 'Calc', value: yyvstack[yysp - 1], prefix: yyvstack[yysp - 5] };
	    break;

	case 9:
	    /*! Production::    math_expression : css_variable */
	case 10:
	    /*! Production::    math_expression : css_value */
	case 11:
	    /*! Production::    math_expression : value */

	    this.$ = yyvstack[yysp];
	    break;

	case 12:
	    /*! Production::    value : NUMBER */

	    this.$ = { type: 'Value', value: parseFloat(yyvstack[yysp]) };
	    break;

	case 13:
	    /*! Production::    value : SUB NUMBER */

	    this.$ = { type: 'Value', value: parseFloat(yyvstack[yysp]) * -1 };
	    break;

	case 14:
	    /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */

	    this.$ = { type: 'CssVariable', value: yyvstack[yysp - 1] };
	    break;

	case 15:
	    /*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */

	    this.$ = { type: 'CssVariable', value: yyvstack[yysp - 3], fallback: yyvstack[yysp - 1] };
	    break;

	case 16:
	    /*! Production::    css_value : LENGTH */

	    this.$ = { type: 'LengthValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
	    break;

	case 17:
	    /*! Production::    css_value : ANGLE */

	    this.$ = { type: 'AngleValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
	    break;

	case 18:
	    /*! Production::    css_value : TIME */

	    this.$ = { type: 'TimeValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
	    break;

	case 19:
	    /*! Production::    css_value : FREQ */

	    this.$ = { type: 'FrequencyValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
	    break;

	case 20:
	    /*! Production::    css_value : RES */

	    this.$ = { type: 'ResolutionValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
	    break;

	case 21:
	    /*! Production::    css_value : EMS */

	    this.$ = { type: 'EmValue', value: parseFloat(yyvstack[yysp]), unit: 'em' };
	    break;

	case 22:
	    /*! Production::    css_value : EXS */

	    this.$ = { type: 'ExValue', value: parseFloat(yyvstack[yysp]), unit: 'ex' };
	    break;

	case 23:
	    /*! Production::    css_value : CHS */

	    this.$ = { type: 'ChValue', value: parseFloat(yyvstack[yysp]), unit: 'ch' };
	    break;

	case 24:
	    /*! Production::    css_value : REMS */

	    this.$ = { type: 'RemValue', value: parseFloat(yyvstack[yysp]), unit: 'rem' };
	    break;

	case 25:
	    /*! Production::    css_value : VHS */

	    this.$ = { type: 'VhValue', value: parseFloat(yyvstack[yysp]), unit: 'vh' };
	    break;

	case 26:
	    /*! Production::    css_value : VWS */

	    this.$ = { type: 'VwValue', value: parseFloat(yyvstack[yysp]), unit: 'vw' };
	    break;

	case 27:
	    /*! Production::    css_value : VMINS */

	    this.$ = { type: 'VminValue', value: parseFloat(yyvstack[yysp]), unit: 'vmin' };
	    break;

	case 28:
	    /*! Production::    css_value : VMAXS */

	    this.$ = { type: 'VmaxValue', value: parseFloat(yyvstack[yysp]), unit: 'vmax' };
	    break;

	case 29:
	    /*! Production::    css_value : PERCENTAGE */

	    this.$ = { type: 'PercentageValue', value: parseFloat(yyvstack[yysp]), unit: '%' };
	    break;

	case 30:
	    /*! Production::    css_value : SUB css_value */

	    var prev = yyvstack[yysp]; prev.value *= -1; this.$ = prev;
	    break;

	}
	},
	table: bt({
	  len: u([
	  24,
	  1,
	  5,
	  23,
	  1,
	  18,
	  s,
	  [0, 3],
	  1,
	  s,
	  [0, 16],
	  s,
	  [23, 4],
	  c,
	  [28, 3],
	  0,
	  0,
	  16,
	  1,
	  6,
	  6,
	  s,
	  [0, 3],
	  5,
	  1,
	  2,
	  c,
	  [37, 3],
	  c,
	  [20, 3],
	  5,
	  0,
	  0
	]),
	  symbol: u([
	  4,
	  7,
	  9,
	  11,
	  12,
	  s,
	  [15, 19, 1],
	  1,
	  1,
	  s,
	  [3, 4, 1],
	  c,
	  [30, 19],
	  c,
	  [29, 4],
	  7,
	  4,
	  10,
	  11,
	  c,
	  [22, 14],
	  c,
	  [19, 3],
	  c,
	  [43, 22],
	  c,
	  [23, 69],
	  c,
	  [139, 4],
	  8,
	  c,
	  [51, 24],
	  4,
	  c,
	  [138, 15],
	  13,
	  c,
	  [186, 5],
	  8,
	  c,
	  [6, 6],
	  c,
	  [5, 5],
	  9,
	  8,
	  14,
	  c,
	  [159, 47],
	  c,
	  [60, 10]
	]),
	  type: u([
	  s,
	  [2, 19],
	  s,
	  [0, 5],
	  1,
	  s,
	  [2, 24],
	  s,
	  [0, 4],
	  c,
	  [22, 19],
	  c,
	  [43, 42],
	  c,
	  [23, 70],
	  c,
	  [28, 25],
	  c,
	  [45, 25],
	  c,
	  [113, 54]
	]),
	  state: u([
	  1,
	  2,
	  8,
	  6,
	  7,
	  30,
	  c,
	  [4, 3],
	  33,
	  37,
	  c,
	  [5, 3],
	  38,
	  c,
	  [4, 3],
	  39,
	  c,
	  [4, 3],
	  40,
	  c,
	  [4, 3],
	  42,
	  c,
	  [21, 4],
	  50,
	  c,
	  [5, 3],
	  51,
	  c,
	  [4, 3]
	]),
	  mode: u([
	  s,
	  [1, 179],
	  s,
	  [2, 3],
	  c,
	  [5, 5],
	  c,
	  [6, 4],
	  s,
	  [1, 57]
	]),
	  goto: u([
	  5,
	  3,
	  4,
	  24,
	  s,
	  [9, 15, 1],
	  s,
	  [25, 5, 1],
	  c,
	  [24, 19],
	  31,
	  35,
	  32,
	  34,
	  c,
	  [18, 14],
	  36,
	  c,
	  [38, 19],
	  c,
	  [19, 57],
	  c,
	  [118, 4],
	  41,
	  c,
	  [24, 19],
	  43,
	  35,
	  c,
	  [16, 14],
	  44,
	  s,
	  [2, 3],
	  28,
	  29,
	  2,
	  s,
	  [3, 3],
	  28,
	  29,
	  3,
	  c,
	  [53, 4],
	  s,
	  [45, 5, 1],
	  c,
	  [100, 42],
	  52,
	  c,
	  [5, 4],
	  53
	])
	}),
	defaultActions: bda({
	  idx: u([
	  6,
	  7,
	  8,
	  s,
	  [10, 16, 1],
	  33,
	  34,
	  39,
	  40,
	  41,
	  45,
	  47,
	  52,
	  53
	]),
	  goto: u([
	  9,
	  10,
	  11,
	  s,
	  [16, 14, 1],
	  12,
	  1,
	  30,
	  13,
	  s,
	  [4, 4, 1],
	  14,
	  15,
	  8
	])
	}),
	parseError: function parseError(str, hash, ExceptionClass) {
	    if (hash.recoverable) {
	        if (typeof this.trace === 'function') {
	            this.trace(str);
	        }
	        hash.destroy();             // destroy... well, *almost*!
	    } else {
	        if (typeof this.trace === 'function') {
	            this.trace(str);
	        }
	        if (!ExceptionClass) {
	            ExceptionClass = this.JisonParserError;
	        }
	        throw new ExceptionClass(str, hash);
	    }
	},
	parse: function parse(input) {
	    var self = this;
	    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
	    var sstack = new Array(128);        // state stack: stores states (column storage)

	    var vstack = new Array(128);        // semantic value stack

	    var table = this.table;
	    var sp = 0;                         // 'stack pointer': index into the stacks


	    


	    var symbol = 0;



	    this.TERROR;
	    var EOF = this.EOF;
	    (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
	    var NO_ACTION = [0, 54 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

	    var lexer;
	    if (this.__lexer__) {
	        lexer = this.__lexer__;
	    } else {
	        lexer = this.__lexer__ = Object.create(this.lexer);
	    }

	    var sharedState_yy = {
	        parseError: undefined,
	        quoteName: undefined,
	        lexer: undefined,
	        parser: undefined,
	        pre_parse: undefined,
	        post_parse: undefined,
	        pre_lex: undefined,
	        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
	    };
	    if (typeof assert !== 'function') ; else {
	        assert;
	    }

	    this.yyGetSharedState = function yyGetSharedState() {
	        return sharedState_yy;
	    };








	    function shallow_copy_noclobber(dst, src) {
	        for (var k in src) {
	            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
	                dst[k] = src[k];
	            }
	        }
	    }

	    // copy state
	    shallow_copy_noclobber(sharedState_yy, this.yy);

	    sharedState_yy.lexer = lexer;
	    sharedState_yy.parser = this;






	    // Does the shared state override the default `parseError` that already comes with this instance?
	    if (typeof sharedState_yy.parseError === 'function') {
	        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
	            if (!ExceptionClass) {
	                ExceptionClass = this.JisonParserError;
	            }
	            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
	        };
	    } else {
	        this.parseError = this.originalParseError;
	    }

	    // Does the shared state override the default `quoteName` that already comes with this instance?
	    if (typeof sharedState_yy.quoteName === 'function') {
	        this.quoteName = function quoteNameAlt(id_str) {
	            return sharedState_yy.quoteName.call(this, id_str);
	        };
	    } else {
	        this.quoteName = this.originalQuoteName;
	    }

	    // set up the cleanup function; make it an API so that external code can re-use this one in case of
	    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
	    // case this parse() API method doesn't come with a `finally { ... }` block any more!
	    //
	    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
	    //       or else your `sharedState`, etc. references will be *wrong*!
	    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
	        var rv;

	        if (invoke_post_methods) {
	            var hash;

	            if (sharedState_yy.post_parse || this.post_parse) {
	                // create an error hash info instance: we re-use this API in a **non-error situation**
	                // as this one delivers all parser internals ready for access by userland code.
	                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
	            }

	            if (sharedState_yy.post_parse) {
	                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
	                if (typeof rv !== 'undefined') resultValue = rv;
	            }
	            if (this.post_parse) {
	                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
	                if (typeof rv !== 'undefined') resultValue = rv;
	            }

	            // cleanup:
	            if (hash && hash.destroy) {
	                hash.destroy();
	            }
	        }

	        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

	        // clean up the lingering lexer structures as well:
	        if (lexer.cleanupAfterLex) {
	            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
	        }

	        // prevent lingering circular references from causing memory leaks:
	        if (sharedState_yy) {
	            sharedState_yy.lexer = undefined;
	            sharedState_yy.parser = undefined;
	            if (lexer.yy === sharedState_yy) {
	                lexer.yy = undefined;
	            }
	        }
	        sharedState_yy = undefined;
	        this.parseError = this.originalParseError;
	        this.quoteName = this.originalQuoteName;

	        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
	        // To be safe, we nuke the other internal stack columns as well...
	        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
	        sstack.length = 0;

	        vstack.length = 0;
	        sp = 0;

	        // nuke the error hash info instances created during this run.
	        // Userland code must COPY any data/references
	        // in the error hash instance(s) it is more permanently interested in.
	        if (!do_not_nuke_errorinfos) {
	            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
	                var el = this.__error_infos[i];
	                if (el && typeof el.destroy === 'function') {
	                    el.destroy();
	                }
	            }
	            this.__error_infos.length = 0;


	        }

	        return resultValue;
	    };






































































































































	    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
	    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
	    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
	        var pei = {
	            errStr: msg,
	            exception: ex,
	            text: lexer.match,
	            value: lexer.yytext,
	            token: this.describeSymbol(symbol) || symbol,
	            token_id: symbol,
	            line: lexer.yylineno,

	            expected: expected,
	            recoverable: recoverable,
	            state: state,
	            action: action,
	            new_state: newState,
	            symbol_stack: stack,
	            state_stack: sstack,
	            value_stack: vstack,

	            stack_pointer: sp,
	            yy: sharedState_yy,
	            lexer: lexer,
	            parser: this,

	            // and make sure the error info doesn't stay due to potential
	            // ref cycle via userland code manipulations.
	            // These would otherwise all be memory leak opportunities!
	            //
	            // Note that only array and object references are nuked as those
	            // constitute the set of elements which can produce a cyclic ref.
	            // The rest of the members is kept intact as they are harmless.
	            destroy: function destructParseErrorInfo() {
	                // remove cyclic references added to error info:
	                // info.yy = null;
	                // info.lexer = null;
	                // info.value = null;
	                // info.value_stack = null;
	                // ...
	                var rec = !!this.recoverable;
	                for (var key in this) {
	                    if (this.hasOwnProperty(key) && typeof key === 'object') {
	                        this[key] = undefined;
	                    }
	                }
	                this.recoverable = rec;
	            }
	        };
	        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
	        this.__error_infos.push(pei);
	        return pei;
	    };


	    function stdLex() {
	        var token = lexer.lex();
	        // if token isn't its numeric value, convert
	        if (typeof token !== 'number') {
	            token = self.symbols_[token] || token;
	        }

	        return token || EOF;
	    }

	    function fastLex() {
	        var token = lexer.fastLex();
	        // if token isn't its numeric value, convert
	        if (typeof token !== 'number') {
	            token = self.symbols_[token] || token;
	        }

	        return token || EOF;
	    }

	    var lex = stdLex;


	    var state, action, r, t;
	    var yyval = {
	        $: true,
	        _$: undefined,
	        yy: sharedState_yy
	    };
	    var p;
	    var yyrulelen;
	    var this_production;
	    var newState;
	    var retval = false;


	    try {
	        this.__reentrant_call_depth++;

	        lexer.setInput(input, sharedState_yy);

	        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
	        // this initial `setInput()` call: hence we can now check and decide
	        // whether we'll go with the standard, slower, lex() API or the
	        // `fast_lex()` one:
	        if (typeof lexer.canIUse === 'function') {
	            var lexerInfo = lexer.canIUse();
	            if (lexerInfo.fastLex && typeof fastLex === 'function') {
	                lex = fastLex;
	            }
	        } 



	        vstack[sp] = null;
	        sstack[sp] = 0;
	        stack[sp] = 0;
	        ++sp;





	        if (this.pre_parse) {
	            this.pre_parse.call(this, sharedState_yy);
	        }
	        if (sharedState_yy.pre_parse) {
	            sharedState_yy.pre_parse.call(this, sharedState_yy);
	        }

	        newState = sstack[sp - 1];
	        for (;;) {
	            // retrieve state number from top of stack
	            state = newState;               // sstack[sp - 1];

	            // use default actions if available
	            if (this.defaultActions[state]) {
	                action = 2;
	                newState = this.defaultActions[state];
	            } else {
	                // The single `==` condition below covers both these `===` comparisons in a single
	                // operation:
	                //
	                //     if (symbol === null || typeof symbol === 'undefined') ...
	                if (!symbol) {
	                    symbol = lex();
	                }
	                // read action for current state and first input
	                t = (table[state] && table[state][symbol]) || NO_ACTION;
	                newState = t[1];
	                action = t[0];











	                // handle parse error
	                if (!action) {
	                    var errStr;
	                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
	                    var expected = this.collect_expected_token_set(state);

	                    // Report error
	                    if (typeof lexer.yylineno === 'number') {
	                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
	                    } else {
	                        errStr = 'Parse error: ';
	                    }
	                    if (typeof lexer.showPosition === 'function') {
	                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
	                    }
	                    if (expected.length) {
	                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
	                    } else {
	                        errStr += 'Unexpected ' + errSymbolDescr;
	                    }
	                    // we cannot recover from the error!
	                    p = this.constructParseErrorInfo(errStr, null, expected, false);
	                    r = this.parseError(p.errStr, p, this.JisonParserError);
	                    if (typeof r !== 'undefined') {
	                        retval = r;
	                    }
	                    break;
	                }


	            }










	            switch (action) {
	            // catch misc. parse failures:
	            default:
	                // this shouldn't happen, unless resolve defaults are off
	                if (action instanceof Array) {
	                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
	                    r = this.parseError(p.errStr, p, this.JisonParserError);
	                    if (typeof r !== 'undefined') {
	                        retval = r;
	                    }
	                    break;
	                }
	                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
	                // or a buggy LUT (LookUp Table):
	                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
	                r = this.parseError(p.errStr, p, this.JisonParserError);
	                if (typeof r !== 'undefined') {
	                    retval = r;
	                }
	                break;

	            // shift:
	            case 1:
	                stack[sp] = symbol;
	                vstack[sp] = lexer.yytext;

	                sstack[sp] = newState; // push state

	                ++sp;
	                symbol = 0;




	                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




	                continue;

	            // reduce:
	            case 2:



	                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
	                yyrulelen = this_production[1];










	                r = this.performAction.call(yyval, newState, sp - 1, vstack);

	                if (typeof r !== 'undefined') {
	                    retval = r;
	                    break;
	                }

	                // pop off stack
	                sp -= yyrulelen;

	                // don't overwrite the `symbol` variable: use a local var to speed things up:
	                var ntsymbol = this_production[0];    // push nonterminal (reduce)
	                stack[sp] = ntsymbol;
	                vstack[sp] = yyval.$;

	                // goto new state = table[STATE][NONTERMINAL]
	                newState = table[sstack[sp - 1]][ntsymbol];
	                sstack[sp] = newState;
	                ++sp;









	                continue;

	            // accept:
	            case 3:
	                if (sp !== -2) {
	                    retval = true;
	                    // Return the `$accept` rule's `$$` result, if available.
	                    //
	                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
	                    // default, action):
	                    //
	                    //     $accept: <startSymbol> $end
	                    //                  %{ $$ = $1; @$ = @1; %}
	                    //
	                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
	                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
	                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
	                    //
	                    // In code:
	                    //
	                    //                  %{
	                    //                      @$ = @1;            // if location tracking support is included
	                    //                      if (typeof $1 !== 'undefined')
	                    //                          return $1;
	                    //                      else
	                    //                          return true;           // the default parse result if the rule actions don't produce anything
	                    //                  %}
	                    sp--;
	                    if (typeof vstack[sp] !== 'undefined') {
	                        retval = vstack[sp];
	                    }
	                }
	                break;
	            }

	            // break out of loop: we accept or fail with error
	            break;
	        }
	    } catch (ex) {
	        // report exceptions through the parseError callback too, but keep the exception intact
	        // if it is a known parser or lexer error which has been thrown by parseError() already:
	        if (ex instanceof this.JisonParserError) {
	            throw ex;
	        }
	        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
	            throw ex;
	        }

	        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
	        retval = false;
	        r = this.parseError(p.errStr, p, this.JisonParserError);
	        if (typeof r !== 'undefined') {
	            retval = r;
	        }
	    } finally {
	        retval = this.cleanupAfterParse(retval, true, true);
	        this.__reentrant_call_depth--;
	    }   // /finally

	    return retval;
	}
	};
	parser.originalParseError = parser.parseError;
	parser.originalQuoteName = parser.quoteName;
	/* lexer generated by jison-lex 0.6.1-215 */

	/*
	 * Returns a Lexer object of the following structure:
	 *
	 *  Lexer: {
	 *    yy: {}     The so-called "shared state" or rather the *source* of it;
	 *               the real "shared state" `yy` passed around to
	 *               the rule actions, etc. is a direct reference!
	 *
	 *               This "shared context" object was passed to the lexer by way of 
	 *               the `lexer.setInput(str, yy)` API before you may use it.
	 *
	 *               This "shared context" object is passed to the lexer action code in `performAction()`
	 *               so userland code in the lexer actions may communicate with the outside world 
	 *               and/or other lexer rules' actions in more or less complex ways.
	 *
	 *  }
	 *
	 *  Lexer.prototype: {
	 *    EOF: 1,
	 *    ERROR: 2,
	 *
	 *    yy:        The overall "shared context" object reference.
	 *
	 *    JisonLexerError: function(msg, hash),
	 *
	 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
	 *
	 *               The function parameters and `this` have the following value/meaning:
	 *               - `this`    : reference to the `lexer` instance. 
	 *                               `yy_` is an alias for `this` lexer instance reference used internally.
	 *
	 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
	 *                             by way of the `lexer.setInput(str, yy)` API before.
	 *
	 *                             Note:
	 *                             The extra arguments you specified in the `%parse-param` statement in your
	 *                             **parser** grammar definition file are passed to the lexer via this object
	 *                             reference as member variables.
	 *
	 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
	 *
	 *               - `YY_START`: the current lexer "start condition" state.
	 *
	 *    parseError: function(str, hash, ExceptionClass),
	 *
	 *    constructLexErrorInfo: function(error_message, is_recoverable),
	 *               Helper function.
	 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
	 *               See it's use in this lexer kernel in many places; example usage:
	 *
	 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
	 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
	 *
	 *    options: { ... lexer %options ... },
	 *
	 *    lex: function(),
	 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
	 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
	 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
	 *
	 *               WARNING:
	 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
	 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
	 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
	 *               from silently accepting this confusing and potentially hazardous situation! 
	 *
	 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
	 *               Helper function.
	 *
	 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
	 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
	 *
	 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
	 *
	 *    setInput: function(input, [yy]),
	 *
	 *
	 *    input: function(),
	 *
	 *
	 *    unput: function(str),
	 *
	 *
	 *    more: function(),
	 *
	 *
	 *    reject: function(),
	 *
	 *
	 *    less: function(n),
	 *
	 *
	 *    pastInput: function(n),
	 *
	 *
	 *    upcomingInput: function(n),
	 *
	 *
	 *    showPosition: function(),
	 *
	 *
	 *    test_match: function(regex_match_array, rule_index),
	 *
	 *
	 *    next: function(),
	 *
	 *
	 *    begin: function(condition),
	 *
	 *
	 *    pushState: function(condition),
	 *
	 *
	 *    popState: function(),
	 *
	 *
	 *    topState: function(),
	 *
	 *
	 *    _currentRules: function(),
	 *
	 *
	 *    stateStackSize: function(),
	 *
	 *
	 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
	 *
	 *
	 *    rules: [...],
	 *
	 *
	 *    conditions: {associative list: name ==> set},
	 *  }
	 *
	 *
	 *  token location info (`yylloc`): {
	 *    first_line: n,
	 *    last_line: n,
	 *    first_column: n,
	 *    last_column: n,
	 *    range: [start_number, end_number]
	 *               (where the numbers are indexes into the input string, zero-based)
	 *  }
	 *
	 * ---
	 *
	 * The `parseError` function receives a 'hash' object with these members for lexer errors:
	 *
	 *  {
	 *    text:        (matched text)
	 *    token:       (the produced terminal token, if any)
	 *    token_id:    (the produced terminal token numeric ID, if any)
	 *    line:        (yylineno)
	 *    loc:         (yylloc)
	 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
	 *                  available for this particular error)
	 *    yy:          (object: the current parser internal "shared state" `yy`
	 *                  as is also available in the rule actions; this can be used,
	 *                  for instance, for advanced error analysis and reporting)
	 *    lexer:       (reference to the current lexer instance used by the parser)
	 *  }
	 *
	 * while `this` will reference the current lexer instance.
	 *
	 * When `parseError` is invoked by the lexer, the default implementation will
	 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
	 * it will try to invoke `yy.parseError()` instead. When that callback is also not
	 * provided, a `JisonLexerError` exception will be thrown containing the error
	 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
	 *
	 * Note that the lexer's `JisonLexerError` error class is passed via the
	 * `ExceptionClass` argument, which is invoked to construct the exception
	 * instance to be thrown, so technically `parseError` will throw the object
	 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
	 *
	 * ---
	 *
	 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
	 * These options are available:
	 *
	 * (Options are permanent.)
	 *  
	 *  yy: {
	 *      parseError: function(str, hash, ExceptionClass)
	 *                 optional: overrides the default `parseError` function.
	 *  }
	 *
	 *  lexer.options: {
	 *      pre_lex:  function()
	 *                 optional: is invoked before the lexer is invoked to produce another token.
	 *                 `this` refers to the Lexer object.
	 *      post_lex: function(token) { return token; }
	 *                 optional: is invoked when the lexer has produced a token `token`;
	 *                 this function can override the returned token value by returning another.
	 *                 When it does not return any (truthy) value, the lexer will return
	 *                 the original `token`.
	 *                 `this` refers to the Lexer object.
	 *
	 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
	 * the lexer as per when it was compiled!
	 *
	 *      ranges: boolean
	 *                 optional: `true` ==> token location info will include a .range[] member.
	 *      flex: boolean
	 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
	 *                 exhaustively to find the longest match.
	 *      backtrack_lexer: boolean
	 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
	 *                 the lexer terminates the scan when a token is returned by the action code.
	 *      xregexp: boolean
	 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
	 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
	 *                 rule regexes have been written as standard JavaScript RegExp expressions.
	 *  }
	 */


	var lexer = function() {
	  /**
	   * See also:
	   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
	   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
	   * with userland code which might access the derived class in a 'classic' way.
	   *
	   * @public
	   * @constructor
	   * @nocollapse
	   */
	  function JisonLexerError(msg, hash) {
	    Object.defineProperty(this, 'name', {
	      enumerable: false,
	      writable: false,
	      value: 'JisonLexerError'
	    });

	    if (msg == null)
	      msg = '???';

	    Object.defineProperty(this, 'message', {
	      enumerable: false,
	      writable: true,
	      value: msg
	    });

	    this.hash = hash;
	    var stacktrace;

	    if (hash && hash.exception instanceof Error) {
	      var ex2 = hash.exception;
	      this.message = ex2.message || msg;
	      stacktrace = ex2.stack;
	    }

	    if (!stacktrace) {
	      if (Error.hasOwnProperty('captureStackTrace')) {
	        // V8
	        Error.captureStackTrace(this, this.constructor);
	      } else {
	        stacktrace = new Error(msg).stack;
	      }
	    }

	    if (stacktrace) {
	      Object.defineProperty(this, 'stack', {
	        enumerable: false,
	        writable: false,
	        value: stacktrace
	      });
	    }
	  }

	  if (typeof Object.setPrototypeOf === 'function') {
	    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
	  } else {
	    JisonLexerError.prototype = Object.create(Error.prototype);
	  }

	  JisonLexerError.prototype.constructor = JisonLexerError;
	  JisonLexerError.prototype.name = 'JisonLexerError';

	  var lexer = {
	    
	// Code Generator Information Report
	// ---------------------------------
	//
	// Options:
	//
	//   backtracking: .................... false
	//   location.ranges: ................. false
	//   location line+column tracking: ... true
	//
	//
	// Forwarded Parser Analysis flags:
	//
	//   uses yyleng: ..................... false
	//   uses yylineno: ................... false
	//   uses yytext: ..................... false
	//   uses yylloc: ..................... false
	//   uses lexer values: ............... true / true
	//   location tracking: ............... false
	//   location assignment: ............. false
	//
	//
	// Lexer Analysis flags:
	//
	//   uses yyleng: ..................... ???
	//   uses yylineno: ................... ???
	//   uses yytext: ..................... ???
	//   uses yylloc: ..................... ???
	//   uses ParseError API: ............. ???
	//   uses yyerror: .................... ???
	//   uses location tracking & editing:  ???
	//   uses more() API: ................. ???
	//   uses unput() API: ................ ???
	//   uses reject() API: ............... ???
	//   uses less() API: ................. ???
	//   uses display APIs pastInput(), upcomingInput(), showPosition():
	//        ............................. ???
	//   uses describeYYLLOC() API: ....... ???
	//
	// --------- END OF REPORT -----------

	EOF: 1,
	    ERROR: 2,

	    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

	    // options: {},                             /// <-- injected by the code generator

	    // yy: ...,                                 /// <-- injected by setInput()

	    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

	    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
	    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
	    done: false,                                /// INTERNAL USE ONLY  
	    _backtrack: false,                          /// INTERNAL USE ONLY  
	    _input: '',                                 /// INTERNAL USE ONLY  
	    _more: false,                               /// INTERNAL USE ONLY  
	    _signaled_error_token: false,               /// INTERNAL USE ONLY  
	    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
	    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
	    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
	    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
	    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
	    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
	    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
	    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
	    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

	    /**
	     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
	      msg = '' + msg;

	      // heuristic to determine if the error message already contains a (partial) source code dump
	      // as produced by either `showPosition()` or `prettyPrintRange()`:
	      if (show_input_position == undefined) {
	        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
	      }

	      if (this.yylloc && show_input_position) {
	        if (typeof this.prettyPrintRange === 'function') {
	          this.prettyPrintRange(this.yylloc);

	          if (!/\n\s*$/.test(msg)) {
	            msg += '\n';
	          }

	          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
	        } else if (typeof this.showPosition === 'function') {
	          var pos_str = this.showPosition();

	          if (pos_str) {
	            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
	              msg += '\n' + pos_str;
	            } else {
	              msg += pos_str;
	            }
	          }
	        }
	      }

	      /** @constructor */
	      var pei = {
	        errStr: msg,
	        recoverable: !!recoverable,
	        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
	        token: null,
	        line: this.yylineno,
	        loc: this.yylloc,
	        yy: this.yy,
	        lexer: this,

	        /**
	         * and make sure the error info doesn't stay due to potential
	         * ref cycle via userland code manipulations.
	         * These would otherwise all be memory leak opportunities!
	         * 
	         * Note that only array and object references are nuked as those
	         * constitute the set of elements which can produce a cyclic ref.
	         * The rest of the members is kept intact as they are harmless.
	         * 
	         * @public
	         * @this {LexErrorInfo}
	         */
	        destroy: function destructLexErrorInfo() {
	          // remove cyclic references added to error info:
	          // info.yy = null;
	          // info.lexer = null;
	          // ...
	          var rec = !!this.recoverable;

	          for (var key in this) {
	            if (this.hasOwnProperty(key) && typeof key === 'object') {
	              this[key] = undefined;
	            }
	          }

	          this.recoverable = rec;
	        }
	      };

	      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
	      this.__error_infos.push(pei);

	      return pei;
	    },

	    /**
	     * handler which is invoked when a lexer error occurs.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    parseError: function lexer_parseError(str, hash, ExceptionClass) {
	      if (!ExceptionClass) {
	        ExceptionClass = this.JisonLexerError;
	      }

	      if (this.yy) {
	        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
	          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
	        } else if (typeof this.yy.parseError === 'function') {
	          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
	        }
	      }

	      throw new ExceptionClass(str, hash);
	    },

	    /**
	     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    yyerror: function yyError(str /*, ...args */) {
	      var lineno_msg = '';

	      if (this.yylloc) {
	        lineno_msg = ' on line ' + (this.yylineno + 1);
	      }

	      var p = this.constructLexErrorInfo(
	        'Lexical error' + lineno_msg + ': ' + str,
	        this.options.lexerErrorsAreRecoverable
	      );

	      // Add any extra args to the hash under the name `extra_error_attributes`:
	      var args = Array.prototype.slice.call(arguments, 1);

	      if (args.length) {
	        p.extra_error_attributes = args;
	      }

	      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
	    },

	    /**
	     * final cleanup function for when we have completed lexing the input;
	     * make it an API so that external code can use this one once userland
	     * code has decided it's time to destroy any lingering lexer error
	     * hash object instances and the like: this function helps to clean
	     * up these constructs, which *may* carry cyclic references which would
	     * otherwise prevent the instances from being properly and timely
	     * garbage-collected, i.e. this function helps prevent memory leaks!
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
	      // prevent lingering circular references from causing memory leaks:
	      this.setInput('', {});

	      // nuke the error hash info instances created during this run.
	      // Userland code must COPY any data/references
	      // in the error hash instance(s) it is more permanently interested in.
	      if (!do_not_nuke_errorinfos) {
	        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
	          var el = this.__error_infos[i];

	          if (el && typeof el.destroy === 'function') {
	            el.destroy();
	          }
	        }

	        this.__error_infos.length = 0;
	      }

	      return this;
	    },

	    /**
	     * clear the lexer token context; intended for internal use only
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    clear: function lexer_clear() {
	      this.yytext = '';
	      this.yyleng = 0;
	      this.match = '';

	      // - DO NOT reset `this.matched`
	      this.matches = false;

	      this._more = false;
	      this._backtrack = false;
	      var col = (this.yylloc ? this.yylloc.last_column : 0);

	      this.yylloc = {
	        first_line: this.yylineno + 1,
	        first_column: col,
	        last_line: this.yylineno + 1,
	        last_column: col,
	        range: [this.offset, this.offset]
	      };
	    },

	    /**
	     * resets the lexer, sets new input
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    setInput: function lexer_setInput(input, yy) {
	      this.yy = yy || this.yy || {};

	      // also check if we've fully initialized the lexer instance,
	      // including expansion work to be done to go from a loaded
	      // lexer to a usable lexer:
	      if (!this.__decompressed) {
	        // step 1: decompress the regex list:
	        var rules = this.rules;

	        for (var i = 0, len = rules.length; i < len; i++) {
	          var rule_re = rules[i];

	          // compression: is the RE an xref to another RE slot in the rules[] table?
	          if (typeof rule_re === 'number') {
	            rules[i] = rules[rule_re];
	          }
	        }

	        // step 2: unfold the conditions[] set to make these ready for use:
	        var conditions = this.conditions;

	        for (var k in conditions) {
	          var spec = conditions[k];
	          var rule_ids = spec.rules;
	          var len = rule_ids.length;
	          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
	          var rule_new_ids = new Array(len + 1);

	          for (var i = 0; i < len; i++) {
	            var idx = rule_ids[i];
	            var rule_re = rules[idx];
	            rule_regexes[i + 1] = rule_re;
	            rule_new_ids[i + 1] = idx;
	          }

	          spec.rules = rule_new_ids;
	          spec.__rule_regexes = rule_regexes;
	          spec.__rule_count = len;
	        }

	        this.__decompressed = true;
	      }

	      this._input = input || '';
	      this.clear();
	      this._signaled_error_token = false;
	      this.done = false;
	      this.yylineno = 0;
	      this.matched = '';
	      this.conditionStack = ['INITIAL'];
	      this.__currentRuleSet__ = null;

	      this.yylloc = {
	        first_line: 1,
	        first_column: 0,
	        last_line: 1,
	        last_column: 0,
	        range: [0, 0]
	      };

	      this.offset = 0;
	      return this;
	    },

	    /**
	     * edit the remaining input via user-specified callback.
	     * This can be used to forward-adjust the input-to-parse, 
	     * e.g. inserting macro expansions and alike in the
	     * input which has yet to be lexed.
	     * The behaviour of this API contrasts the `unput()` et al
	     * APIs as those act on the *consumed* input, while this
	     * one allows one to manipulate the future, without impacting
	     * the current `yyloc` cursor location or any history. 
	     * 
	     * Use this API to help implement C-preprocessor-like
	     * `#include` statements, etc.
	     * 
	     * The provided callback must be synchronous and is
	     * expected to return the edited input (string).
	     *
	     * The `cpsArg` argument value is passed to the callback
	     * as-is.
	     *
	     * `callback` interface: 
	     * `function callback(input, cpsArg)`
	     * 
	     * - `input` will carry the remaining-input-to-lex string
	     *   from the lexer.
	     * - `cpsArg` is `cpsArg` passed into this API.
	     * 
	     * The `this` reference for the callback will be set to
	     * reference this lexer instance so that userland code
	     * in the callback can easily and quickly access any lexer
	     * API. 
	     *
	     * When the callback returns a non-string-type falsey value,
	     * we assume the callback did not edit the input and we
	     * will using the input as-is.
	     *
	     * When the callback returns a non-string-type value, it
	     * is converted to a string for lexing via the `"" + retval`
	     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
	     * -- that way any returned object's `toValue()` and `toString()`
	     * methods will be invoked in a proper/desirable order.)
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
	      var rv = callback.call(this, this._input, cpsArg);

	      if (typeof rv !== 'string') {
	        if (rv) {
	          this._input = '' + rv;
	        } 
	        // else: keep `this._input` as is.  
	      } else {
	        this._input = rv;
	      }

	      return this;
	    },

	    /**
	     * consumes and returns one char from the input
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    input: function lexer_input() {
	      if (!this._input) {
	        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
	        return null;
	      }

	      var ch = this._input[0];
	      this.yytext += ch;
	      this.yyleng++;
	      this.offset++;
	      this.match += ch;
	      this.matched += ch;

	      // Count the linenumber up when we hit the LF (or a stand-alone CR).
	      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
	      // and we advance immediately past the LF as well, returning both together as if
	      // it was all a single 'character' only.
	      var slice_len = 1;

	      var lines = false;

	      if (ch === '\n') {
	        lines = true;
	      } else if (ch === '\r') {
	        lines = true;
	        var ch2 = this._input[1];

	        if (ch2 === '\n') {
	          slice_len++;
	          ch += ch2;
	          this.yytext += ch2;
	          this.yyleng++;
	          this.offset++;
	          this.match += ch2;
	          this.matched += ch2;
	          this.yylloc.range[1]++;
	        }
	      }

	      if (lines) {
	        this.yylineno++;
	        this.yylloc.last_line++;
	        this.yylloc.last_column = 0;
	      } else {
	        this.yylloc.last_column++;
	      }

	      this.yylloc.range[1]++;
	      this._input = this._input.slice(slice_len);
	      return ch;
	    },

	    /**
	     * unshifts one char (or an entire string) into the input
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    unput: function lexer_unput(ch) {
	      var len = ch.length;
	      var lines = ch.split(/(?:\r\n?|\n)/g);
	      this._input = ch + this._input;
	      this.yytext = this.yytext.substr(0, this.yytext.length - len);
	      this.yyleng = this.yytext.length;
	      this.offset -= len;
	      this.match = this.match.substr(0, this.match.length - len);
	      this.matched = this.matched.substr(0, this.matched.length - len);

	      if (lines.length > 1) {
	        this.yylineno -= lines.length - 1;
	        this.yylloc.last_line = this.yylineno + 1;

	        // Get last entirely matched line into the `pre_lines[]` array's
	        // last index slot; we don't mind when other previously 
	        // matched lines end up in the array too. 
	        var pre = this.match;

	        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

	        if (pre_lines.length === 1) {
	          pre = this.matched;
	          pre_lines = pre.split(/(?:\r\n?|\n)/g);
	        }

	        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
	      } else {
	        this.yylloc.last_column -= len;
	      }

	      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
	      this.done = false;
	      return this;
	    },

	    /**
	     * cache matched text and append it on next action
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    more: function lexer_more() {
	      this._more = true;
	      return this;
	    },

	    /**
	     * signal the lexer that this rule fails to match the input, so the
	     * next matching rule (regex) should be tested instead.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    reject: function lexer_reject() {
	      if (this.options.backtrack_lexer) {
	        this._backtrack = true;
	      } else {
	        // when the `parseError()` call returns, we MUST ensure that the error is registered.
	        // We accomplish this by signaling an 'error' token to be produced for the current
	        // `.lex()` run.
	        var lineno_msg = '';

	        if (this.yylloc) {
	          lineno_msg = ' on line ' + (this.yylineno + 1);
	        }

	        var p = this.constructLexErrorInfo(
	          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
	          false
	        );

	        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
	      }

	      return this;
	    },

	    /**
	     * retain first n characters of the match
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    less: function lexer_less(n) {
	      return this.unput(this.match.slice(n));
	    },

	    /**
	     * return (part of the) already matched input, i.e. for error
	     * messages.
	     * 
	     * Limit the returned string length to `maxSize` (default: 20).
	     * 
	     * Limit the returned string to the `maxLines` number of lines of
	     * input (default: 1).
	     * 
	     * Negative limit values equal *unlimited*.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    pastInput: function lexer_pastInput(maxSize, maxLines) {
	      var past = this.matched.substring(0, this.matched.length - this.match.length);

	      if (maxSize < 0)
	        maxSize = past.length;
	      else if (!maxSize)
	        maxSize = 20;

	      if (maxLines < 0)
	        maxLines = past.length;          // can't ever have more input lines than this! 
	      else if (!maxLines)
	        maxLines = 1;

	      // `substr` anticipation: treat \r\n as a single character and take a little
	      // more than necessary so that we can still properly check against maxSize
	      // after we've transformed and limited the newLines in here:
	      past = past.substr(-maxSize * 2 - 2);

	      // now that we have a significantly reduced string to process, transform the newlines
	      // and chop them, then limit them:
	      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

	      a = a.slice(-maxLines);
	      past = a.join('\n');

	      // When, after limiting to maxLines, we still have too much to return,
	      // do add an ellipsis prefix...
	      if (past.length > maxSize) {
	        past = '...' + past.substr(-maxSize);
	      }

	      return past;
	    },

	    /**
	     * return (part of the) upcoming input, i.e. for error messages.
	     * 
	     * Limit the returned string length to `maxSize` (default: 20).
	     * 
	     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
	     * 
	     * Negative limit values equal *unlimited*.
	     *
	     * > ### NOTE ###
	     * >
	     * > *"upcoming input"* is defined as the whole of the both
	     * > the *currently lexed* input, together with any remaining input
	     * > following that. *"currently lexed"* input is the input 
	     * > already recognized by the lexer but not yet returned with
	     * > the lexer token. This happens when you are invoking this API
	     * > from inside any lexer rule action code block. 
	     * >
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
	      var next = this.match;

	      if (maxSize < 0)
	        maxSize = next.length + this._input.length;
	      else if (!maxSize)
	        maxSize = 20;

	      if (maxLines < 0)
	        maxLines = maxSize;          // can't ever have more input lines than this! 
	      else if (!maxLines)
	        maxLines = 1;

	      // `substring` anticipation: treat \r\n as a single character and take a little
	      // more than necessary so that we can still properly check against maxSize
	      // after we've transformed and limited the newLines in here:
	      if (next.length < maxSize * 2 + 2) {
	        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
	      }

	      // now that we have a significantly reduced string to process, transform the newlines
	      // and chop them, then limit them:
	      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

	      a = a.slice(0, maxLines);
	      next = a.join('\n');

	      // When, after limiting to maxLines, we still have too much to return,
	      // do add an ellipsis postfix...
	      if (next.length > maxSize) {
	        next = next.substring(0, maxSize) + '...';
	      }

	      return next;
	    },

	    /**
	     * return a string which displays the character position where the
	     * lexing error occurred, i.e. for error messages
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
	      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
	      var c = new Array(pre.length + 1).join('-');
	      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
	    },

	    /**
	     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
	     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
	     * it MAY be NULL) and you MUST have a valid location info object anyway:
	     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
	     * and reconstruct the `actual` location info from those.
	     * If this fails, the heuristic is to take the `current` location, IFF available.
	     * If this fails as well, we assume the sought location is at/around the current lexer position
	     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
	     * values MAY be inaccurate!
	     *
	     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
	     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
	      var loc = {
	        first_line: 1,
	        first_column: 0,
	        last_line: 1,
	        last_column: 0,
	        range: [0, 0]
	      };

	      if (actual) {
	        loc.first_line = actual.first_line | 0;
	        loc.last_line = actual.last_line | 0;
	        loc.first_column = actual.first_column | 0;
	        loc.last_column = actual.last_column | 0;

	        if (actual.range) {
	          loc.range[0] = actual.range[0] | 0;
	          loc.range[1] = actual.range[1] | 0;
	        }
	      }

	      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
	        // plan B: heuristic using preceding and following:
	        if (loc.first_line <= 0 && preceding) {
	          loc.first_line = preceding.last_line | 0;
	          loc.first_column = preceding.last_column | 0;

	          if (preceding.range) {
	            loc.range[0] = actual.range[1] | 0;
	          }
	        }

	        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
	          loc.last_line = following.first_line | 0;
	          loc.last_column = following.first_column | 0;

	          if (following.range) {
	            loc.range[1] = actual.range[0] | 0;
	          }
	        }

	        // plan C?: see if the 'current' location is useful/sane too:
	        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
	          loc.first_line = current.first_line | 0;
	          loc.first_column = current.first_column | 0;

	          if (current.range) {
	            loc.range[0] = current.range[0] | 0;
	          }
	        }

	        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
	          loc.last_line = current.last_line | 0;
	          loc.last_column = current.last_column | 0;

	          if (current.range) {
	            loc.range[1] = current.range[1] | 0;
	          }
	        }
	      }

	      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
	      // or plan D heuristics to produce a 'sensible' last_line value:
	      if (loc.last_line <= 0) {
	        if (loc.first_line <= 0) {
	          loc.first_line = this.yylloc.first_line;
	          loc.last_line = this.yylloc.last_line;
	          loc.first_column = this.yylloc.first_column;
	          loc.last_column = this.yylloc.last_column;
	          loc.range[0] = this.yylloc.range[0];
	          loc.range[1] = this.yylloc.range[1];
	        } else {
	          loc.last_line = this.yylloc.last_line;
	          loc.last_column = this.yylloc.last_column;
	          loc.range[1] = this.yylloc.range[1];
	        }
	      }

	      if (loc.first_line <= 0) {
	        loc.first_line = loc.last_line;
	        loc.first_column = 0;  // loc.last_column; 
	        loc.range[1] = loc.range[0];
	      }

	      if (loc.first_column < 0) {
	        loc.first_column = 0;
	      }

	      if (loc.last_column < 0) {
	        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
	      }

	      return loc;
	    },

	    /**
	     * return a string which displays the lines & columns of input which are referenced 
	     * by the given location info range, plus a few lines of context.
	     * 
	     * This function pretty-prints the indicated section of the input, with line numbers 
	     * and everything!
	     * 
	     * This function is very useful to provide highly readable error reports, while
	     * the location range may be specified in various flexible ways:
	     * 
	     * - `loc` is the location info object which references the area which should be
	     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
	     *   characters below each character in the entire input range.
	     * 
	     * - `context_loc` is the *optional* location info object which instructs this
	     *   pretty-printer how much *leading* context should be displayed alongside
	     *   the area referenced by `loc`. This can help provide context for the displayed
	     *   error, etc.
	     * 
	     *   When this location info is not provided, a default context of 3 lines is
	     *   used.
	     * 
	     * - `context_loc2` is another *optional* location info object, which serves
	     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
	     *   context lines to display in the pretty-print output.
	     * 
	     *   When this location info is not provided, a default context of 1 line only is
	     *   used.
	     * 
	     * Special Notes:
	     * 
	     * - when the `loc`-indicated range is very large (about 5 lines or more), then
	     *   only the first and last few lines of this block are printed while a
	     *   `...continued...` message will be printed between them.
	     * 
	     *   This serves the purpose of not printing a huge amount of text when the `loc`
	     *   range happens to be huge: this way a manageable & readable output results
	     *   for arbitrary large ranges.
	     * 
	     * - this function can display lines of input which whave not yet been lexed.
	     *   `prettyPrintRange()` can access the entire input!
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
	      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
	      const CONTEXT = 3;
	      const CONTEXT_TAIL = 1;
	      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
	      var input = this.matched + this._input;
	      var lines = input.split('\n');
	      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
	      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
	      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
	      var ws_prefix = new Array(lineno_display_width).join(' ');
	      var nonempty_line_indexes = [];

	      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
	        var lno = index + l0;
	        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
	        var rv = lno_pfx + ': ' + line;
	        var errpfx = new Array(lineno_display_width + 1).join('^');
	        var offset = 2 + 1;
	        var len = 0;

	        if (lno === loc.first_line) {
	          offset += loc.first_column;

	          len = Math.max(
	            2,
	            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
	          );
	        } else if (lno === loc.last_line) {
	          len = Math.max(2, loc.last_column + 1);
	        } else if (lno > loc.first_line && lno < loc.last_line) {
	          len = Math.max(2, line.length + 1);
	        }

	        if (len) {
	          var lead = new Array(offset).join('.');
	          var mark = new Array(len).join('^');
	          rv += '\n' + errpfx + lead + mark;

	          if (line.trim().length > 0) {
	            nonempty_line_indexes.push(index);
	          }
	        }

	        rv = rv.replace(/\t/g, ' ');
	        return rv;
	      });

	      // now make sure we don't print an overly large amount of error area: limit it 
	      // to the top and bottom line count:
	      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
	        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
	        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
	        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
	        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
	        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
	      }

	      return rv.join('\n');
	    },

	    /**
	     * helper function, used to produce a human readable description as a string, given
	     * the input `yylloc` location object.
	     * 
	     * Set `display_range_too` to TRUE to include the string character index position(s)
	     * in the description if the `yylloc.range` is available.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
	      var l1 = yylloc.first_line;
	      var l2 = yylloc.last_line;
	      var c1 = yylloc.first_column;
	      var c2 = yylloc.last_column;
	      var dl = l2 - l1;
	      var dc = c2 - c1;
	      var rv;

	      if (dl === 0) {
	        rv = 'line ' + l1 + ', ';

	        if (dc <= 1) {
	          rv += 'column ' + c1;
	        } else {
	          rv += 'columns ' + c1 + ' .. ' + c2;
	        }
	      } else {
	        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
	      }

	      if (yylloc.range && display_range_too) {
	        var r1 = yylloc.range[0];
	        var r2 = yylloc.range[1] - 1;

	        if (r2 <= r1) {
	          rv += ' {String Offset: ' + r1 + '}';
	        } else {
	          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
	        }
	      }

	      return rv;
	    },

	    /**
	     * test the lexed token: return FALSE when not a match, otherwise return token.
	     * 
	     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
	     * contains the actually matched text string.
	     * 
	     * Also move the input cursor forward and update the match collectors:
	     * 
	     * - `yytext`
	     * - `yyleng`
	     * - `match`
	     * - `matches`
	     * - `yylloc`
	     * - `offset`
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    test_match: function lexer_test_match(match, indexed_rule) {
	      var token, lines, backup, match_str, match_str_len;

	      if (this.options.backtrack_lexer) {
	        // save context
	        backup = {
	          yylineno: this.yylineno,

	          yylloc: {
	            first_line: this.yylloc.first_line,
	            last_line: this.yylloc.last_line,
	            first_column: this.yylloc.first_column,
	            last_column: this.yylloc.last_column,
	            range: this.yylloc.range.slice(0)
	          },

	          yytext: this.yytext,
	          match: this.match,
	          matches: this.matches,
	          matched: this.matched,
	          yyleng: this.yyleng,
	          offset: this.offset,
	          _more: this._more,
	          _input: this._input,

	          //_signaled_error_token: this._signaled_error_token,
	          yy: this.yy,

	          conditionStack: this.conditionStack.slice(0),
	          done: this.done
	        };
	      }

	      match_str = match[0];
	      match_str_len = match_str.length;

	      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
	      lines = match_str.split(/(?:\r\n?|\n)/g);

	      if (lines.length > 1) {
	        this.yylineno += lines.length - 1;
	        this.yylloc.last_line = this.yylineno + 1;
	        this.yylloc.last_column = lines[lines.length - 1].length;
	      } else {
	        this.yylloc.last_column += match_str_len;
	      }

	      // }
	      this.yytext += match_str;

	      this.match += match_str;
	      this.matched += match_str;
	      this.matches = match;
	      this.yyleng = this.yytext.length;
	      this.yylloc.range[1] += match_str_len;

	      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
	      // those rules will already have moved this `offset` forward matching their match lengths,
	      // hence we must only add our own match length now:
	      this.offset += match_str_len;

	      this._more = false;
	      this._backtrack = false;
	      this._input = this._input.slice(match_str_len);

	      // calling this method:
	      //
	      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
	      token = this.performAction.call(
	        this,
	        this.yy,
	        indexed_rule,
	        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
	      );

	      // otherwise, when the action codes are all simple return token statements:
	      //token = this.simpleCaseActionClusters[indexed_rule];

	      if (this.done && this._input) {
	        this.done = false;
	      }

	      if (token) {
	        return token;
	      } else if (this._backtrack) {
	        // recover context
	        for (var k in backup) {
	          this[k] = backup[k];
	        }

	        this.__currentRuleSet__ = null;
	        return false;  // rule action called reject() implying the next rule should be tested instead. 
	      } else if (this._signaled_error_token) {
	        // produce one 'error' token as `.parseError()` in `reject()`
	        // did not guarantee a failure signal by throwing an exception!
	        token = this._signaled_error_token;

	        this._signaled_error_token = false;
	        return token;
	      }

	      return false;
	    },

	    /**
	     * return next match in input
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    next: function lexer_next() {
	      if (this.done) {
	        this.clear();
	        return this.EOF;
	      }

	      if (!this._input) {
	        this.done = true;
	      }

	      var token, match, tempMatch, index;

	      if (!this._more) {
	        this.clear();
	      }

	      var spec = this.__currentRuleSet__;

	      if (!spec) {
	        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
	        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
	        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
	        // speed up those activities a tiny bit.
	        spec = this.__currentRuleSet__ = this._currentRules();

	        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
	        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
	        if (!spec || !spec.rules) {
	          var lineno_msg = '';

	          if (this.options.trackPosition) {
	            lineno_msg = ' on line ' + (this.yylineno + 1);
	          }

	          var p = this.constructLexErrorInfo(
	            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
	            false
	          );

	          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
	          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
	        }
	      }

	      var rule_ids = spec.rules;
	      var regexes = spec.__rule_regexes;
	      var len = spec.__rule_count;

	      // Note: the arrays are 1-based, while `len` itself is a valid index,
	      // hence the non-standard less-or-equal check in the next loop condition!
	      for (var i = 1; i <= len; i++) {
	        tempMatch = this._input.match(regexes[i]);

	        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	          match = tempMatch;
	          index = i;

	          if (this.options.backtrack_lexer) {
	            token = this.test_match(tempMatch, rule_ids[i]);

	            if (token !== false) {
	              return token;
	            } else if (this._backtrack) {
	              match = undefined;
	              continue;  // rule action called reject() implying a rule MISmatch. 
	            } else {
	              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	              return false;
	            }
	          } else if (!this.options.flex) {
	            break;
	          }
	        }
	      }

	      if (match) {
	        token = this.test_match(match, rule_ids[index]);

	        if (token !== false) {
	          return token;
	        }

	        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	        return false;
	      }

	      if (!this._input) {
	        this.done = true;
	        this.clear();
	        return this.EOF;
	      } else {
	        var lineno_msg = '';

	        if (this.options.trackPosition) {
	          lineno_msg = ' on line ' + (this.yylineno + 1);
	        }

	        var p = this.constructLexErrorInfo(
	          'Lexical error' + lineno_msg + ': Unrecognized text.',
	          this.options.lexerErrorsAreRecoverable
	        );

	        var pendingInput = this._input;
	        var activeCondition = this.topState();
	        var conditionStackDepth = this.conditionStack.length;
	        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

	        if (token === this.ERROR) {
	          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
	          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
	          // has not consumed/modified any pending input or changed state in the error handler:
	          if (!this.matches && // and make sure the input has been modified/consumed ...
	          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
	          // to merit a non-consuming error handling action right now.
	          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
	            this.input();
	          }
	        }

	        return token;
	      }
	    },

	    /**
	     * return next match that has a token
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    lex: function lexer_lex() {
	      var r;

	      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
	      if (typeof this.pre_lex === 'function') {
	        r = this.pre_lex.call(this, 0);
	      }

	      if (typeof this.options.pre_lex === 'function') {
	        // (also account for a userdef function which does not return any value: keep the token as is)
	        r = this.options.pre_lex.call(this, r) || r;
	      }

	      if (this.yy && typeof this.yy.pre_lex === 'function') {
	        // (also account for a userdef function which does not return any value: keep the token as is)
	        r = this.yy.pre_lex.call(this, r) || r;
	      }

	      while (!r) {
	        r = this.next();
	      }

	      if (this.yy && typeof this.yy.post_lex === 'function') {
	        // (also account for a userdef function which does not return any value: keep the token as is)
	        r = this.yy.post_lex.call(this, r) || r;
	      }

	      if (typeof this.options.post_lex === 'function') {
	        // (also account for a userdef function which does not return any value: keep the token as is)
	        r = this.options.post_lex.call(this, r) || r;
	      }

	      if (typeof this.post_lex === 'function') {
	        // (also account for a userdef function which does not return any value: keep the token as is)
	        r = this.post_lex.call(this, r) || r;
	      }

	      return r;
	    },

	    /**
	     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
	     * `pre_lex()` nor any of the `post_lex()` callbacks.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    fastLex: function lexer_fastLex() {
	      var r;

	      while (!r) {
	        r = this.next();
	      }

	      return r;
	    },

	    /**
	     * return info about the lexer state that can help a parser or other lexer API user to use the
	     * most efficient means available. This API is provided to aid run-time performance for larger
	     * systems which employ this lexer.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    canIUse: function lexer_canIUse() {
	      var rv = {
	        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
	      };

	      return rv;
	    },

	    /**
	     * backwards compatible alias for `pushState()`;
	     * the latter is symmetrical with `popState()` and we advise to use
	     * those APIs in any modern lexer code, rather than `begin()`.
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    begin: function lexer_begin(condition) {
	      return this.pushState(condition);
	    },

	    /**
	     * activates a new lexer condition state (pushes the new lexer
	     * condition state onto the condition stack)
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    pushState: function lexer_pushState(condition) {
	      this.conditionStack.push(condition);
	      this.__currentRuleSet__ = null;
	      return this;
	    },

	    /**
	     * pop the previously active lexer condition state off the condition
	     * stack
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    popState: function lexer_popState() {
	      var n = this.conditionStack.length - 1;

	      if (n > 0) {
	        this.__currentRuleSet__ = null;
	        return this.conditionStack.pop();
	      } else {
	        return this.conditionStack[0];
	      }
	    },

	    /**
	     * return the currently active lexer condition state; when an index
	     * argument is provided it produces the N-th previous condition state,
	     * if available
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    topState: function lexer_topState(n) {
	      n = this.conditionStack.length - 1 - Math.abs(n || 0);

	      if (n >= 0) {
	        return this.conditionStack[n];
	      } else {
	        return 'INITIAL';
	      }
	    },

	    /**
	     * (internal) determine the lexer rule set which is active for the
	     * currently active lexer condition state
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    _currentRules: function lexer__currentRules() {
	      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
	        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
	      } else {
	        return this.conditions['INITIAL'];
	      }
	    },

	    /**
	     * return the number of states currently on the stack
	     * 
	     * @public
	     * @this {RegExpLexer}
	     */
	    stateStackSize: function lexer_stateStackSize() {
	      return this.conditionStack.length;
	    },

	    options: {
	      trackPosition: true
	    },

	    JisonLexerError: JisonLexerError,

	    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {

	      switch (yyrulenumber) {
	      case 1:
	        /*! Conditions:: INITIAL */
	        /*! Rule::       \s+ */
	        /* skip whitespace */
	        break;

	      default:
	        return this.simpleCaseActionClusters[yyrulenumber];
	      }
	    },

	    simpleCaseActionClusters: {
	      /*! Conditions:: INITIAL */
	      /*! Rule::       (--[0-9a-z-A-Z-]*) */
	      0: 13,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       \* */
	      2: 5,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       \/ */
	      3: 6,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       \+ */
	      4: 3,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       - */
	      5: 4,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)px\b */
	      6: 15,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)cm\b */
	      7: 15,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)mm\b */
	      8: 15,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)in\b */
	      9: 15,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pt\b */
	      10: 15,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pc\b */
	      11: 15,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)deg\b */
	      12: 16,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)grad\b */
	      13: 16,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rad\b */
	      14: 16,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)turn\b */
	      15: 16,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)s\b */
	      16: 17,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ms\b */
	      17: 17,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)Hz\b */
	      18: 18,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)kHz\b */
	      19: 18,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpi\b */
	      20: 19,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpcm\b */
	      21: 19,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dppx\b */
	      22: 19,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)em\b */
	      23: 20,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ex\b */
	      24: 21,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ch\b */
	      25: 22,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rem\b */
	      26: 23,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vw\b */
	      27: 25,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vh\b */
	      28: 24,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmin\b */
	      29: 26,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmax\b */
	      30: 27,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)% */
	      31: 28,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)\b */
	      32: 11,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       (calc) */
	      33: 9,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       (var) */
	      34: 12,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       ([a-z]+) */
	      35: 10,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       \( */
	      36: 7,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       \) */
	      37: 8,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       , */
	      38: 14,

	      /*! Conditions:: INITIAL */
	      /*! Rule::       $ */
	      39: 1
	    },

	    rules: [
	      /*  0: */  /^(?:(--[\d\-A-Za-z]*))/,
	      /*  1: */  /^(?:\s+)/,
	      /*  2: */  /^(?:\*)/,
	      /*  3: */  /^(?:\/)/,
	      /*  4: */  /^(?:\+)/,
	      /*  5: */  /^(?:-)/,
	      /*  6: */  /^(?:(\d+(\.\d*)?|\.\d+)px\b)/,
	      /*  7: */  /^(?:(\d+(\.\d*)?|\.\d+)cm\b)/,
	      /*  8: */  /^(?:(\d+(\.\d*)?|\.\d+)mm\b)/,
	      /*  9: */  /^(?:(\d+(\.\d*)?|\.\d+)in\b)/,
	      /* 10: */  /^(?:(\d+(\.\d*)?|\.\d+)pt\b)/,
	      /* 11: */  /^(?:(\d+(\.\d*)?|\.\d+)pc\b)/,
	      /* 12: */  /^(?:(\d+(\.\d*)?|\.\d+)deg\b)/,
	      /* 13: */  /^(?:(\d+(\.\d*)?|\.\d+)grad\b)/,
	      /* 14: */  /^(?:(\d+(\.\d*)?|\.\d+)rad\b)/,
	      /* 15: */  /^(?:(\d+(\.\d*)?|\.\d+)turn\b)/,
	      /* 16: */  /^(?:(\d+(\.\d*)?|\.\d+)s\b)/,
	      /* 17: */  /^(?:(\d+(\.\d*)?|\.\d+)ms\b)/,
	      /* 18: */  /^(?:(\d+(\.\d*)?|\.\d+)Hz\b)/,
	      /* 19: */  /^(?:(\d+(\.\d*)?|\.\d+)kHz\b)/,
	      /* 20: */  /^(?:(\d+(\.\d*)?|\.\d+)dpi\b)/,
	      /* 21: */  /^(?:(\d+(\.\d*)?|\.\d+)dpcm\b)/,
	      /* 22: */  /^(?:(\d+(\.\d*)?|\.\d+)dppx\b)/,
	      /* 23: */  /^(?:(\d+(\.\d*)?|\.\d+)em\b)/,
	      /* 24: */  /^(?:(\d+(\.\d*)?|\.\d+)ex\b)/,
	      /* 25: */  /^(?:(\d+(\.\d*)?|\.\d+)ch\b)/,
	      /* 26: */  /^(?:(\d+(\.\d*)?|\.\d+)rem\b)/,
	      /* 27: */  /^(?:(\d+(\.\d*)?|\.\d+)vw\b)/,
	      /* 28: */  /^(?:(\d+(\.\d*)?|\.\d+)vh\b)/,
	      /* 29: */  /^(?:(\d+(\.\d*)?|\.\d+)vmin\b)/,
	      /* 30: */  /^(?:(\d+(\.\d*)?|\.\d+)vmax\b)/,
	      /* 31: */  /^(?:(\d+(\.\d*)?|\.\d+)%)/,
	      /* 32: */  /^(?:(\d+(\.\d*)?|\.\d+)\b)/,
	      /* 33: */  /^(?:(calc))/,
	      /* 34: */  /^(?:(var))/,
	      /* 35: */  /^(?:([a-z]+))/,
	      /* 36: */  /^(?:\()/,
	      /* 37: */  /^(?:\))/,
	      /* 38: */  /^(?:,)/,
	      /* 39: */  /^(?:$)/
	    ],

	    conditions: {
	      'INITIAL': {
	        rules: [
	          0,
	          1,
	          2,
	          3,
	          4,
	          5,
	          6,
	          7,
	          8,
	          9,
	          10,
	          11,
	          12,
	          13,
	          14,
	          15,
	          16,
	          17,
	          18,
	          19,
	          20,
	          21,
	          22,
	          23,
	          24,
	          25,
	          26,
	          27,
	          28,
	          29,
	          30,
	          31,
	          32,
	          33,
	          34,
	          35,
	          36,
	          37,
	          38,
	          39
	        ],

	        inclusive: true
	      }
	    }
	  };

	  return lexer;
	}();
	parser.lexer = lexer;



	function Parser() {
	  this.yy = {};
	}
	Parser.prototype = parser;
	parser.Parser = Parser;

	return new Parser();
	})();

	        


	if (typeof commonjsRequire !== 'undefined' && 'object' !== 'undefined') {
	  exports.parser = parser;
	  exports.Parser = parser.Parser;
	  exports.parse = function () {
	    return parser.parse.apply(parser, arguments);
	  };
	  
	}
	});
	parser_1.parser;
	parser_1.Parser;
	parser_1.parse;

	var conversions = {
	    // length
	    'px': {
	        'px': 1,
	        'cm': 96.0/2.54,
	        'mm': 96.0/25.4,
	        'in': 96,
	        'pt': 96.0/72.0,
	        'pc': 16
	    },
	    'cm': {
	        'px': 2.54/96.0,
	        'cm': 1,
	        'mm': 0.1,
	        'in': 2.54,
	        'pt': 2.54/72.0,
	        'pc': 2.54/6.0
	    },
	    'mm': {
	        'px': 25.4/96.0,
	        'cm': 10,
	        'mm': 1,
	        'in': 25.4,
	        'pt': 25.4/72.0,
	        'pc': 25.4/6.0
	    },
	    'in': {
	        'px': 1.0/96.0,
	        'cm': 1.0/2.54,
	        'mm': 1.0/25.4,
	        'in': 1,
	        'pt': 1.0/72.0,
	        'pc': 1.0/6.0
	    },
	    'pt': {
	        'px': 0.75,
	        'cm': 72.0/2.54,
	        'mm': 72.0/25.4,
	        'in': 72,
	        'pt': 1,
	        'pc': 12
	    },
	    'pc': {
	        'px': 6.0/96.0,
	        'cm': 6.0/2.54,
	        'mm': 6.0/25.4,
	        'in': 6,
	        'pt': 6.0/72.0,
	        'pc': 1
	    },
	    // angle
	    'deg': {
	        'deg': 1,
	        'grad': 0.9,
	        'rad': 180/Math.PI,
	        'turn': 360
	    },
	    'grad': {
	        'deg': 400/360,
	        'grad': 1,
	        'rad': 200/Math.PI,
	        'turn': 400
	    },
	    'rad': {
	        'deg': Math.PI/180,
	        'grad': Math.PI/200,
	        'rad': 1,
	        'turn': Math.PI*2
	    },
	    'turn': {
	        'deg': 1/360,
	        'grad': 1/400,
	        'rad': 0.5/Math.PI,
	        'turn': 1
	    },
	    // time
	    's': {
	        's': 1,
	        'ms': 1/1000
	    },
	    'ms': {
	        's': 1000,
	        'ms': 1
	    },
	    // frequency
	    'Hz': {
	        'Hz': 1,
	        'kHz': 1000
	    },
	    'kHz': {
	        'Hz': 1/1000,
	        'kHz': 1
	    },
	    // resolution
	    'dpi': {
	        'dpi': 1,
	        'dpcm': 1.0/2.54,
	        'dppx': 1/96
	    },
	    'dpcm': {
	        'dpi': 2.54,
	        'dpcm': 1,
	        'dppx': 2.54/96.0
	    },
	    'dppx': {
	        'dpi': 96,
	        'dpcm': 96.0/2.54,
	        'dppx': 1
	    }
	};

	var cssUnitConverter = function (value, sourceUnit, targetUnit, precision) {
	    if (!conversions.hasOwnProperty(targetUnit))
	        throw new Error("Cannot convert to " + targetUnit);

	    if (!conversions[targetUnit].hasOwnProperty(sourceUnit))
	        throw new Error("Cannot convert from " + sourceUnit + " to " + targetUnit);
	    
	    var converted = conversions[targetUnit][sourceUnit] * value;
	    
	    if (precision !== false) {
	        precision = Math.pow(10, parseInt(precision) || 5);
	        return Math.round(converted * precision) / precision;
	    }
	    
	    return converted;
	};

	var convert = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _cssUnitConverter2 = _interopRequireDefault(cssUnitConverter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function convertNodes(left, right, precision) {
	  switch (left.type) {
	    case 'LengthValue':
	    case 'AngleValue':
	    case 'TimeValue':
	    case 'FrequencyValue':
	    case 'ResolutionValue':
	      return convertAbsoluteLength(left, right, precision);
	    default:
	      return { left: left, right: right };
	  }
	}

	function convertAbsoluteLength(left, right, precision) {
	  if (right.type === left.type) {
	    right = {
	      type: left.type,
	      value: (0, _cssUnitConverter2.default)(right.value, right.unit, left.unit, precision),
	      unit: left.unit
	    };
	  }
	  return { left: left, right: right };
	}

	exports.default = convertNodes;
	module.exports = exports['default'];
	});

	unwrapExports(convert);

	var reducer = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.flip = flip;



	var _convert2 = _interopRequireDefault(convert);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function reduce(node, precision) {
	  if (node.type === "MathExpression") return reduceMathExpression(node, precision);
	  if (node.type === "Calc") return reduce(node.value, precision);

	  return node;
	}

	function isEqual(left, right) {
	  return left.type === right.type && left.value === right.value;
	}

	function isValueType(type) {
	  switch (type) {
	    case 'LengthValue':
	    case 'AngleValue':
	    case 'TimeValue':
	    case 'FrequencyValue':
	    case 'ResolutionValue':
	    case 'EmValue':
	    case 'ExValue':
	    case 'ChValue':
	    case 'RemValue':
	    case 'VhValue':
	    case 'VwValue':
	    case 'VminValue':
	    case 'VmaxValue':
	    case 'PercentageValue':
	    case 'Value':
	      return true;
	  }
	  return false;
	}

	function convertMathExpression(node, precision) {
	  var nodes = (0, _convert2.default)(node.left, node.right, precision);
	  var left = reduce(nodes.left, precision);
	  var right = reduce(nodes.right, precision);

	  if (left.type === "MathExpression" && right.type === "MathExpression") {

	    if (left.operator === '/' && right.operator === '*' || left.operator === '-' && right.operator === '+' || left.operator === '*' && right.operator === '/' || left.operator === '+' && right.operator === '-') {

	      if (isEqual(left.right, right.right)) nodes = (0, _convert2.default)(left.left, right.left, precision);else if (isEqual(left.right, right.left)) nodes = (0, _convert2.default)(left.left, right.right, precision);

	      left = reduce(nodes.left, precision);
	      right = reduce(nodes.right, precision);
	    }
	  }

	  node.left = left;
	  node.right = right;
	  return node;
	}

	function flip(operator) {
	  return operator === '+' ? '-' : '+';
	}

	function flipValue(node) {
	  if (isValueType(node.type)) node.value = -node.value;else if (node.type == 'MathExpression') {
	    node.left = flipValue(node.left);
	    node.right = flipValue(node.right);
	  }
	  return node;
	}

	function reduceAddSubExpression(node, precision) {
	  var _node = node,
	      left = _node.left,
	      right = _node.right,
	      op = _node.operator;


	  if (left.type === 'CssVariable' || right.type === 'CssVariable') return node;

	  // something + 0 => something
	  // something - 0 => something
	  if (right.value === 0) return left;

	  // 0 + something => something
	  if (left.value === 0 && op === "+") return right;

	  // 0 - something => -something
	  if (left.value === 0 && op === "-") return flipValue(right);

	  // value + value
	  // value - value
	  if (left.type === right.type && isValueType(left.type)) {
	    node = Object.assign({}, left);
	    if (op === "+") node.value = left.value + right.value;else node.value = left.value - right.value;
	  }

	  // value <op> (expr)
	  if (isValueType(left.type) && (right.operator === '+' || right.operator === '-') && right.type === 'MathExpression') {
	    // value + (value + something) => (value + value) + something
	    // value + (value - something) => (value + value) - something
	    // value - (value + something) => (value - value) - something
	    // value - (value - something) => (value - value) + something
	    if (left.type === right.left.type) {
	      node = Object.assign({}, node);
	      node.left = reduce({
	        type: 'MathExpression',
	        operator: op,
	        left: left,
	        right: right.left
	      }, precision);
	      node.right = right.right;
	      node.operator = op === '-' ? flip(right.operator) : right.operator;
	      return reduce(node, precision);
	    }
	    // value + (something + value) => (value + value) + something
	    // value + (something - value) => (value - value) + something
	    // value - (something + value) => (value - value) - something
	    // value - (something - value) => (value + value) - something
	    else if (left.type === right.right.type) {
	        node = Object.assign({}, node);
	        node.left = reduce({
	          type: 'MathExpression',
	          operator: op === '-' ? flip(right.operator) : right.operator,
	          left: left,
	          right: right.right
	        }, precision);
	        node.right = right.left;
	        return reduce(node, precision);
	      }
	  }

	  // (expr) <op> value
	  if (left.type === 'MathExpression' && (left.operator === '+' || left.operator === '-') && isValueType(right.type)) {
	    // (value + something) + value => (value + value) + something
	    // (value - something) + value => (value + value) - something
	    // (value + something) - value => (value - value) + something
	    // (value - something) - value => (value - value) - something
	    if (right.type === left.left.type) {
	      node = Object.assign({}, left);
	      node.left = reduce({
	        type: 'MathExpression',
	        operator: op,
	        left: left.left,
	        right: right
	      }, precision);
	      return reduce(node, precision);
	    }
	    // (something + value) + value => something + (value + value)
	    // (something - value1) + value2 => something - (value2 - value1)
	    // (something + value) - value => something + (value - value)
	    // (something - value) - value => something - (value + value)
	    else if (right.type === left.right.type) {
	        node = Object.assign({}, left);
	        if (left.operator === '-') {
	          node.right = reduce({
	            type: 'MathExpression',
	            operator: op === '-' ? '+' : '-',
	            left: right,
	            right: left.right
	          }, precision);
	          node.operator = op === '-' ? '-' : '+';
	        } else {
	          node.right = reduce({
	            type: 'MathExpression',
	            operator: op,
	            left: left.right,
	            right: right
	          }, precision);
	        }
	        if (node.right.value < 0) {
	          node.right.value *= -1;
	          node.operator = node.operator === '-' ? '+' : '-';
	        }
	        return reduce(node, precision);
	      }
	  }
	  return node;
	}

	function reduceDivisionExpression(node, precision) {
	  if (!isValueType(node.right.type)) return node;

	  if (node.right.type !== 'Value') throw new Error("Cannot divide by \"" + node.right.unit + "\", number expected");

	  if (node.right.value === 0) throw new Error('Cannot divide by zero');

	  // (expr) / value
	  if (node.left.type === 'MathExpression') {
	    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {
	      node.left.left.value /= node.right.value;
	      node.left.right.value /= node.right.value;
	      return reduce(node.left, precision);
	    }
	    return node;
	  }
	  // something / value
	  else if (isValueType(node.left.type)) {
	      node.left.value /= node.right.value;
	      return node.left;
	    }
	  return node;
	}

	function reduceMultiplicationExpression(node) {
	  // (expr) * value
	  if (node.left.type === 'MathExpression' && node.right.type === 'Value') {
	    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {
	      node.left.left.value *= node.right.value;
	      node.left.right.value *= node.right.value;
	      return node.left;
	    }
	  }
	  // something * value
	  else if (isValueType(node.left.type) && node.right.type === 'Value') {
	      node.left.value *= node.right.value;
	      return node.left;
	    }
	    // value * (expr)
	    else if (node.left.type === 'Value' && node.right.type === 'MathExpression') {
	        if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {
	          node.right.left.value *= node.left.value;
	          node.right.right.value *= node.left.value;
	          return node.right;
	        }
	      }
	      // value * something
	      else if (node.left.type === 'Value' && isValueType(node.right.type)) {
	          node.right.value *= node.left.value;
	          return node.right;
	        }
	  return node;
	}

	function reduceMathExpression(node, precision) {
	  node = convertMathExpression(node, precision);

	  switch (node.operator) {
	    case "+":
	    case "-":
	      return reduceAddSubExpression(node, precision);
	    case "/":
	      return reduceDivisionExpression(node, precision);
	    case "*":
	      return reduceMultiplicationExpression(node);
	  }
	  return node;
	}

	exports.default = reduce;
	});

	unwrapExports(reducer);
	reducer.flip;

	var stringifier = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (calc, node, precision) {
	  var str = stringify(node, precision);

	  if (node.type === "MathExpression") {
	    // if calc expression couldn't be resolved to a single value, re-wrap it as
	    // a calc()
	    str = calc + "(" + str + ")";
	  }
	  return str;
	};



	var order = {
	  "*": 0,
	  "/": 0,
	  "+": 1,
	  "-": 1
	};

	function round(value, prec) {
	  if (prec !== false) {
	    var precision = Math.pow(10, prec);
	    return Math.round(value * precision) / precision;
	  }
	  return value;
	}

	function stringify(node, prec) {
	  switch (node.type) {
	    case "MathExpression":
	      {
	        var left = node.left,
	            right = node.right,
	            op = node.operator;

	        var str = "";

	        if (left.type === 'MathExpression' && order[op] < order[left.operator]) str += "(" + stringify(left, prec) + ")";else str += stringify(left, prec);

	        str += " " + node.operator + " ";

	        if (right.type === 'MathExpression' && order[op] < order[right.operator]) {
	          str += "(" + stringify(right, prec) + ")";
	        } else if (right.type === 'MathExpression' && op === "-" && ["+", "-"].includes(right.operator)) {
	          // fix #52 : a-(b+c) = a-b-c
	          right.operator = (0, reducer.flip)(right.operator);
	          str += stringify(right, prec);
	        } else {
	          str += stringify(right, prec);
	        }

	        return str;
	      }
	    case "Value":
	      return round(node.value, prec);
	    case 'CssVariable':
	      if (node.fallback) {
	        return "var(" + node.value + ", " + stringify(node.fallback, prec) + ")";
	      }
	      return "var(" + node.value + ")";
	    case 'Calc':
	      if (node.prefix) {
	        return "-" + node.prefix + "-calc(" + stringify(node.value, prec) + ")";
	      }
	      return "calc(" + stringify(node.value, prec) + ")";
	    default:
	      return round(node.value, prec) + node.unit;
	  }
	}

	module.exports = exports["default"];
	});

	unwrapExports(stringifier);

	var dist = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _postcssValueParser2 = _interopRequireDefault(lib);





	var _reducer2 = _interopRequireDefault(reducer);



	var _stringifier2 = _interopRequireDefault(stringifier);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// eslint-disable-line
	var MATCH_CALC = /((?:\-[a-z]+\-)?calc)/;

	exports.default = function (value) {
	  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;

	  return (0, _postcssValueParser2.default)(value).walk(function (node) {
	    // skip anything which isn't a calc() function
	    if (node.type !== 'function' || !MATCH_CALC.test(node.value)) return;

	    // stringify calc expression and produce an AST
	    var contents = _postcssValueParser2.default.stringify(node.nodes);

	    // skip constant() and env()
	    if (contents.indexOf('constant') >= 0 || contents.indexOf('env') >= 0) return;

	    var ast = parser_1.parser.parse(contents);

	    // reduce AST to its simplest form, that is, either to a single value
	    // or a simplified calc expression
	    var reducedAst = (0, _reducer2.default)(ast, precision);

	    // stringify AST and write it back
	    node.type = 'word';
	    node.value = (0, _stringifier2.default)(node.value, reducedAst, precision);
	  }, true).toString();
	};

	module.exports = exports['default'];
	});

	unwrapExports(dist);

	function expandCalculations(computedStyle) {
	  let hasCopiedOuter = false;
	  for (const prop of Object.keys(computedStyle.props)) {
	    let hasCopiedInner = false;
	    let hypotheticalValues = computedStyle.props[prop];
	    for (let i = 0; i < hypotheticalValues.length; i += 1) {
	      const hypotheticalValue = hypotheticalValues[i];
	      // Quick test for whether the value contains a calculation:
	      if (/calc\(/.test(hypotheticalValue.value)) {
	        let reducedValue;
	        try {
	          reducedValue = dist(hypotheticalValue.value);
	        } catch (err) {
	          continue;
	        }
	        if (reducedValue !== hypotheticalValue.value) {
	          const replacementHypotheticalValue = {
	            ...hypotheticalValue,
	            value: reducedValue,
	          };
	          if (!hasCopiedOuter) {
	            computedStyle = duplicateComputedStyle_1(computedStyle);
	            hasCopiedOuter = true;
	          }
	          if (!hasCopiedInner) {
	            hypotheticalValues = computedStyle.props[prop] = [
	              ...hypotheticalValues,
	            ];
	            hasCopiedInner = true;
	          }
	          hypotheticalValues.splice(i, 1, replacementHypotheticalValue);
	          i -= 1;
	        }
	      }
	    }
	  }
	  return computedStyle;
	}

	var expandCalculations_1 = expandCalculations;

	var unquote$1 = function unquote(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return str.replace(
	    /^'([^']*)'$|^"([^"]*)"$/,
	    ($0, singleQuoted, doubleQuoted) =>
	      typeof singleQuoted === 'string'
	        ? singleQuoted.replace(/\\'/g, "'")
	        : doubleQuoted.replace(/\\"/g, '"')
	  );
	};

	function expandListIndicators(
	  computedStyle,
	  counterStyles,
	  possibleListItemNumbers
	) {
	  computedStyle.props.text = computedStyle.props.text || [];
	  if (computedStyle.props.display) {
	    for (let i = 0; i < computedStyle.props.display.length; i += 1) {
	      if (/\blist-item\b/.test(computedStyle.props.display[i].value)) {
	        for (
	          let j = 0;
	          j < computedStyle.props['list-style-type'].length;
	          j += 1
	        ) {
	          const listStyleType = computedStyle.props['list-style-type'][j].value;
	          const predicates = combinePredicates_1([
	            computedStyle.props.display[i].predicates,
	            computedStyle.props['list-style-type'][j].predicates,
	          ]);
	          if (predicates) {
	            if (/^['"]/.test(listStyleType)) {
	              computedStyle.props.text.push({
	                value: unescapeCssString_1$1(unquote$1(listStyleType)),
	                isListIndicator: true,
	                predicates,
	              });
	            } else {
	              let found = false;
	              for (const counterStyle of counterStyles) {
	                if (counterStyle.name === listStyleType) {
	                  const combinedPredicates = combinePredicates_1([
	                    predicates,
	                    counterStyle.predicates,
	                  ]);

	                  if (combinedPredicates) {
	                    found = true;
	                    const renderer = createCounterRenderer_1(
	                      counterStyle.props,
	                      counterStyles
	                    );
	                    computedStyle.props.text.push({
	                      value: possibleListItemNumbers
	                        .map((counterValue) => renderer.render(counterValue))
	                        .join(''),
	                      isListIndicator: true,
	                      predicates: combinedPredicates,
	                    });
	                  }
	                }
	              }
	              if (!found) {
	                computedStyle.props.text.push({
	                  value: possibleListItemNumbers
	                    .map((listItemNumber) =>
	                      renderListItem(listItemNumber, listStyleType)
	                    )
	                    .join(''),
	                  isListIndicator: true,
	                  predicates,
	                });
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	  return lodash.omit(computedStyle, '');
	}

	function renderListItem(listItemNumber, listStyleType) {
	  const renderer = counteraction(listStyleType);
	  if (renderer) {
	    return `${renderer.render(listItemNumber)}.`;
	  } else {
	    const matchSymbols = listStyleType.match(
	      /symbols\(\s*(cyclic|numeric|alphabetic|symbolic|fixed)?(.*)\)$/
	    );
	    if (matchSymbols) {
	      const system = matchSymbols[1] || 'numeric';
	      return counteraction(system, { symbols: matchSymbols[2] }).render(
	        listItemNumber
	      );
	    } else {
	      return '';
	    }
	  }
	}

	var expandListIndicators_1 = expandListIndicators;

	function arePredicatesExhaustive(predicatesArray) {
	  const seenPredicateNames = {};
	  for (const predicates of predicatesArray) {
	    for (const predicateName of Object.keys(predicates)) {
	      seenPredicateNames[predicateName] = true;
	    }
	  }
	  for (const permutation of expandPermutations_1(
	    Object.keys(seenPredicateNames).reduce(
	      // eslint-disable-next-line no-sequences
	      (acc, predicateName) => ((acc[predicateName] = [true, false]), acc),
	      {}
	    )
	  )) {
	    if (
	      !predicatesArray.some((predicates) =>
	        Object.keys(seenPredicateNames).every(
	          (predicateName) =>
	            predicates[predicateName] === undefined ||
	            predicates[predicateName] === permutation[predicateName]
	        )
	      )
	    ) {
	      return false;
	    }
	  }
	  return true;
	}

	var arePredicatesExhaustive_1 = arePredicatesExhaustive;

	function expandFirstLineAndFirstLetter(
	  groupedStyledTexts,
	  node,
	  getComputedStyle,
	  idArray
	) {
	  for (const pseudoElementName of ['first-line', 'first-letter']) {
	    const additionalStyledTexts = [];
	    // Whether there's a perfect overlap between the predicates of the existing styled texts we've "taken bites" of:
	    let aligned = true;
	    groupedStyledTexts.some((styledTextsInSection) => {
	      let allExhaustive = false;
	      // Keep track of whether we have consumed all the required characters:
	      let done = true;
	      for (let i = 0; i < styledTextsInSection.length; i += 1) {
	        const styledTextInSection = styledTextsInSection[i];
	        const thisExhaustive = Object.keys(styledTextInSection.props).every(
	          (prop) =>
	            arePredicatesExhaustive_1(
	              styledTextInSection.props[prop].map(
	                (hypotheticalValue) => hypotheticalValue.predicates
	              )
	            )
	        );
	        allExhaustive = allExhaustive || thisExhaustive;

	        const pseudoElementStyle = getComputedStyle(
	          node,
	          idArray.slice(0, -1),
	          pseudoElementName,
	          styledTextInSection
	        );
	        if (pseudoElementStyle) {
	          for (const hypotheticalValue of styledTextInSection.props.text) {
	            let matchContent;
	            if (pseudoElementName === 'first-letter') {
	              matchContent = hypotheticalValue.value.match(
	                /^(\s*"?\s*\w|\s*"\s*\w?)/
	              );
	            } else {
	              // pseudoElementName === 'first-line'
	              matchContent = hypotheticalValue.value.match(/^([^\n]+)/);
	              done = false;
	            }
	            if (matchContent) {
	              const content = matchContent[1];
	              pseudoElementStyle.props.text = [
	                {
	                  value: content,
	                  predicates: hypotheticalValue.predicates,
	                },
	              ];
	              additionalStyledTexts.push(pseudoElementStyle);
	              if (aligned) {
	                if (pseudoElementName === 'first-letter') {
	                  hypotheticalValue.value = hypotheticalValue.value.substr(
	                    content.length
	                  );
	                } else if (pseudoElementName === 'first-line') {
	                  done = hypotheticalValue.value.includes('\n');
	                }
	              }
	            } else {
	              done = false;
	            }
	          }
	        }
	      }
	      if (allExhaustive && done) {
	        // Short circuit -- no need to proceed to the next section
	        return true;
	      } else if (!done) {
	        aligned = false;
	      }
	      return false;
	    });
	    groupedStyledTexts[0].unshift(...additionalStyledTexts);
	  }
	}

	var expandFirstLineAndFirstLetter_1 = expandFirstLineAndFirstLetter;

	function safeMatchesSelector(node, selector) {
	  try {
	    return node.matches(selector);
	  } catch (err) {
	    return false;
	  }
	}

	const CSS_PROPS_REQUIRED_FOR_TEXT = [
	  'content',
	  'quotes',
	  'list-style-type',
	  'display',
	  'animation-name',
	  'animation-timing-function',
	  'text-transform',
	  'transition-property',
	  'transition-duration',
	  'counter-increment',
	  'counter-reset',
	  'counter-set',
	  'white-space',
	];

	const INHERITED = {
	  'font-family': true,
	  'font-weight': true,
	  'font-style': true,
	  content: false,
	  quotes: true,
	  'list-style-type': true,
	  display: false,
	  'animation-name': false,
	  'text-transform': true,
	  'transition-property': false,
	  'transition-duration': false,
	  'counter-increment': false,
	  'counter-reset': false,
	  'white-space': true,
	  'font-variation-settings': true,
	};

	const SVG_NAMESPACE_URI = 'http://www.w3.org/2000/svg';

	function createPredicatePermutations(predicatesToVary, predicates, i) {
	  if (typeof i !== 'number') {
	    i = 0;
	  }
	  if (i < predicatesToVary.length) {
	    const permutations = [];
	    for (const permutation of createPredicatePermutations(
	      predicatesToVary,
	      predicates,
	      i + 1
	    )) {
	      const permutationWithPredicateOff = { ...permutation };
	      let predicateValue = predicates[predicatesToVary[i]];
	      if (typeof predicateValue === 'undefined') {
	        predicateValue = true;
	      }
	      permutationWithPredicateOff[predicatesToVary[i]] = predicateValue;
	      permutations.push(permutation, permutationWithPredicateOff);
	    }
	    return permutations;
	  } else {
	    return [{}];
	  }
	}

	const excludedNodes = ['HEAD', 'STYLE', 'SCRIPT'];

	function getFontRulesWithDefaultStylesheetApplied(
	  stylesheetsWithPredicates,
	  getCssRulesByProperty,
	  cssPropsToTrace
	) {
	  const fontPropRules = [...defaultStylesheets, ...stylesheetsWithPredicates]
	    .map((stylesheetAndIncomingMedia) =>
	      getCssRulesByProperty(
	        cssPropsToTrace,
	        stylesheetAndIncomingMedia.text,
	        stylesheetAndIncomingMedia.predicates
	      )
	    )
	    .reduce((rules, current) => {
	      // Input:
	      // [
	      //   {
	      //     'font-style': [],
	      //     'font-weight': [],
	      //     'font-family': []
	      //   },
	      //   {
	      //     'font-style': [],
	      //     'font-weight': [],
	      //     'font-family': []
	      //   },
	      //   {
	      //     'font-style': [],
	      //     'font-weight': [],
	      //     'font-family': []
	      //   }
	      // ]

	      // Output:
	      // {
	      //   'font-style': [[], [], []],
	      //   'font-weight': [[], [], []],
	      //   'font-family': [[], [], []]
	      // }
	      for (const prop of Object.keys(current)) {
	        if (!rules[prop]) {
	          rules[prop] = [];
	        }

	        rules[prop] = [...rules[prop], ...current[prop]];
	      }

	      return rules;
	    }, {});

	  for (const prop of Object.keys(fontPropRules)) {
	    fontPropRules[prop].sort(stylePropObjectComparator_1(fontPropRules[prop]));
	  }

	  return fontPropRules;
	}


	function specificityComparator(a, b) {
	  // Compare importance
	  const importanceComparison = b.important - a.important;

	  if (importanceComparison !== 0) {
	    return importanceComparison;
	  }

	  // Compare specificity
	  return -specificity.compare(a.specificityArray, b.specificityArray);
	}

	function* createDeclarationGenerator(
	  node,
	  prop,
	  fontPropRules,
	  attributeStyles
	) {
	  const attributeStylesForProp =
	    attributeStyles &&
	    attributeStyles[prop] &&
	    attributeStyles[prop].length > 0 &&
	    attributeStyles[prop];

	  if (fontPropRules[prop]) {
	    if (attributeStylesForProp) {
	      let i = 0;
	      let j = 0;
	      while (
	        i < attributeStylesForProp.length &&
	        j < fontPropRules[prop].length
	      ) {
	        if (
	          specificityComparator(
	            attributeStylesForProp[i],
	            fontPropRules[prop][j]
	          ) <= 0
	        ) {
	          yield attributeStylesForProp[i];
	          i += 1;
	        } else {
	          yield fontPropRules[prop][j];
	          j += 1;
	        }
	      }
	      while (i < attributeStylesForProp.length) {
	        yield attributeStylesForProp[i];
	        i += 1;
	      }
	      while (j < fontPropRules[prop].length) {
	        yield fontPropRules[prop][j];
	        j += 1;
	      }
	    } else {
	      yield* fontPropRules[prop];
	    }
	  } else if (attributeStylesForProp) {
	    yield* attributeStylesForProp;
	  }

	  if (node.namespaceURI === SVG_NAMESPACE_URI) {
	    if (node.hasAttribute(prop)) {
	      yield {
	        namespaceURI: SVG_NAMESPACE_URI,
	        selector: '*',
	        predicates: {},
	        prop,
	        value: node.getAttribute(prop),
	        specificityArray: [0, 0, 0, 0],
	      };
	    }
	  }
	}

	function getMemoizedElementStyleResolver(
	  fontPropRules,
	  getCssRulesByProperty,
	  cssPropsToTrace
	) {
	  const nonInheritingTags = ['BUTTON', 'INPUT', 'OPTION', 'TEXTAREA'];

	  const cssPropsAndCustomPropsToTrace = [
	    ...cssPropsToTrace,
	    ...Object.keys(fontPropRules).filter((prop) => /^--/.test(prop)),
	  ];

	  const getComputedStyle = memoizeSync(
	    (node, idArray, pseudoElementName, parentTrace, predicates) => {
	      predicates = predicates || {};
	      const result = { node, pseudoElementName, props: {} };

	      // Stop condition. We moved above <HTML>
	      if (!node.tagName) {
	        for (const prop of cssPropsAndCustomPropsToTrace) {
	          result.props[prop] = [
	            { value: initialValueByProp[prop], predicates, prop },
	          ];
	        }
	        return result;
	      }

	      const attributeStyles =
	        node.hasAttribute('style') &&
	        getCssRulesByProperty(
	          cssPropsAndCustomPropsToTrace,
	          `bogusselector { ${node.getAttribute('style')} }`,
	          [],
	          []
	        );

	      let foundPseudoElement = false;

	      function traceProp(prop, startIndex, predicates) {
	        startIndex = startIndex || 0;
	        let i = 0;
	        for (const declaration of createDeclarationGenerator(
	          node,
	          prop,
	          fontPropRules,
	          attributeStyles
	        )) {
	          if (i < startIndex) {
	            i += 1;
	            continue;
	          }
	          // Skip to the next rule if we are doing a trace where one of true predicates is already assumed false,
	          // or one of the false predicates is already assumed true:
	          if (
	            Object.keys(declaration.predicates).some(
	              (predicate) =>
	                typeof predicates[predicate] === 'boolean' &&
	                declaration.predicates[predicate] !== predicates[predicate]
	            )
	          ) {
	            continue;
	          }

	          // Style attributes always have a specificity array of [1, 0, 0, 0]
	          const isStyleAttribute = declaration.specificityArray[0] === 1;
	          let strippedSelector =
	            !isStyleAttribute &&
	            stripPseudoClassesFromSelector_1(declaration.selector);
	          const hasPseudoClasses = strippedSelector !== declaration.selector;
	          let hasPseudoElement = false;

	          if (!isStyleAttribute) {
	            const matchPseudoElement = strippedSelector.match(
	              /^(.*?)::?(before|after|first-letter|first-line|placeholder|marker)$/i
	            );
	            if (matchPseudoElement) {
	              hasPseudoElement = true;
	              // The selector ends with :before, :after, :first-letter, or :first-line
	              if (pseudoElementName === matchPseudoElement[2].toLowerCase()) {
	                strippedSelector = matchPseudoElement[1];
	              } else {
	                // We're not currently tracing this pseudo element, skip this rule
	                continue;
	              }
	            }
	          }

	          if (
	            !prop.startsWith('--') &&
	            !INHERITED[prop] &&
	            !hasPseudoElement &&
	            pseudoElementName
	          ) {
	            continue;
	          }

	          if (
	            isStyleAttribute ||
	            !strippedSelector ||
	            ((!declaration.namespaceURI ||
	              node.namespaceURI === declaration.namespaceURI) &&
	              safeMatchesSelector(node, strippedSelector))
	          ) {
	            if (hasPseudoElement) {
	              foundPseudoElement = true;
	            }
	            let hypotheticalValues;
	            if (
	              declaration.value === 'inherit' ||
	              declaration.value === 'unset'
	            ) {
	              hypotheticalValues = (
	                parentTrace ||
	                getComputedStyle(
	                  node.parentNode,
	                  idArray.slice(0, -1),
	                  undefined,
	                  undefined,
	                  predicates
	                )
	              ).props[prop];
	            } else if (
	              prop === 'font-weight' &&
	              (declaration.value === 'lighter' ||
	                declaration.value === 'bolder')
	            ) {
	              hypotheticalValues = (
	                parentTrace ||
	                getComputedStyle(
	                  node.parentNode,
	                  idArray.slice(0, -1),
	                  undefined,
	                  undefined,
	                  predicates
	                )
	              ).props[prop].map((inheritedHypotheticalValue) => ({
	                prop: inheritedHypotheticalValue.prop,
	                value: `${inheritedHypotheticalValue.value}+${declaration.value}`,
	                predicates: inheritedHypotheticalValue,
	              }));
	            } else {
	              let value;
	              if (declaration.value === 'initial') {
	                value = initialValueByProp[prop];
	              } else if (prop !== 'content' || hasPseudoElement) {
	                // content: ... is not inherited, has to be applied directly to the pseudo element
	                value = declaration.value;
	              }

	              hypotheticalValues = [
	                { prop: declaration.prop, value, predicates },
	              ];
	            }

	            const predicatesToVary = Object.keys(declaration.predicates);
	            if (!isStyleAttribute && hasPseudoClasses) {
	              predicatesToVary.push(
	                `selectorWithPseudoClasses:${declaration.selector}`
	              );
	            }
	            if (predicatesToVary.length > 0) {
	              const multipliedHypotheticalValues = [];
	              for (const predicatePermutation of createPredicatePermutations(
	                predicatesToVary,
	                declaration.predicates
	              )) {
	                const predicatePermutationKeys =
	                  Object.keys(predicatePermutation);
	                if (predicatePermutationKeys.length === 0) {
	                  continue;
	                }
	                const predicatesForThisPermutation = combinePredicates_1([
	                  predicates,
	                  predicatePermutation,
	                ]);
	                const predicatesOtherwise = combinePredicates_1([
	                  predicates,
	                  lodash.mapValues(predicatePermutation, (value) => !value),
	                ]);
	                if (
	                  predicatesForThisPermutation &&
	                  Object.keys(declaration.predicates).every(
	                    (predicate) =>
	                      declaration.predicates[predicate] ===
	                      predicatesForThisPermutation[predicate]
	                  )
	                ) {
	                  multipliedHypotheticalValues.push(
	                    ...hypotheticalValues.map((hypotheticalValue) => ({
	                      prop: hypotheticalValue.prop,
	                      value: hypotheticalValue.value,
	                      predicates: predicatesForThisPermutation,
	                    }))
	                  );
	                }
	                if (predicatesOtherwise) {
	                  multipliedHypotheticalValues.push(
	                    ...traceProp(prop, i + 1, predicatesOtherwise)
	                  );
	                }
	              }
	              hypotheticalValues = multipliedHypotheticalValues;
	            }
	            return hypotheticalValues;
	          }
	          i += 1;
	        }
	        if (!nonInheritingTags.includes(node.tagName)) {
	          return (
	            parentTrace ||
	            getComputedStyle(
	              node.parentNode,
	              idArray.slice(0, -1),
	              undefined,
	              undefined,
	              predicates
	            )
	          ).props[prop];
	        } else {
	          return [{ prop, value: initialValueByProp[prop], predicates }];
	        }
	      }

	      for (const prop of cssPropsAndCustomPropsToTrace) {
	        result.props[prop] = traceProp(prop, 0, predicates);
	      }
	      if (pseudoElementName && !foundPseudoElement) {
	        // We're tracing a pseudo element, but didn't match any rules
	        return;
	      }
	      return result;
	    },
	    {
	      argumentsStringifier(args) {
	        // node, idArray, pseudoElementName, parentTrace, predicates
	        if (args[3]) {
	          // Bypass memoization if parentTrace is given
	          return false;
	        }
	        return `${args[1].join(',')}\x1e${
          args[4]
            ? Object.keys(args[4])
                .map((key) => `${key}\x1d${args[4][key]}`)
                .join('\x1d')
            : ''
        }${args[2] || ''}`;
	      },
	    }
	  );

	  return getComputedStyle;
	}

	// null represents <br>
	function normalizeTextNodeValues(textNodeValues, whiteSpaceValue) {
	  return textNodeValues
	    .map((textNodeValue) =>
	      textNodeValue === null
	        ? '\n'
	        : /^pre/i.test(whiteSpaceValue)
	        ? textNodeValue
	        : textNodeValue.replace(/\n/g, ' ')
	    )
	    .join('');
	}

	function extractReferencedCustomPropertyNames(cssValue) {
	  const rootNode = lib$2(cssValue);
	  const customPropertyNames = new Set();
	  for (const [node] of postcssValueVarNodeGenerator_1(rootNode)) {
	    customPropertyNames.add(node.nodes[0].value);
	  }
	  return customPropertyNames;
	}

	// Avoid a combinatorial explosion of predicates when many custom CSS properties
	// unrelated to fonts are in play.
	// https://github.com/Munter/subfont/issues/159
	function eliminateUnneededCustomProperties(fontPropRules, cssPropsToTrace) {
	  const seenCustomProperties = new Set();
	  const queue = new Set(cssPropsToTrace);
	  for (const prop of queue) {
	    for (const { value } of fontPropRules[prop] || []) {
	      for (const customPropertyName of extractReferencedCustomPropertyNames(
	        value
	      )) {
	        queue.add(customPropertyName);
	        seenCustomProperties.add(customPropertyName);
	      }
	    }
	  }
	  for (const prop of Object.keys(fontPropRules)) {
	    if (prop.startsWith('--') && !seenCustomProperties.has(prop)) {
	      delete fontPropRules[prop];
	    }
	  }
	}

	// asset is optional
	function fontTracer(
	  document,
	  {
	    stylesheetsWithPredicates = [],
	    getCssRulesByProperty,
	    asset,
	    propsToReturn = [
	      'font-family',
	      'font-style',
	      'font-weight',
	      'font-variant',
	      'font-stretch',
	      'font-variation-settings',
	      'animation-timing-function',
	    ],
	    deduplicate = true,
	  } = {}
	) {
	  const cssPropsToTrace = [...propsToReturn, ...CSS_PROPS_REQUIRED_FOR_TEXT];
	  const cssPropsToTraceAndText = [...cssPropsToTrace, 'text'];
	  const fontPropRules = getFontRulesWithDefaultStylesheetApplied(
	    stylesheetsWithPredicates,
	    getCssRulesByProperty,
	    cssPropsToTrace
	  );
	  eliminateUnneededCustomProperties(fontPropRules, cssPropsToTrace);

	  const getComputedStyle = getMemoizedElementStyleResolver(
	    fontPropRules,
	    getCssRulesByProperty,
	    cssPropsToTrace
	  );

	  const hypotheticalCounterStylesByName = {};
	  for (const counterStyle of fontPropRules.counterStyles) {
	    (hypotheticalCounterStylesByName[counterStyle.name] =
	      hypotheticalCounterStylesByName[counterStyle.name] || []).push({
	      value: counterStyle.props,
	      predicates: counterStyle.predicates,
	    });
	  }

	  const visualValueInputTypes = [
	    'date',
	    'datetime-local',
	    'email',
	    'month',
	    'number',
	    'reset',
	    'search',
	    'submit',
	    'tel',
	    'text',
	    'time',
	    'url',
	    'week',
	  ];

	  const possibleNextListItemNumberStack = [[1]];
	  let possibleCounterValuesByName = {};

	  function adjustPossibleCountersAndListItemNumbers(
	    computedStyle,
	    isWithinConditionalCommentOrNoscript
	  ) {
	    let numHypotheticalListItems = 0;
	    if (computedStyle.props.display) {
	      for (const hypotheticalDisplayValue of computedStyle.props.display) {
	        if (/\blist-item\b/.test(hypotheticalDisplayValue.value)) {
	          numHypotheticalListItems += 1;
	        }
	      }
	    }
	    let nextPossibleCounterValuesByName = {};
	    for (const propertyName of ['counter-reset', 'counter-set']) {
	      const values = lodash.uniq(
	        computedStyle.props[propertyName].map(
	          (hypotheticalCounterResetValue) => hypotheticalCounterResetValue.value
	        )
	      );
	      for (const value of values) {
	        const valueByCounterName = {};
	        if (value !== 'none') {
	          const tokens = value.split(/\s+/);
	          for (let i = 0; i < tokens.length; i += 1) {
	            const counterName = tokens[i];
	            let resetValue = 0;
	            if (/^-?\d+$/.test(tokens[i + 1])) {
	              resetValue = parseInt(tokens[i + 1], 10);
	              i += 1;
	            }
	            valueByCounterName[counterName] = resetValue;
	          }
	        }
	        for (const counterName of Object.keys(valueByCounterName)) {
	          for (const possibleCounterValue of possibleCounterValuesByName[
	            counterName
	          ] || [0]) {
	            (nextPossibleCounterValuesByName[counterName] =
	              nextPossibleCounterValuesByName[counterName] || []).push(
	              valueByCounterName[counterName] + possibleCounterValue
	            );
	          }
	        }
	        for (const counterName of Object.keys(possibleCounterValuesByName)) {
	          if (!valueByCounterName[counterName]) {
	            nextPossibleCounterValuesByName[counterName] = [
	              ...possibleCounterValuesByName[counterName],
	            ];
	          }
	        }
	      }
	    }

	    possibleCounterValuesByName = nextPossibleCounterValuesByName;
	    nextPossibleCounterValuesByName = {};

	    const counterIncrementValues = lodash.uniq(
	      computedStyle.props['counter-increment'].map(
	        (hypotheticalCounterIncrementValue) =>
	          hypotheticalCounterIncrementValue.value
	      )
	    );
	    const counterIncrementsByName = {};
	    for (const counterIncrementValue of counterIncrementValues) {
	      if (counterIncrementValue !== 'none') {
	        const tokens = counterIncrementValue.split(/\s+/);
	        for (let i = 0; i < tokens.length; i += 1) {
	          const counterName = tokens[i];
	          let increment = 1;
	          if (/^-?\d+$/.test(tokens[i + 1])) {
	            increment = parseInt(tokens[i + 1], 10);
	            i += 1;
	          }
	          (counterIncrementsByName[counterName] =
	            counterIncrementsByName[counterName] || []).push(increment);
	        }
	      }
	    }
	    for (const counterName of Object.keys(counterIncrementsByName)) {
	      for (const possibleCounterValue of possibleCounterValuesByName[
	        counterName
	      ] || [0]) {
	        for (const counterIncrement of counterIncrementsByName[counterName]) {
	          (nextPossibleCounterValuesByName[counterName] =
	            nextPossibleCounterValuesByName[counterName] || []).push(
	            possibleCounterValue + counterIncrement
	          );
	        }
	      }
	    }
	    for (const counterName of Object.keys(possibleCounterValuesByName)) {
	      if (!counterIncrementsByName[counterName]) {
	        nextPossibleCounterValuesByName[counterName] = [
	          ...possibleCounterValuesByName[counterName],
	        ];
	      }
	    }
	    possibleCounterValuesByName = nextPossibleCounterValuesByName;
	    for (const counterName of Object.keys(possibleCounterValuesByName)) {
	      possibleCounterValuesByName[counterName] = lodash.uniq(
	        possibleCounterValuesByName[counterName]
	      );
	    }
	    if (numHypotheticalListItems > 0) {
	      if (
	        numHypotheticalListItems === computedStyle.props.display.length &&
	        !isWithinConditionalCommentOrNoscript
	      ) {
	        possibleNextListItemNumberStack[
	          possibleNextListItemNumberStack.length - 1
	        ] = possibleNextListItemNumberStack[
	          possibleNextListItemNumberStack.length - 1
	        ].map(
	          (potentialPrecedingListItemCount) =>
	            potentialPrecedingListItemCount + 1
	        );
	      } else {
	        possibleNextListItemNumberStack[
	          possibleNextListItemNumberStack.length - 1
	        ] = lodash.uniq([
	          ...possibleNextListItemNumberStack[
	            possibleNextListItemNumberStack.length - 1
	          ],
	          ...possibleNextListItemNumberStack[
	            possibleNextListItemNumberStack.length - 1
	          ].map(
	            (potentialPrecedingListItemCount) =>
	              potentialPrecedingListItemCount + 1
	          ),
	        ]);
	      }
	    }
	    return computedStyle;
	  }

	  const conditionalCommentStack = [];
	  const noscriptStack = [];

	  function expandComputedStyle(computedStyle) {
	    return expandListIndicators_1(
	      expandCalculations_1(
	        expandCustomProperties_1(
	          expandTransitions_1(
	            expandAnimations_1(computedStyle, fontPropRules.keyframes)
	          )
	        )
	      ),
	      fontPropRules.counterStyles,
	      possibleNextListItemNumberStack[
	        possibleNextListItemNumberStack.length - 1
	      ]
	    );
	  }

	  function tracePseudoElement(
	    pseudoElementName,
	    node,
	    idArray,
	    normalContentValues
	  ) {
	    const styledTexts = [];
	    let computedStyle = getComputedStyle(node, idArray, pseudoElementName);
	    if (computedStyle) {
	      computedStyle = expandComputedStyle({ ...computedStyle });
	      const expandedContents = [];
	      // Multiply the hypothetical content values with the hypothetical quotes values:
	      for (const hypotheticalContent of computedStyle.props.content) {
	        let hypotheticalValues;
	        if (hypotheticalContent.value === 'normal' && normalContentValues) {
	          hypotheticalValues = normalContentValues;
	        } else {
	          hypotheticalValues = extractTextFromContentPropertyValue_1(
	            hypotheticalContent.value,
	            node,
	            computedStyle.props.quotes,
	            hypotheticalCounterStylesByName,
	            possibleCounterValuesByName
	          );
	        }
	        for (const hypotheticalValue of hypotheticalValues) {
	          hypotheticalValue.predicates = combinePredicates_1([
	            hypotheticalValue.predicates,
	            hypotheticalContent.predicates,
	          ]);
	          if (hypotheticalValue.predicates) {
	            expandedContents.push(hypotheticalValue);
	          }
	        }
	      }
	      computedStyle.props.text = expandedContents;
	      const styledText = adjustPossibleCountersAndListItemNumbers(
	        computedStyle,
	        conditionalCommentStack.length > 0 || noscriptStack.length > 0
	      );
	      styledText.props.text = styledText.props.text.filter(
	        (hypotheticalText) => hypotheticalText.value.length > 0
	      );
	      if (styledText.props.text.length > 0) {
	        styledTexts.push(styledText);
	      }
	      return styledTexts;
	    }
	  }

	  const styledTexts = [];

	  (function traversePreOrder(node, idArray) {
	    const textNodeValues = [];
	    if (node.nodeType === node.TEXT_NODE) {
	      if (
	        node.parentNode.namespaceURI !== SVG_NAMESPACE_URI ||
	        ['text', 'tspan', 'textPath'].includes(node.parentNode.tagName)
	      ) {
	        const textContent = node.nodeValue
	          .replace(/⋖\d+⋗/g, (templatePlaceholder) => {
	            if (asset && asset._templateReplacements[templatePlaceholder]) {
	              return '';
	            } else {
	              return templatePlaceholder;
	            }
	          })
	          .replace(/\xad/g, '-'); // Include an actual hyphen when there's a soft hyphen:
	        if (textContent) {
	          textNodeValues.push(textContent);
	        }
	      }
	    } else if (node.nodeType === node.COMMENT_NODE) {
	      if (/^\s*\[if\s+!IE\s*\]\s*>\s*$/i.test(node.nodeValue)) {
	        // Start of non-IE conditional comment where the markup is in the containing document:
	        conditionalCommentStack.push(true);
	      } else if (/^\s*<!\[\s*endif\s*\]\s*$/.test(node.nodeValue)) {
	        // End of non-IE conditional comment where the markup is in the containing document:
	        conditionalCommentStack.pop();
	      } else {
	        // See if this is a conditional comment where the markup is in the comment value:
	        asset &&
	          asset.outgoingRelations.some((relation) => {
	            if (
	              relation.type === 'HtmlConditionalComment' &&
	              relation.node === node
	            ) {
	              conditionalCommentStack.push(true);
	              const conditionalCommentDocument = relation.to.parseTree;
	              let isWithinBody = false;
	              for (
	                let i = 0;
	                i < conditionalCommentDocument.childNodes.length;
	                i += 1
	              ) {
	                const childNode = conditionalCommentDocument.childNodes[i];
	                // Don't proceed unless we're between
	                // <!--ASSETGRAPH DOCUMENT START MARKER--> and <!--ASSETGRAPH DOCUMENT END MARKER-->
	                if (childNode.nodeType === childNode.COMMENT_NODE) {
	                  if (
	                    childNode.nodeValue === 'ASSETGRAPH DOCUMENT START MARKER'
	                  ) {
	                    isWithinBody = true;
	                    continue;
	                  } else if (
	                    childNode.nodeValue === 'ASSETGRAPH DOCUMENT END MARKER'
	                  ) {
	                    break;
	                  }
	                } else if (!isWithinBody) {
	                  continue;
	                }
	                // Fake that the node in the conditional comment has the parent element of the comment as its parentElement
	                // so that the correct CSS selectors match:
	                Object.defineProperty(childNode, 'parentElement', {
	                  configurable: true,
	                  get() {
	                    return node.parentElement;
	                  },
	                });
	                textNodeValues.push(
	                  ...traversePreOrder(childNode, [...idArray, i])
	                );
	                delete childNode.parentElement;
	              }
	              conditionalCommentStack.pop();
	              // Short circuit
	              return true;
	            }
	            return false;
	          });
	      }
	    } else if (
	      node.nodeType === node.DOCUMENT_NODE ||
	      (node.nodeType === node.ELEMENT_NODE &&
	        !excludedNodes.includes(node.tagName))
	    ) {
	      if (!idArray) {
	        idArray = [0];
	      }

	      if (node.tagName === 'NOSCRIPT') {
	        asset &&
	          asset.outgoingRelations.some((relation) => {
	            if (relation.type === 'HtmlNoscript' && relation.node === node) {
	              noscriptStack.push(true);
	              const noscriptDocument = relation.to.parseTree;
	              for (let i = 0; i < noscriptDocument.childNodes.length; i += 1) {
	                const childNode = noscriptDocument.childNodes[i];
	                // Fake that the top-level node in the inline asset has the <noscript> as its parentNode
	                // so that the correct CSS selectors match:
	                Object.defineProperty(childNode, 'parentElement', {
	                  configurable: true,
	                  get() {
	                    return node;
	                  },
	                });
	                textNodeValues.push(
	                  ...traversePreOrder(childNode, [...idArray, i])
	                );
	                delete childNode.parentElement;
	              }
	              noscriptStack.pop();
	              // Short circuit
	              return true;
	            }
	            return false;
	          });
	      } else if (
	        node.tagName === 'INPUT' &&
	        visualValueInputTypes.includes(node.type || 'text')
	      ) {
	        // Inputs might have visual text, but don't have childNodes
	        const inputValue = (node.value || '').trim();
	        const inputPlaceholder = (node.placeholder || '').trim();

	        if (inputValue) {
	          const inputValueComputedStyle = duplicateComputedStyle_1(
	            expandComputedStyle(getComputedStyle(node, idArray))
	          );
	          inputValueComputedStyle.props.text = [
	            { value: inputValue, predicates: {} },
	          ];
	          styledTexts.push(inputValueComputedStyle);
	        }

	        if (inputPlaceholder) {
	          // Stupidly named var to avoid clash, fix after merging to master where const and let can be used
	          const elementComputedStyle = duplicateComputedStyle_1(
	            getComputedStyle(node, idArray)
	          );

	          const placeholderComputedStyle =
	            getComputedStyle(
	              node,
	              idArray,
	              'placeholder',
	              elementComputedStyle
	            ) || elementComputedStyle;

	          placeholderComputedStyle.props.text = [
	            { value: inputPlaceholder, predicates: {} },
	          ];

	          styledTexts.push(expandComputedStyle(placeholderComputedStyle));
	        }
	      } else if (
	        [node.ELEMENT_NODE, node.DOCUMENT_NODE].includes(node.nodeType)
	      ) {
	        if (node.constructor.name === 'HTMLBRElement') {
	          textNodeValues.push(null);
	        } else {
	          const computedStyle = duplicateComputedStyle_1(
	            getComputedStyle(node, idArray)
	          );
	          computedStyle.props.text = [{ value: '', predicates: {} }];

	          const expandedComputedStyle = expandComputedStyle(computedStyle);
	          styledTexts.push(
	            adjustPossibleCountersAndListItemNumbers(
	              expandedComputedStyle,
	              conditionalCommentStack.length > 0 || noscriptStack.length > 0
	            )
	          );
	          possibleNextListItemNumberStack.push([1]);

	          const beforeStyledTexts = tracePseudoElement('before', node, idArray);
	          const afterStyledTexts = tracePseudoElement('after', node, idArray);

	          let markerStyledTexts;
	          if (
	            expandedComputedStyle.props.display &&
	            expandedComputedStyle.props.display.some((display) =>
	              /\blist-item\b/i.test(display.value)
	            )
	          ) {
	            markerStyledTexts = tracePseudoElement(
	              'marker',
	              node,
	              idArray,
	              expandedComputedStyle.props.text.filter(
	                (text) => text.isListIndicator
	              )
	            );
	          }

	          const childTextNodeValues = lodash.flatten(
	            [].slice
	              .call(node.childNodes)
	              .map((childNode, i) =>
	                traversePreOrder(childNode, [...idArray, i])
	              )
	          );
	          const tracedTextNodes = [];
	          if (childTextNodeValues.length > 0) {
	            for (const hypotheticalValue of computedStyle.props[
	              'white-space'
	            ]) {
	              const normalizedText = normalizeTextNodeValues(
	                childTextNodeValues,
	                hypotheticalValue.value
	              );
	              if (normalizedText) {
	                const textComputedStyle = duplicateComputedStyle_1(computedStyle);
	                textComputedStyle.props.text = [
	                  {
	                    value: normalizedText,
	                    predicates: hypotheticalValue.predicates,
	                  },
	                ];
	                tracedTextNodes.push(expandComputedStyle(textComputedStyle));
	              }
	            }
	          }
	          const groupedStyledTexts = lodash.compact([
	            beforeStyledTexts,
	            tracedTextNodes,
	            afterStyledTexts,
	            markerStyledTexts,
	          ]);
	          expandFirstLineAndFirstLetter_1(
	            groupedStyledTexts,
	            node,
	            getComputedStyle,
	            idArray
	          );
	          styledTexts.push(...lodash.flattenDeep(groupedStyledTexts));
	          possibleNextListItemNumberStack.pop();
	        }
	      }
	    }
	    return textNodeValues;
	  })(document.body ? document.body.parentNode : document);

	  // propsByText Before:
	  // [
	  //   {
	  //     text: 'foo',
	  //     props: {
	  //       'font-family': [ { value: 'a', predicates: {...} }, { value: 'b', predicates: {...} }],
	  //       'font-style': [ { value: 'normal', predicates: {...} } ],
	  //       'font-weight': [ { value: 400, predicates: {...} }, { value: 700, predicates: {...} }]
	  //      }
	  //   },
	  //   ...
	  // ]

	  // Extract longhand property values from font shorthands
	  for (const styledText of styledTexts) {
	    for (const prop of ['font-family', 'font-weight', 'font-style']) {
	      if (styledText.props[prop]) {
	        for (const [i, hypotheticalValue] of styledText.props[prop].entries()) {
	          let value = hypotheticalValue.value;

	          if (value) {
	            if (hypotheticalValue.prop === 'font') {
	              const fontProperties = cssFontParser_module.parseFont(value);
	              value =
	                (fontProperties && fontProperties[prop]) ||
	                initialValueByProp[prop];
	            }
	            if (prop === 'font-family' && Array.isArray(value)) {
	              value = value.join(', ');
	            }
	            if (value !== hypotheticalValue.value) {
	              styledText.props[prop].splice(i, 1, {
	                predicates: hypotheticalValue.predicates,
	                prop,
	                value,
	              });
	            }
	          }
	        }
	      }
	    }
	  }

	  const seenPermutationKeys = new Set();
	  const multipliedStyledTexts = lodash.flatMap(styledTexts, ({ props, ...rest }) =>
	    [...expandPermutations_1(props)]
	      .map((props) => ({
	        ...rest,
	        props,
	      }))
	      // Remove impossible combinations:
	      .filter(({ props }) =>
	        cssPropsToTraceAndText.every((prop) => {
	          return Object.keys(props[prop].predicates).every((predicate) => {
	            const predicateValue = props[prop].predicates[predicate];
	            return (
	              predicateValue === false ||
	              cssPropsToTraceAndText.every(
	                (otherProp) => props[otherProp].predicates[predicate] !== false
	              )
	            );
	          });
	        })
	      )
	      .map(({ props, ...rest }) => {
	        const text = props.text.isListIndicator
	          ? props.text.value
	          : applyTextTransform_1(
	              props.text.value,
	              props['text-transform'].value.toLowerCase()
	            );

	        // Strip the "hypothetical" wrapper objects around the values
	        // and lift out the text
	        const predicates = {};
	        const transformedStyledText = {
	          text,
	          predicates,
	          props: {},
	          ...rest,
	        };
	        for (const prop of cssPropsToTrace) {
	          transformedStyledText.props[prop] = props[prop].value;
	          Object.assign(predicates, props[prop].predicates);
	        }
	        return transformedStyledText;
	      })
	      .filter(function filterAndDeduplicate({ text, props }) {
	        if (
	          !text ||
	          (props.display && props.display.toLowerCase() === 'none')
	        ) {
	          return false;
	        }
	        if (!deduplicate) {
	          return true;
	        }
	        // Unwrap the "hypothetical value" objects:
	        let permutationKey = `${text}\x1d`;
	        for (const prop of propsToReturn) {
	          permutationKey += `${prop}\x1d${props[prop]}\x1d`;
	        }

	        // Deduplicate:
	        if (!seenPermutationKeys.has(permutationKey)) {
	          seenPermutationKeys.add(permutationKey);
	          return true;
	        }
	        return false;
	      })
	      .map(({ text, props, ...rest }) => ({
	        text,
	        ...rest,
	        props: lodash.pick(props, propsToReturn),
	      }))
	  );

	  // multipliedStyledTexts After:
	  // [
	  //   {
	  //     text: 'foo',
	  //     props: {
	  //       'font-family': 'a',
	  //       'font-style': 'normal',
	  //       'font-weight': 400
	  //     }
	  //   },
	  //   {
	  //     text: 'foo',
	  //     props: {
	  //       'font-family': 'b',
	  //       'font-style': 'normal',
	  //       'font-weight': 400
	  //     }
	  //   },
	  //   {
	  //     text: 'foo',
	  //     props: {
	  //       'font-family': 'a',
	  //       'font-style': 'normal',
	  //       'font-weight': 700
	  //     }
	  //   },
	  //   {
	  //     text: 'foo',
	  //     props: {
	  //       'font-family': 'b',
	  //       'font-style': 'normal',
	  //       'font-weight': 700
	  //     }
	  //   },
	  //   ...
	  // ]

	  return multipliedStyledTexts;
	}

	var fontTracer_1 = fontTracer;

	function gatherStylesheetsWithPredicates(document) {
	  const stylesheetsWithPredicates = [];
	  for (const stylesheet of Array.from(document.styleSheets)) {
	    const predicates = {};
	    if (
	      stylesheet.media &&
	      stylesheet.media.mediaText &&
	      stylesheet.media.mediaText !== 'all'
	    ) {
	      predicates[`mediaQuery:${stylesheet.media.mediaText}`] = true;
	    }

	    let cssRules;
	    // Avoid crashing on stylesheets from other origins
	    try {
	      cssRules = stylesheet.cssRules;
	    } catch (err) {
	      continue;
	    }
	    stylesheetsWithPredicates.push({
	      text: Array.from(cssRules)
	        .map((cssRule) => cssRule.cssText)
	        .join('\n'),

	      predicates,
	    });
	  }
	  return stylesheetsWithPredicates;
	}

	var gatherStylesheetsWithPredicates_1 = gatherStylesheetsWithPredicates;

	var postcss = createCommonjsModule(function (module) {
	module.exports=function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=26)}([function(t,e,r){let n,s,i,o,{isClean:a,my:l}=r(8),h=r(2),u=r(6),c=r(3);class f extends c{push(t){return t.parent=this,this.proxyOf.nodes.push(t),this}each(t){if(!this.proxyOf.nodes)return;let e,r,n=this.getIterator();for(;this.indexes[n]<this.proxyOf.nodes.length&&(e=this.indexes[n],r=t(this.proxyOf.nodes[e],e),!1!==r);)this.indexes[n]+=1;return delete this.indexes[n],r}walk(t){return this.each((e,r)=>{let n;try{n=t(e,r);}catch(t){throw e.addToError(t)}return !1!==n&&e.walk&&(n=e.walk(t)),n})}walkDecls(t,e){return e?t instanceof RegExp?this.walk((r,n)=>{if("decl"===r.type&&t.test(r.prop))return e(r,n)}):this.walk((r,n)=>{if("decl"===r.type&&r.prop===t)return e(r,n)}):(e=t,this.walk((t,r)=>{if("decl"===t.type)return e(t,r)}))}walkRules(t,e){return e?t instanceof RegExp?this.walk((r,n)=>{if("rule"===r.type&&t.test(r.selector))return e(r,n)}):this.walk((r,n)=>{if("rule"===r.type&&r.selector===t)return e(r,n)}):(e=t,this.walk((t,r)=>{if("rule"===t.type)return e(t,r)}))}walkAtRules(t,e){return e?t instanceof RegExp?this.walk((r,n)=>{if("atrule"===r.type&&t.test(r.name))return e(r,n)}):this.walk((r,n)=>{if("atrule"===r.type&&r.name===t)return e(r,n)}):(e=t,this.walk((t,r)=>{if("atrule"===t.type)return e(t,r)}))}walkComments(t){return this.walk((e,r)=>{if("comment"===e.type)return t(e,r)})}append(...t){for(let e of t){let t=this.normalize(e,this.last);for(let e of t)this.proxyOf.nodes.push(e);}return this.markDirty(),this}prepend(...t){t=t.reverse();for(let e of t){let t=this.normalize(e,this.first,"prepend").reverse();for(let e of t)this.proxyOf.nodes.unshift(e);for(let e in this.indexes)this.indexes[e]=this.indexes[e]+t.length;}return this.markDirty(),this}cleanRaws(t){if(super.cleanRaws(t),this.nodes)for(let e of this.nodes)e.cleanRaws(t);}insertBefore(t,e){let r,n=0===(t=this.index(t))&&"prepend",s=this.normalize(e,this.proxyOf.nodes[t],n).reverse();for(let e of s)this.proxyOf.nodes.splice(t,0,e);for(let e in this.indexes)r=this.indexes[e],t<=r&&(this.indexes[e]=r+s.length);return this.markDirty(),this}insertAfter(t,e){t=this.index(t);let r,n=this.normalize(e,this.proxyOf.nodes[t]).reverse();for(let e of n)this.proxyOf.nodes.splice(t+1,0,e);for(let e in this.indexes)r=this.indexes[e],t<r&&(this.indexes[e]=r+n.length);return this.markDirty(),this}removeChild(t){let e;t=this.index(t),this.proxyOf.nodes[t].parent=void 0,this.proxyOf.nodes.splice(t,1);for(let r in this.indexes)e=this.indexes[r],e>=t&&(this.indexes[r]=e-1);return this.markDirty(),this}removeAll(){for(let t of this.proxyOf.nodes)t.parent=void 0;return this.proxyOf.nodes=[],this.markDirty(),this}replaceValues(t,e,r){return r||(r=e,e={}),this.walkDecls(n=>{e.props&&!e.props.includes(n.prop)||e.fast&&!n.value.includes(e.fast)||(n.value=n.value.replace(t,r));}),this.markDirty(),this}every(t){return this.nodes.every(t)}some(t){return this.nodes.some(t)}index(t){return "number"==typeof t?t:(t.proxyOf&&(t=t.proxyOf),this.proxyOf.nodes.indexOf(t))}get first(){if(this.proxyOf.nodes)return this.proxyOf.nodes[0]}get last(){if(this.proxyOf.nodes)return this.proxyOf.nodes[this.proxyOf.nodes.length-1]}normalize(t,e){if("string"==typeof t)t=function t(e){return e.map(e=>(e.nodes&&(e.nodes=t(e.nodes)),delete e.source,e))}(n(t).nodes);else if(Array.isArray(t)){t=t.slice(0);for(let e of t)e.parent&&e.parent.removeChild(e,"ignore");}else if("root"===t.type&&"document"!==this.type){t=t.nodes.slice(0);for(let e of t)e.parent&&e.parent.removeChild(e,"ignore");}else if(t.type)t=[t];else if(t.prop){if(void 0===t.value)throw new Error("Value field is missed in node creation");"string"!=typeof t.value&&(t.value=String(t.value)),t=[new h(t)];}else if(t.selector)t=[new s(t)];else if(t.name)t=[new i(t)];else {if(!t.text)throw new Error("Unknown node type in node creation");t=[new u(t)];}return t.map(t=>(t[l]||f.rebuild(t),(t=t.proxyOf).parent&&t.parent.removeChild(t),t[a]&&function t(e){if(e[a]=!1,e.proxyOf.nodes)for(let r of e.proxyOf.nodes)t(r);}(t),void 0===t.raws.before&&e&&void 0!==e.raws.before&&(t.raws.before=e.raws.before.replace(/\S/g,"")),t.parent=this.proxyOf,t))}getProxyProcessor(){return {set:(t,e,r)=>(t[e]===r||(t[e]=r,"name"!==e&&"params"!==e&&"selector"!==e||t.markDirty()),!0),get:(t,e)=>"proxyOf"===e?t:t[e]?"each"===e||"string"==typeof e&&e.startsWith("walk")?(...r)=>t[e](...r.map(t=>"function"==typeof t?(e,r)=>t(e.toProxy(),r):t)):"every"===e||"some"===e?r=>t[e]((t,...e)=>r(t.toProxy(),...e)):"root"===e?()=>t.root().toProxy():"nodes"===e?t.nodes.map(t=>t.toProxy()):"first"===e||"last"===e?t[e].toProxy():t[e]:t[e]}}getIterator(){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach+=1;let t=this.lastEach;return this.indexes[t]=0,t}}f.registerParse=t=>{n=t;},f.registerRule=t=>{s=t;},f.registerAtRule=t=>{i=t;},f.registerRoot=t=>{o=t;},t.exports=f,f.default=f,f.rebuild=t=>{"atrule"===t.type?Object.setPrototypeOf(t,i.prototype):"rule"===t.type?Object.setPrototypeOf(t,s.prototype):"decl"===t.type?Object.setPrototypeOf(t,h.prototype):"comment"===t.type?Object.setPrototypeOf(t,u.prototype):"root"===t.type&&Object.setPrototypeOf(t,o.prototype),t[l]=!0,t.nodes&&t.nodes.forEach(t=>{f.rebuild(t);});};},function(t,e,r){let n,s,i=r(0);class o extends i{constructor(t){super(t),this.type="root",this.nodes||(this.nodes=[]);}removeChild(t,e){let r=this.index(t);return !e&&0===r&&this.nodes.length>1&&(this.nodes[1].raws.before=this.nodes[r].raws.before),super.removeChild(t)}normalize(t,e,r){let n=super.normalize(t);if(e)if("prepend"===r)this.nodes.length>1?e.raws.before=this.nodes[1].raws.before:delete e.raws.before;else if(this.first!==e)for(let t of n)t.raws.before=e.raws.before;return n}toResult(t={}){return new n(new s,this,t).stringify()}}o.registerLazyResult=t=>{n=t;},o.registerProcessor=t=>{s=t;},t.exports=o,o.default=o,i.registerRoot(o);},function(t,e,r){let n=r(3);class s extends n{constructor(t){t&&void 0!==t.value&&"string"!=typeof t.value&&(t={...t,value:String(t.value)}),super(t),this.type="decl";}get variable(){return this.prop.startsWith("--")||"$"===this.prop[0]}}t.exports=s,s.default=s;},function(t,e,r){let{isClean:n,my:s}=r(8),i=r(7),o=r(17),a=r(4);class l{constructor(t={}){this.raws={},this[n]=!1,this[s]=!0;for(let e in t)if("nodes"===e){this.nodes=[];for(let r of t[e])"function"==typeof r.clone?this.append(r.clone()):this.append(r);}else this[e]=t[e];}error(t,e={}){if(this.source){let{start:r,end:n}=this.rangeBy(e);return this.source.input.error(t,{line:r.line,column:r.column},{line:n.line,column:n.column},e)}return new i(t)}warn(t,e,r){let n={node:this};for(let t in r)n[t]=r[t];return t.warn(e,n)}remove(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this}toString(t=a){t.stringify&&(t=t.stringify);let e="";return t(this,t=>{e+=t;}),e}assign(t={}){for(let e in t)this[e]=t[e];return this}clone(t={}){let e=function t(e,r){let n=new e.constructor;for(let s in e){if(!Object.prototype.hasOwnProperty.call(e,s))continue;if("proxyCache"===s)continue;let i=e[s],o=typeof i;"parent"===s&&"object"===o?r&&(n[s]=r):"source"===s?n[s]=i:Array.isArray(i)?n[s]=i.map(e=>t(e,n)):("object"===o&&null!==i&&(i=t(i)),n[s]=i);}return n}(this);for(let r in t)e[r]=t[r];return e}cloneBefore(t={}){let e=this.clone(t);return this.parent.insertBefore(this,e),e}cloneAfter(t={}){let e=this.clone(t);return this.parent.insertAfter(this,e),e}replaceWith(...t){if(this.parent){let e=this,r=!1;for(let n of t)n===this?r=!0:r?(this.parent.insertAfter(e,n),e=n):this.parent.insertBefore(e,n);r||this.remove();}return this}next(){if(!this.parent)return;let t=this.parent.index(this);return this.parent.nodes[t+1]}prev(){if(!this.parent)return;let t=this.parent.index(this);return this.parent.nodes[t-1]}before(t){return this.parent.insertBefore(this,t),this}after(t){return this.parent.insertAfter(this,t),this}root(){let t=this;for(;t.parent&&"document"!==t.parent.type;)t=t.parent;return t}raw(t,e){return (new o).raw(this,t,e)}cleanRaws(t){delete this.raws.before,delete this.raws.after,t||delete this.raws.between;}toJSON(t,e){let r={},n=null==e;e=e||new Map;let s=0;for(let t in this){if(!Object.prototype.hasOwnProperty.call(this,t))continue;if("parent"===t||"proxyCache"===t)continue;let n=this[t];if(Array.isArray(n))r[t]=n.map(t=>"object"==typeof t&&t.toJSON?t.toJSON(null,e):t);else if("object"==typeof n&&n.toJSON)r[t]=n.toJSON(null,e);else if("source"===t){let i=e.get(n.input);null==i&&(i=s,e.set(n.input,s),s++),r[t]={inputId:i,start:n.start,end:n.end};}else r[t]=n;}return n&&(r.inputs=[...e.keys()].map(t=>t.toJSON())),r}positionInside(t){let e=this.toString(),r=this.source.start.column,n=this.source.start.line;for(let s=0;s<t;s++)"\n"===e[s]?(r=1,n+=1):r+=1;return {line:n,column:r}}positionBy(t){let e=this.source.start;if(t.index)e=this.positionInside(t.index);else if(t.word){let r=this.toString().indexOf(t.word);-1!==r&&(e=this.positionInside(r));}return e}rangeBy(t){let e={line:this.source.start.line,column:this.source.start.column},r=this.source.end?{line:this.source.end.line,column:this.source.end.column+1}:{line:e.line,column:e.column+1};if(t.word){let n=this.toString().indexOf(t.word);-1!==n&&(e=this.positionInside(n),r=this.positionInside(n+t.word.length));}else t.start?e={line:t.start.line,column:t.start.column}:t.index&&(e=this.positionInside(t.index)),t.end?r={line:t.end.line,column:t.end.column}:t.endIndex?r=this.positionInside(t.endIndex):t.index&&(r=this.positionInside(t.index+1));return (r.line<e.line||r.line===e.line&&r.column<=e.column)&&(r={line:e.line,column:e.column+1}),{start:e,end:r}}getProxyProcessor(){return {set:(t,e,r)=>(t[e]===r||(t[e]=r,"prop"!==e&&"value"!==e&&"name"!==e&&"params"!==e&&"important"!==e&&"text"!==e||t.markDirty()),!0),get:(t,e)=>"proxyOf"===e?t:"root"===e?()=>t.root().toProxy():t[e]}}toProxy(){return this.proxyCache||(this.proxyCache=new Proxy(this,this.getProxyProcessor())),this.proxyCache}addToError(t){if(t.postcssNode=this,t.stack&&this.source&&/\n\s{4}at /.test(t.stack)){let e=this.source;t.stack=t.stack.replace(/\n\s{4}at /,`$&${e.input.from}:${e.start.line}:${e.start.column}$&`);}return t}markDirty(){if(this[n]){this[n]=!1;let t=this;for(;t=t.parent;)t[n]=!1;}}get proxyOf(){return this}}t.exports=l,l.default=l;},function(t,e,r){let n=r(17);function s(t,e){new n(e).stringify(t);}t.exports=s,s.default=s;},function(t,e,r){let{SourceMapConsumer:n,SourceMapGenerator:s}=r(9),{fileURLToPath:i,pathToFileURL:o}=r(21),{resolve:a,isAbsolute:l}=r(10),{nanoid:h}=r(33),u=r(16),c=r(7),f=r(22),p=Symbol("fromOffsetCache"),d=Boolean(n&&s),g=Boolean(a&&l);class m{constructor(t,e={}){if(null==t||"object"==typeof t&&!t.toString)throw new Error(`PostCSS received ${t} instead of CSS string`);if(this.css=t.toString(),"\ufeff"===this.css[0]||"￾"===this.css[0]?(this.hasBOM=!0,this.css=this.css.slice(1)):this.hasBOM=!1,e.from&&(!g||/^\w+:\/\//.test(e.from)||l(e.from)?this.file=e.from:this.file=a(e.from)),g&&d){let t=new f(this.css,e);if(t.text){this.map=t;let e=t.consumer().file;!this.file&&e&&(this.file=this.mapResolve(e));}}this.file||(this.id="<input css "+h(6)+">"),this.map&&(this.map.file=this.from);}fromOffset(t){let e,r;if(this[p])r=this[p];else {let t=this.css.split("\n");r=new Array(t.length);let e=0;for(let n=0,s=t.length;n<s;n++)r[n]=e,e+=t[n].length+1;this[p]=r;}e=r[r.length-1];let n=0;if(t>=e)n=r.length-1;else {let e,s=r.length-2;for(;n<s;)if(e=n+(s-n>>1),t<r[e])s=e-1;else {if(!(t>=r[e+1])){n=e;break}n=e+1;}}return {line:n+1,col:t-r[n]+1}}error(t,e,r,n={}){let s,i,a;if(e&&"object"==typeof e){let t=e,n=r;if("number"==typeof e.offset){let n=this.fromOffset(t.offset);e=n.line,r=n.col;}else e=t.line,r=t.column;if("number"==typeof n.offset){let t=this.fromOffset(n.offset);i=t.line,a=t.col;}else i=n.line,a=n.column;}else if(!r){let t=this.fromOffset(e);e=t.line,r=t.col;}let l=this.origin(e,r,i,a);return s=l?new c(t,void 0===l.endLine?l.line:{line:l.line,column:l.column},void 0===l.endLine?l.column:{line:l.endLine,column:l.endColumn},l.source,l.file,n.plugin):new c(t,void 0===i?e:{line:e,column:r},void 0===i?r:{line:i,column:a},this.css,this.file,n.plugin),s.input={line:e,column:r,endLine:i,endColumn:a,source:this.css},this.file&&(o&&(s.input.url=o(this.file).toString()),s.input.file=this.file),s}origin(t,e,r,n){if(!this.map)return !1;let s,a,h=this.map.consumer(),u=h.originalPositionFor({line:t,column:e});if(!u.source)return !1;"number"==typeof r&&(s=h.originalPositionFor({line:r,column:n})),a=l(u.source)?o(u.source):new URL(u.source,this.map.consumer().sourceRoot||o(this.map.mapFile));let c={url:a.toString(),line:u.line,column:u.column,endLine:s&&s.line,endColumn:s&&s.column};if("file:"===a.protocol){if(!i)throw new Error("file: protocol is not available in this PostCSS build");c.file=i(a);}let f=h.sourceContentFor(u.source);return f&&(c.source=f),c}mapResolve(t){return /^\w+:\/\//.test(t)?t:a(this.map.consumer().sourceRoot||this.map.root||".",t)}get from(){return this.file||this.id}toJSON(){let t={};for(let e of ["hasBOM","css","file","id"])null!=this[e]&&(t[e]=this[e]);return this.map&&(t.map={...this.map},t.map.consumerCache&&(t.map.consumerCache=void 0)),t}}t.exports=m,m.default=m,u&&u.registerInput&&u.registerInput(m);},function(t,e,r){let n=r(3);class s extends n{constructor(t){super(t),this.type="comment";}}t.exports=s,s.default=s;},function(t,e,r){let n=r(28),s=r(16);class i extends Error{constructor(t,e,r,n,s,o){super(t),this.name="CssSyntaxError",this.reason=t,s&&(this.file=s),n&&(this.source=n),o&&(this.plugin=o),void 0!==e&&void 0!==r&&("number"==typeof e?(this.line=e,this.column=r):(this.line=e.line,this.column=e.column,this.endLine=r.line,this.endColumn=r.column)),this.setMessage(),Error.captureStackTrace&&Error.captureStackTrace(this,i);}setMessage(){this.message=this.plugin?this.plugin+": ":"",this.message+=this.file?this.file:"<css input>",void 0!==this.line&&(this.message+=":"+this.line+":"+this.column),this.message+=": "+this.reason;}showSourceCode(t){if(!this.source)return "";let e=this.source;null==t&&(t=n.isColorSupported),s&&t&&(e=s(e));let r,i,o=e.split(/\r?\n/),a=Math.max(this.line-3,0),l=Math.min(this.line+2,o.length),h=String(l).length;if(t){let{bold:t,red:e,gray:s}=n.createColors(!0);r=r=>t(e(r)),i=t=>s(t);}else r=i=t=>t;return o.slice(a,l).map((t,e)=>{let n=a+1+e,s=" "+(" "+n).slice(-h)+" | ";if(n===this.line){let e=i(s.replace(/\d/g," "))+t.slice(0,this.column-1).replace(/[^\t]/g," ");return r(">")+i(s)+t+"\n "+e+r("^")}return " "+i(s)+t}).join("\n")}toString(){let t=this.showSourceCode();return t&&(t="\n\n"+t+"\n"),this.name+": "+this.message+t}}t.exports=i,i.default=i;},function(t,e,r){t.exports.isClean=Symbol("isClean"),t.exports.my=Symbol("my");},function(t,e){},function(t,e){},function(t,e,r){let n,s,i=r(0);class o extends i{constructor(t){super({type:"document",...t}),this.nodes||(this.nodes=[]);}toResult(t={}){return new n(new s,this,t).stringify()}}o.registerLazyResult=t=>{n=t;},o.registerProcessor=t=>{s=t;},t.exports=o,o.default=o;},function(t,e,r){let n=r(24);class s{constructor(t,e,r){this.processor=t,this.messages=[],this.root=e,this.opts=r,this.css=void 0,this.map=void 0;}toString(){return this.css}warn(t,e={}){e.plugin||this.lastPlugin&&this.lastPlugin.postcssPlugin&&(e.plugin=this.lastPlugin.postcssPlugin);let r=new n(t,e);return this.messages.push(r),r}warnings(){return this.messages.filter(t=>"warning"===t.type)}get content(){return this.css}}t.exports=s,s.default=s;},function(t,e,r){let n=r(0),s=r(35),i=r(5);function o(t,e){let r=new i(t,e),n=new s(r);try{n.parse();}catch(t){throw t}return n.root}t.exports=o,o.default=o,n.registerParse(o);},function(t,e,r){let n=r(0);class s extends n{constructor(t){super(t),this.type="atrule";}append(...t){return this.proxyOf.nodes||(this.nodes=[]),super.append(...t)}prepend(...t){return this.proxyOf.nodes||(this.nodes=[]),super.prepend(...t)}}t.exports=s,s.default=s,n.registerAtRule(s);},function(t,e,r){let n=r(0),s=r(25);class i extends n{constructor(t){super(t),this.type="rule",this.nodes||(this.nodes=[]);}get selectors(){return s.comma(this.selector)}set selectors(t){let e=this.selector?this.selector.match(/,\s*/):null,r=e?e[0]:","+this.raw("between","beforeOpen");this.selector=t.join(r);}}t.exports=i,i.default=i,n.registerRule(i);},function(t,e){},function(t,e,r){const n={colon:": ",indent:"    ",beforeDecl:"\n",beforeRule:"\n",beforeOpen:" ",beforeClose:"\n",beforeComment:"\n",after:"\n",emptyBody:"",commentLeft:" ",commentRight:" ",semicolon:!1};class s{constructor(t){this.builder=t;}stringify(t,e){if(!this[t.type])throw new Error("Unknown AST node type "+t.type+". Maybe you need to change PostCSS stringifier.");this[t.type](t,e);}document(t){this.body(t);}root(t){this.body(t),t.raws.after&&this.builder(t.raws.after);}comment(t){let e=this.raw(t,"left","commentLeft"),r=this.raw(t,"right","commentRight");this.builder("/*"+e+t.text+r+"*/",t);}decl(t,e){let r=this.raw(t,"between","colon"),n=t.prop+r+this.rawValue(t,"value");t.important&&(n+=t.raws.important||" !important"),e&&(n+=";"),this.builder(n,t);}rule(t){this.block(t,this.rawValue(t,"selector")),t.raws.ownSemicolon&&this.builder(t.raws.ownSemicolon,t,"end");}atrule(t,e){let r="@"+t.name,n=t.params?this.rawValue(t,"params"):"";if(void 0!==t.raws.afterName?r+=t.raws.afterName:n&&(r+=" "),t.nodes)this.block(t,r+n);else {let s=(t.raws.between||"")+(e?";":"");this.builder(r+n+s,t);}}body(t){let e=t.nodes.length-1;for(;e>0&&"comment"===t.nodes[e].type;)e-=1;let r=this.raw(t,"semicolon");for(let n=0;n<t.nodes.length;n++){let s=t.nodes[n],i=this.raw(s,"before");i&&this.builder(i),this.stringify(s,e!==n||r);}}block(t,e){let r,n=this.raw(t,"between","beforeOpen");this.builder(e+n+"{",t,"start"),t.nodes&&t.nodes.length?(this.body(t),r=this.raw(t,"after")):r=this.raw(t,"after","emptyBody"),r&&this.builder(r),this.builder("}",t,"end");}raw(t,e,r){let s;if(r||(r=e),e&&(s=t.raws[e],void 0!==s))return s;let i=t.parent;if("before"===r){if(!i||"root"===i.type&&i.first===t)return "";if(i&&"document"===i.type)return ""}if(!i)return n[r];let o=t.root();if(o.rawCache||(o.rawCache={}),void 0!==o.rawCache[r])return o.rawCache[r];if("before"===r||"after"===r)return this.beforeAfter(t,r);{let n="raw"+((a=r)[0].toUpperCase()+a.slice(1));this[n]?s=this[n](o,t):o.walk(t=>{if(s=t.raws[e],void 0!==s)return !1});}var a;return void 0===s&&(s=n[r]),o.rawCache[r]=s,s}rawSemicolon(t){let e;return t.walk(t=>{if(t.nodes&&t.nodes.length&&"decl"===t.last.type&&(e=t.raws.semicolon,void 0!==e))return !1}),e}rawEmptyBody(t){let e;return t.walk(t=>{if(t.nodes&&0===t.nodes.length&&(e=t.raws.after,void 0!==e))return !1}),e}rawIndent(t){if(t.raws.indent)return t.raws.indent;let e;return t.walk(r=>{let n=r.parent;if(n&&n!==t&&n.parent&&n.parent===t&&void 0!==r.raws.before){let t=r.raws.before.split("\n");return e=t[t.length-1],e=e.replace(/\S/g,""),!1}}),e}rawBeforeComment(t,e){let r;return t.walkComments(t=>{if(void 0!==t.raws.before)return r=t.raws.before,r.includes("\n")&&(r=r.replace(/[^\n]+$/,"")),!1}),void 0===r?r=this.raw(e,null,"beforeDecl"):r&&(r=r.replace(/\S/g,"")),r}rawBeforeDecl(t,e){let r;return t.walkDecls(t=>{if(void 0!==t.raws.before)return r=t.raws.before,r.includes("\n")&&(r=r.replace(/[^\n]+$/,"")),!1}),void 0===r?r=this.raw(e,null,"beforeRule"):r&&(r=r.replace(/\S/g,"")),r}rawBeforeRule(t){let e;return t.walk(r=>{if(r.nodes&&(r.parent!==t||t.first!==r)&&void 0!==r.raws.before)return e=r.raws.before,e.includes("\n")&&(e=e.replace(/[^\n]+$/,"")),!1}),e&&(e=e.replace(/\S/g,"")),e}rawBeforeClose(t){let e;return t.walk(t=>{if(t.nodes&&t.nodes.length>0&&void 0!==t.raws.after)return e=t.raws.after,e.includes("\n")&&(e=e.replace(/[^\n]+$/,"")),!1}),e&&(e=e.replace(/\S/g,"")),e}rawBeforeOpen(t){let e;return t.walk(t=>{if("decl"!==t.type&&(e=t.raws.between,void 0!==e))return !1}),e}rawColon(t){let e;return t.walkDecls(t=>{if(void 0!==t.raws.between)return e=t.raws.between.replace(/[^\s:]/g,""),!1}),e}beforeAfter(t,e){let r;r="decl"===t.type?this.raw(t,null,"beforeDecl"):"comment"===t.type?this.raw(t,null,"beforeComment"):"before"===e?this.raw(t,null,"beforeRule"):this.raw(t,null,"beforeClose");let n=t.parent,s=0;for(;n&&"root"!==n.type;)s+=1,n=n.parent;if(r.includes("\n")){let e=this.raw(t,null,"indent");if(e.length)for(let t=0;t<s;t++)r+=e;}return r}rawValue(t,e){let r=t[e],n=t.raws[e];return n&&n.value===r?n.raw:r}}t.exports=s,s.default=s;},function(t,e,r){let{isClean:n,my:s}=r(8),i=r(19),o=r(4),a=r(0),l=r(11),h=(r(23),r(12)),u=r(13),c=r(1);const f={document:"Document",root:"Root",atrule:"AtRule",rule:"Rule",decl:"Declaration",comment:"Comment"},p={postcssPlugin:!0,prepare:!0,Once:!0,Document:!0,Root:!0,Declaration:!0,Rule:!0,AtRule:!0,Comment:!0,DeclarationExit:!0,RuleExit:!0,AtRuleExit:!0,CommentExit:!0,RootExit:!0,DocumentExit:!0,OnceExit:!0},d={postcssPlugin:!0,prepare:!0,Once:!0};function g(t){return "object"==typeof t&&"function"==typeof t.then}function m(t){let e=!1,r=f[t.type];return "decl"===t.type?e=t.prop.toLowerCase():"atrule"===t.type&&(e=t.name.toLowerCase()),e&&t.append?[r,r+"-"+e,0,r+"Exit",r+"Exit-"+e]:e?[r,r+"-"+e,r+"Exit",r+"Exit-"+e]:t.append?[r,0,r+"Exit"]:[r,r+"Exit"]}function y(t){let e;return e="document"===t.type?["Document",0,"DocumentExit"]:"root"===t.type?["Root",0,"RootExit"]:m(t),{node:t,events:e,eventIndex:0,visitors:[],visitorIndex:0,iterator:0}}function w(t){return t[n]=!1,t.nodes&&t.nodes.forEach(t=>w(t)),t}let b={};class v{constructor(t,e,r){let n;if(this.stringified=!1,this.processed=!1,"object"!=typeof e||null===e||"root"!==e.type&&"document"!==e.type)if(e instanceof v||e instanceof h)n=w(e.root),e.map&&(void 0===r.map&&(r.map={}),r.map.inline||(r.map.inline=!1),r.map.prev=e.map);else {let t=u;r.syntax&&(t=r.syntax.parse),r.parser&&(t=r.parser),t.parse&&(t=t.parse);try{n=t(e,r);}catch(t){this.processed=!0,this.error=t;}n&&!n[s]&&a.rebuild(n);}else n=w(e);this.result=new h(t,n,r),this.helpers={...b,result:this.result,postcss:b},this.plugins=this.processor.plugins.map(t=>"object"==typeof t&&t.prepare?{...t,...t.prepare(this.result)}:t);}get[Symbol.toStringTag](){return "LazyResult"}get processor(){return this.result.processor}get opts(){return this.result.opts}get css(){return this.stringify().css}get content(){return this.stringify().content}get map(){return this.stringify().map}get root(){return this.sync().root}get messages(){return this.sync().messages}warnings(){return this.sync().warnings()}toString(){return this.css}then(t,e){return this.async().then(t,e)}catch(t){return this.async().catch(t)}finally(t){return this.async().then(t,t)}async(){return this.error?Promise.reject(this.error):this.processed?Promise.resolve(this.result):(this.processing||(this.processing=this.runAsync()),this.processing)}sync(){if(this.error)throw this.error;if(this.processed)return this.result;if(this.processed=!0,this.processing)throw this.getAsyncError();for(let t of this.plugins){if(g(this.runOnRoot(t)))throw this.getAsyncError()}if(this.prepareVisitors(),this.hasListener){let t=this.result.root;for(;!t[n];)t[n]=!0,this.walkSync(t);if(this.listeners.OnceExit)if("document"===t.type)for(let e of t.nodes)this.visitSync(this.listeners.OnceExit,e);else this.visitSync(this.listeners.OnceExit,t);}return this.result}stringify(){if(this.error)throw this.error;if(this.stringified)return this.result;this.stringified=!0,this.sync();let t=this.result.opts,e=o;t.syntax&&(e=t.syntax.stringify),t.stringifier&&(e=t.stringifier),e.stringify&&(e=e.stringify);let r=new i(e,this.result.root,this.result.opts).generate();return this.result.css=r[0],this.result.map=r[1],this.result}walkSync(t){t[n]=!0;let e=m(t);for(let r of e)if(0===r)t.nodes&&t.each(t=>{t[n]||this.walkSync(t);});else {let e=this.listeners[r];if(e&&this.visitSync(e,t.toProxy()))return}}visitSync(t,e){for(let[r,n]of t){let t;this.result.lastPlugin=r;try{t=n(e,this.helpers);}catch(t){throw this.handleError(t,e.proxyOf)}if("root"!==e.type&&"document"!==e.type&&!e.parent)return !0;if(g(t))throw this.getAsyncError()}}runOnRoot(t){this.result.lastPlugin=t;try{if("object"==typeof t&&t.Once){if("document"===this.result.root.type){let e=this.result.root.nodes.map(e=>t.Once(e,this.helpers));return g(e[0])?Promise.all(e):e}return t.Once(this.result.root,this.helpers)}if("function"==typeof t)return t(this.result.root,this.result)}catch(t){throw this.handleError(t)}}getAsyncError(){throw new Error("Use process(css).then(cb) to work with async plugins")}handleError(t,e){let r=this.result.lastPlugin;try{e&&e.addToError(t),this.error=t,"CssSyntaxError"!==t.name||t.plugin?r.postcssVersion:(t.plugin=r.postcssPlugin,t.setMessage());}catch(t){console&&console.error&&console.error(t);}return t}async runAsync(){this.plugin=0;for(let t=0;t<this.plugins.length;t++){let e=this.plugins[t],r=this.runOnRoot(e);if(g(r))try{await r;}catch(t){throw this.handleError(t)}}if(this.prepareVisitors(),this.hasListener){let t=this.result.root;for(;!t[n];){t[n]=!0;let e=[y(t)];for(;e.length>0;){let t=this.visitTick(e);if(g(t))try{await t;}catch(t){let r=e[e.length-1].node;throw this.handleError(t,r)}}}if(this.listeners.OnceExit)for(let[e,r]of this.listeners.OnceExit){this.result.lastPlugin=e;try{if("document"===t.type){let e=t.nodes.map(t=>r(t,this.helpers));await Promise.all(e);}else await r(t,this.helpers);}catch(t){throw this.handleError(t)}}}return this.processed=!0,this.stringify()}prepareVisitors(){this.listeners={};let t=(t,e,r)=>{this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push([t,r]);};for(let e of this.plugins)if("object"==typeof e)for(let r in e){if(!p[r]&&/^[A-Z]/.test(r))throw new Error(`Unknown event ${r} in ${e.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`);if(!d[r])if("object"==typeof e[r])for(let n in e[r])t(e,"*"===n?r:r+"-"+n.toLowerCase(),e[r][n]);else "function"==typeof e[r]&&t(e,r,e[r]);}this.hasListener=Object.keys(this.listeners).length>0;}visitTick(t){let e=t[t.length-1],{node:r,visitors:s}=e;if("root"!==r.type&&"document"!==r.type&&!r.parent)return void t.pop();if(s.length>0&&e.visitorIndex<s.length){let[t,n]=s[e.visitorIndex];e.visitorIndex+=1,e.visitorIndex===s.length&&(e.visitors=[],e.visitorIndex=0),this.result.lastPlugin=t;try{return n(r.toProxy(),this.helpers)}catch(t){throw this.handleError(t,r)}}if(0!==e.iterator){let s,i=e.iterator;for(;s=r.nodes[r.indexes[i]];)if(r.indexes[i]+=1,!s[n])return s[n]=!0,void t.push(y(s));e.iterator=0,delete r.indexes[i];}let i=e.events;for(;e.eventIndex<i.length;){let t=i[e.eventIndex];if(e.eventIndex+=1,0===t)return void(r.nodes&&r.nodes.length&&(r[n]=!0,e.iterator=r.getIterator()));if(this.listeners[t])return void(e.visitors=this.listeners[t])}t.pop();}}v.registerPostcss=t=>{b=t;},t.exports=v,v.default=v,c.registerLazyResult(v),l.registerLazyResult(v);},function(t,e,r){(function(e){let{SourceMapConsumer:n,SourceMapGenerator:s}=r(9),{dirname:i,resolve:o,relative:a,sep:l}=r(10),{pathToFileURL:h}=r(21),u=r(5),c=Boolean(n&&s),f=Boolean(i&&o&&a&&l);t.exports=class{constructor(t,e,r,n){this.stringify=t,this.mapOpts=r.map||{},this.root=e,this.opts=r,this.css=n;}isMap(){return void 0!==this.opts.map?!!this.opts.map:this.previous().length>0}previous(){if(!this.previousMaps)if(this.previousMaps=[],this.root)this.root.walk(t=>{if(t.source&&t.source.input.map){let e=t.source.input.map;this.previousMaps.includes(e)||this.previousMaps.push(e);}});else {let t=new u(this.css,this.opts);t.map&&this.previousMaps.push(t.map);}return this.previousMaps}isInline(){if(void 0!==this.mapOpts.inline)return this.mapOpts.inline;let t=this.mapOpts.annotation;return (void 0===t||!0===t)&&(!this.previous().length||this.previous().some(t=>t.inline))}isSourcesContent(){return void 0!==this.mapOpts.sourcesContent?this.mapOpts.sourcesContent:!this.previous().length||this.previous().some(t=>t.withContent())}clearAnnotation(){if(!1!==this.mapOpts.annotation)if(this.root){let t;for(let e=this.root.nodes.length-1;e>=0;e--)t=this.root.nodes[e],"comment"===t.type&&0===t.text.indexOf("# sourceMappingURL=")&&this.root.removeChild(e);}else this.css&&(this.css=this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm,""));}setSourcesContent(){let t={};if(this.root)this.root.walk(e=>{if(e.source){let r=e.source.input.from;r&&!t[r]&&(t[r]=!0,this.map.setSourceContent(this.toUrl(this.path(r)),e.source.input.css));}});else if(this.css){let t=this.opts.from?this.toUrl(this.path(this.opts.from)):"<no source>";this.map.setSourceContent(t,this.css);}}applyPrevMaps(){for(let t of this.previous()){let e,r=this.toUrl(this.path(t.file)),s=t.root||i(t.file);!1===this.mapOpts.sourcesContent?(e=new n(t.text),e.sourcesContent&&(e.sourcesContent=e.sourcesContent.map(()=>null))):e=t.consumer(),this.map.applySourceMap(e,r,this.toUrl(this.path(s)));}}isAnnotation(){return !!this.isInline()||(void 0!==this.mapOpts.annotation?this.mapOpts.annotation:!this.previous().length||this.previous().some(t=>t.annotation))}toBase64(t){return e?e.from(t).toString("base64"):window.btoa(unescape(encodeURIComponent(t)))}addAnnotation(){let t;t=this.isInline()?"data:application/json;base64,"+this.toBase64(this.map.toString()):"string"==typeof this.mapOpts.annotation?this.mapOpts.annotation:"function"==typeof this.mapOpts.annotation?this.mapOpts.annotation(this.opts.to,this.root):this.outputFile()+".map";let e="\n";this.css.includes("\r\n")&&(e="\r\n"),this.css+=e+"/*# sourceMappingURL="+t+" */";}outputFile(){return this.opts.to?this.path(this.opts.to):this.opts.from?this.path(this.opts.from):"to.css"}generateMap(){if(this.root)this.generateString();else if(1===this.previous().length){let t=this.previous()[0].consumer();t.file=this.outputFile(),this.map=s.fromSourceMap(t);}else this.map=new s({file:this.outputFile()}),this.map.addMapping({source:this.opts.from?this.toUrl(this.path(this.opts.from)):"<no source>",generated:{line:1,column:0},original:{line:1,column:0}});return this.isSourcesContent()&&this.setSourcesContent(),this.root&&this.previous().length>0&&this.applyPrevMaps(),this.isAnnotation()&&this.addAnnotation(),this.isInline()?[this.css]:[this.css,this.map]}path(t){if(0===t.indexOf("<"))return t;if(/^\w+:\/\//.test(t))return t;if(this.mapOpts.absolute)return t;let e=this.opts.to?i(this.opts.to):".";return "string"==typeof this.mapOpts.annotation&&(e=i(o(e,this.mapOpts.annotation))),t=a(e,t)}toUrl(t){return "\\"===l&&(t=t.replace(/\\/g,"/")),encodeURI(t).replace(/[#?]/g,encodeURIComponent)}sourcePath(t){if(this.mapOpts.from)return this.toUrl(this.mapOpts.from);if(this.mapOpts.absolute){if(h)return h(t.source.input.from).toString();throw new Error("`map.absolute` option is not available in this PostCSS build")}return this.toUrl(this.path(t.source.input.from))}generateString(){this.css="",this.map=new s({file:this.outputFile()});let t,e,r=1,n=1,i={source:"",generated:{line:0,column:0},original:{line:0,column:0}};this.stringify(this.root,(s,o,a)=>{if(this.css+=s,o&&"end"!==a&&(i.generated.line=r,i.generated.column=n-1,o.source&&o.source.start?(i.source=this.sourcePath(o),i.original.line=o.source.start.line,i.original.column=o.source.start.column-1,this.map.addMapping(i)):(i.source="<no source>",i.original.line=1,i.original.column=0,this.map.addMapping(i))),t=s.match(/\n/g),t?(r+=t.length,e=s.lastIndexOf("\n"),n=s.length-e):n+=s.length,o&&"start"!==a){let t=o.parent||{raws:{}};("decl"!==o.type||o!==t.last||t.raws.semicolon)&&(o.source&&o.source.end?(i.source=this.sourcePath(o),i.original.line=o.source.end.line,i.original.column=o.source.end.column-1,i.generated.line=r,i.generated.column=n-2,this.map.addMapping(i)):(i.source="<no source>",i.original.line=1,i.original.column=0,i.generated.line=r,i.generated.column=n-1,this.map.addMapping(i)));}});}generate(){if(this.clearAnnotation(),f&&c&&this.isMap())return this.generateMap();{let t="";return this.stringify(this.root,e=>{t+=e;}),[t]}}};}).call(this,r(20).Buffer);},function(t,e,r){(function(t){
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <http://feross.org>
	 * @license  MIT
	 */
	var n=r(30),s=r(31),i=r(32);function o(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=l.prototype:(null===t&&(t=new l(e)),t.length=e),t}function l(t,e,r){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return c(this,t)}return h(this,t,e,r)}function h(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);l.TYPED_ARRAY_SUPPORT?(t=e).__proto__=l.prototype:t=f(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!l.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),s=(t=a(t,n)).write(e,r);s!==n&&(t=t.slice(0,s));return t}(t,e,r):function(t,e){if(l.isBuffer(e)){var r=0|p(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return "number"!=typeof e.length||(n=e.length)!=n?a(t,0):f(t,e);if("Buffer"===e.type&&i(e.data))return f(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,e){if(u(e),t=a(t,e<0?0:0|p(e)),!l.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|p(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(l.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(t).length;default:if(n)return F(t).length;e=(""+e).toLowerCase(),n=!0;}}function g(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(e>>>=0))return "";for(t||(t="utf8");;)switch(t){case"hex":return k(this,e,r);case"utf8":case"utf-8":return O(this,e,r);case"ascii":return R(this,e,r);case"latin1":case"binary":return P(this,e,r);case"base64":return C(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0;}}function m(t,e,r){var n=t[e];t[e]=t[r],t[r]=n;}function y(t,e,r,n,s){if(0===t.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=s?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(s)return -1;r=t.length-1;}else if(r<0){if(!s)return -1;r=0;}if("string"==typeof e&&(e=l.from(e,n)),l.isBuffer(e))return 0===e.length?-1:w(t,e,r,n,s);if("number"==typeof e)return e&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,n,s);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,n,s){var i,o=1,a=t.length,l=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return -1;o=2,a/=2,l/=2,r/=2;}function h(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(s){var u=-1;for(i=r;i<a;i++)if(h(t,i)===h(e,-1===u?0:i-u)){if(-1===u&&(u=i),i-u+1===l)return u*o}else -1!==u&&(i-=i-u),u=-1;}else for(r+l>a&&(r=a-l),i=r;i>=0;i--){for(var c=!0,f=0;f<l;f++)if(h(t,i+f)!==h(e,f)){c=!1;break}if(c)return i}return -1}function b(t,e,r,n){r=Number(r)||0;var s=t.length-r;n?(n=Number(n))>s&&(n=s):n=s;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var o=0;o<n;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[r+o]=a;}return o}function v(t,e,r,n){return N(F(e,t.length-r),t,r,n)}function x(t,e,r,n){return N(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function A(t,e,r,n){return x(t,e,r,n)}function E(t,e,r,n){return N(z(e),t,r,n)}function S(t,e,r,n){return N(function(t,e){for(var r,n,s,i=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,s=r%256,i.push(s),i.push(n);return i}(e,t.length-r),t,r,n)}function C(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function O(t,e,r){r=Math.min(t.length,r);for(var n=[],s=e;s<r;){var i,o,a,l,h=t[s],u=null,c=h>239?4:h>223?3:h>191?2:1;if(s+c<=r)switch(c){case 1:h<128&&(u=h);break;case 2:128==(192&(i=t[s+1]))&&(l=(31&h)<<6|63&i)>127&&(u=l);break;case 3:i=t[s+1],o=t[s+2],128==(192&i)&&128==(192&o)&&(l=(15&h)<<12|(63&i)<<6|63&o)>2047&&(l<55296||l>57343)&&(u=l);break;case 4:i=t[s+1],o=t[s+2],a=t[s+3],128==(192&i)&&128==(192&o)&&128==(192&a)&&(l=(15&h)<<18|(63&i)<<12|(63&o)<<6|63&a)>65535&&l<1114112&&(u=l);}null===u?(u=65533,c=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),s+=c;}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=4096));return r}(n)}e.Buffer=l,e.SlowBuffer=function(t){+t!=t&&(t=0);return l.alloc(+t)},e.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return !1}}(),e.kMaxLength=o(),l.poolSize=8192,l._augment=function(t){return t.__proto__=l.prototype,t},l.from=function(t,e,r){return h(null,t,e,r)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(t,e,r){return function(t,e,r,n){return u(e),e<=0?a(t,e):void 0!==r?"string"==typeof n?a(t,e).fill(r,n):a(t,e).fill(r):a(t,e)}(null,t,e,r)},l.allocUnsafe=function(t){return c(null,t)},l.allocUnsafeSlow=function(t){return c(null,t)},l.isBuffer=function(t){return !(null==t||!t._isBuffer)},l.compare=function(t,e){if(!l.isBuffer(t)||!l.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,s=0,i=Math.min(r,n);s<i;++s)if(t[s]!==e[s]){r=t[s],n=e[s];break}return r<n?-1:n<r?1:0},l.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},l.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return l.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=l.allocUnsafe(e),s=0;for(r=0;r<t.length;++r){var o=t[r];if(!l.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,s),s+=o.length;}return n},l.byteLength=d,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},l.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},l.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},l.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?O(this,0,t):g.apply(this,arguments)},l.prototype.equals=function(t){if(!l.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===l.compare(this,t)},l.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},l.prototype.compare=function(t,e,r,n,s){if(!l.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),e<0||r>t.length||n<0||s>this.length)throw new RangeError("out of range index");if(n>=s&&e>=r)return 0;if(n>=s)return -1;if(e>=r)return 1;if(this===t)return 0;for(var i=(s>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(i,o),h=this.slice(n,s),u=t.slice(e,r),c=0;c<a;++c)if(h[c]!==u[c]){i=h[c],o=u[c];break}return i<o?-1:o<i?1:0},l.prototype.includes=function(t,e,r){return -1!==this.indexOf(t,e,r)},l.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},l.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},l.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else {if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var s=this.length-e;if((void 0===r||r>s)&&(r=s),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":return x(this,t,e,r);case"latin1":case"binary":return A(this,t,e,r);case"base64":return E(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0;}},l.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function R(t,e,r){var n="";r=Math.min(t.length,r);for(var s=e;s<r;++s)n+=String.fromCharCode(127&t[s]);return n}function P(t,e,r){var n="";r=Math.min(t.length,r);for(var s=e;s<r;++s)n+=String.fromCharCode(t[s]);return n}function k(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var s="",i=e;i<r;++i)s+=Y(t[i]);return s}function _(t,e,r){for(var n=t.slice(e,r),s="",i=0;i<n.length;i+=2)s+=String.fromCharCode(n[i]+256*n[i+1]);return s}function T(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function B(t,e,r,n,s,i){if(!l.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var s=0,i=Math.min(t.length-r,2);s<i;++s)t[r+s]=(e&255<<8*(n?s:1-s))>>>8*(n?s:1-s);}function M(t,e,r,n){e<0&&(e=4294967295+e+1);for(var s=0,i=Math.min(t.length-r,4);s<i;++s)t[r+s]=e>>>8*(n?s:3-s)&255;}function I(t,e,r,n,s,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,n,i){return i||I(t,0,r,4),s.write(t,e,r,n,23,4),r+4}function D(t,e,r,n,i){return i||I(t,0,r,8),s.write(t,e,r,n,52,8),r+8}l.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),l.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=l.prototype;else {var s=e-t;r=new l(s,void 0);for(var i=0;i<s;++i)r[i]=this[i+t];}return r},l.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=this[t],s=1,i=0;++i<e&&(s*=256);)n+=this[t+i]*s;return n},l.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=this[t+--e],s=1;e>0&&(s*=256);)n+=this[t+--e]*s;return n},l.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},l.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},l.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},l.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},l.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},l.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=this[t],s=1,i=0;++i<e&&(s*=256);)n+=this[t+i]*s;return n>=(s*=128)&&(n-=Math.pow(2,8*e)),n},l.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||T(t,e,this.length);for(var n=e,s=1,i=this[t+--n];n>0&&(s*=256);)i+=this[t+--n]*s;return i>=(s*=128)&&(i-=Math.pow(2,8*e)),i},l.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},l.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},l.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},l.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),s.read(this,t,!0,23,4)},l.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),s.read(this,t,!1,23,4)},l.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),s.read(this,t,!0,52,8)},l.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),s.read(this,t,!1,52,8)},l.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||B(this,t,e,r,Math.pow(2,8*r)-1,0);var s=1,i=0;for(this[e]=255&t;++i<r&&(s*=256);)this[e+i]=t/s&255;return e+r},l.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||B(this,t,e,r,Math.pow(2,8*r)-1,0);var s=r-1,i=1;for(this[e+s]=255&t;--s>=0&&(i*=256);)this[e+s]=t/i&255;return e+r},l.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,1,255,0),l.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},l.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},l.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},l.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):M(this,t,e,!0),e+4},l.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},l.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var s=Math.pow(2,8*r-1);B(this,t,e,r,s-1,-s);}var i=0,o=1,a=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/o>>0)-a&255;return e+r},l.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var s=Math.pow(2,8*r-1);B(this,t,e,r,s-1,-s);}var i=r-1,o=1,a=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/o>>0)-a&255;return e+r},l.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,1,127,-128),l.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},l.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):U(this,t,e,!0),e+2},l.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):U(this,t,e,!1),e+2},l.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):M(this,t,e,!0),e+4},l.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||B(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):M(this,t,e,!1),e+4},l.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},l.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},l.prototype.writeDoubleLE=function(t,e,r){return D(this,t,e,!0,r)},l.prototype.writeDoubleBE=function(t,e,r){return D(this,t,e,!1,r)},l.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var s,i=n-r;if(this===t&&r<e&&e<n)for(s=i-1;s>=0;--s)t[s+e]=this[s+r];else if(i<1e3||!l.TYPED_ARRAY_SUPPORT)for(s=0;s<i;++s)t[s+e]=this[s+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},l.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var s=t.charCodeAt(0);s<256&&(t=s);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!l.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else "number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else {var o=l.isBuffer(t)?t:F(new l(t,n).toString()),a=o.length;for(i=0;i<r-e;++i)this[i+e]=o[i%a];}return this};var j=/[^+\/0-9A-Za-z-_]/g;function Y(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var r;e=e||1/0;for(var n=t.length,s=null,i=[],o=0;o<n;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!s){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&i.push(239,191,189);continue}s=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320);}else s&&(e-=3)>-1&&i.push(239,191,189);if(s=null,r<128){if((e-=1)<0)break;i.push(r);}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128);}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return i}function z(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(j,"")).length<2)return "";for(;t.length%4!=0;)t+="=";return t}(t))}function N(t,e,r,n){for(var s=0;s<n&&!(s+r>=e.length||s>=t.length);++s)e[s+r]=t[s];return s}}).call(this,r(29));},function(t,e){},function(t,e,r){(function(e){let{SourceMapConsumer:n,SourceMapGenerator:s}=r(9),{existsSync:i,readFileSync:o}=r(34),{dirname:a,join:l}=r(10);class h{constructor(t,e){if(!1===e.map)return;this.loadAnnotation(t),this.inline=this.startWith(this.annotation,"data:");let r=e.map?e.map.prev:void 0,n=this.loadMap(e.from,r);!this.mapFile&&e.from&&(this.mapFile=e.from),this.mapFile&&(this.root=a(this.mapFile)),n&&(this.text=n);}consumer(){return this.consumerCache||(this.consumerCache=new n(this.text)),this.consumerCache}withContent(){return !!(this.consumer().sourcesContent&&this.consumer().sourcesContent.length>0)}startWith(t,e){return !!t&&t.substr(0,e.length)===e}getAnnotationURL(t){return t.replace(/^\/\*\s*# sourceMappingURL=/,"").trim()}loadAnnotation(t){let e=t.match(/\/\*\s*# sourceMappingURL=/gm);if(!e)return;let r=t.lastIndexOf(e.pop()),n=t.indexOf("*/",r);r>-1&&n>-1&&(this.annotation=this.getAnnotationURL(t.substring(r,n)));}decodeInline(t){if(/^data:application\/json;charset=utf-?8,/.test(t)||/^data:application\/json,/.test(t))return decodeURIComponent(t.substr(RegExp.lastMatch.length));if(/^data:application\/json;charset=utf-?8;base64,/.test(t)||/^data:application\/json;base64,/.test(t))return r=t.substr(RegExp.lastMatch.length),e?e.from(r,"base64").toString():window.atob(r);var r;let n=t.match(/data:application\/json;([^,]+),/)[1];throw new Error("Unsupported source map encoding "+n)}loadFile(t){if(this.root=a(t),i(t))return this.mapFile=t,o(t,"utf-8").toString().trim()}loadMap(t,e){if(!1===e)return !1;if(e){if("string"==typeof e)return e;if("function"!=typeof e){if(e instanceof n)return s.fromSourceMap(e).toString();if(e instanceof s)return e.toString();if(this.isMap(e))return JSON.stringify(e);throw new Error("Unsupported previous source map format: "+e.toString())}{let r=e(t);if(r){let t=this.loadFile(r);if(!t)throw new Error("Unable to load previous source map: "+r.toString());return t}}}else {if(this.inline)return this.decodeInline(this.annotation);if(this.annotation){let e=this.annotation;return t&&(e=l(a(t),e)),this.loadFile(e)}}}isMap(t){return "object"==typeof t&&("string"==typeof t.mappings||"string"==typeof t._mappings||Array.isArray(t.sections))}}t.exports=h,h.default=h;}).call(this,r(20).Buffer);},function(t,e,r){let n={};t.exports=function(t){n[t]||(n[t]=!0,"undefined"!=typeof console&&console.warn&&console.warn(t));};},function(t,e,r){class n{constructor(t,e={}){if(this.type="warning",this.text=t,e.node&&e.node.source){let t=e.node.rangeBy(e);this.line=t.start.line,this.column=t.start.column,this.endLine=t.end.line,this.endColumn=t.end.column;}for(let t in e)this[t]=e[t];}toString(){return this.node?this.node.error(this.text,{plugin:this.plugin,index:this.index,word:this.word}).message:this.plugin?this.plugin+": "+this.text:this.text}}t.exports=n,n.default=n;},function(t,e,r){let n={split(t,e,r){let n=[],s="",i=!1,o=0,a=!1,l="",h=!1;for(let r of t)h?h=!1:"\\"===r?h=!0:a?r===l&&(a=!1):'"'===r||"'"===r?(a=!0,l=r):"("===r?o+=1:")"===r?o>0&&(o-=1):0===o&&e.includes(r)&&(i=!0),i?(""!==s&&n.push(s.trim()),s="",i=!1):s+=r;return (r||""!==s)&&n.push(s.trim()),n},space:t=>n.split(t,[" ","\n","\t"]),comma:t=>n.split(t,[","],!0)};t.exports=n,n.default=n;},function(t,e,r){(function(e){let n=r(7),s=r(2),i=r(18),o=r(0),a=r(37),l=r(4),h=r(39),u=r(11),c=r(24),f=r(6),p=r(14),d=r(12),g=r(5),m=r(13),y=r(25),w=r(15),b=r(1),v=r(3);function x(...t){return 1===t.length&&Array.isArray(t[0])&&(t=t[0]),new a(t)}x.plugin=function(t,r){let n,s=!1;function i(...n){console&&console.warn&&!s&&(s=!0,console.warn(t+": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"),e.env.LANG&&e.env.LANG.startsWith("cn")&&console.warn(t+": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226"));let i=r(...n);return i.postcssPlugin=t,i.postcssVersion=(new a).version,i}return Object.defineProperty(i,"postcss",{get:()=>(n||(n=i()),n)}),i.process=function(t,e,r){return x([i(r)]).process(t,e)},i},x.stringify=l,x.parse=m,x.fromJSON=h,x.list=y,x.comment=t=>new f(t),x.atRule=t=>new p(t),x.decl=t=>new s(t),x.rule=t=>new w(t),x.root=t=>new b(t),x.document=t=>new u(t),x.CssSyntaxError=n,x.Declaration=s,x.Container=o,x.Processor=a,x.Document=u,x.Comment=f,x.Warning=c,x.AtRule=p,x.Result=d,x.Input=g,x.Rule=w,x.Root=b,x.Node=v,i.registerPostcss(x),t.exports=x,x.default=x;}).call(this,r(27));},function(t,e){var r,n,s=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i;}catch(t){r=i;}try{n="function"==typeof clearTimeout?clearTimeout:o;}catch(t){n=o;}}();var l,h=[],u=!1,c=-1;function f(){u&&l&&(u=!1,l.length?h=l.concat(h):c=-1,h.length&&p());}function p(){if(!u){var t=a(f);u=!0;for(var e=h.length;e;){for(l=h,h=[];++c<e;)l&&l[c].run();c=-1,e=h.length;}l=null,u=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t);}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t);}}function d(t,e){this.fun=t,this.array=e;}function g(){}s.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];h.push(new d(t,e)),1!==h.length||u||a(p);},d.prototype.run=function(){this.fun.apply(null,this.array);},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=g,s.addListener=g,s.once=g,s.off=g,s.removeListener=g,s.removeAllListeners=g,s.emit=g,s.prependListener=g,s.prependOnceListener=g,s.listeners=function(t){return []},s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return "/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0};},function(t,e){var r=String,n=function(){return {isColorSupported:!1,reset:r,bold:r,dim:r,italic:r,underline:r,inverse:r,hidden:r,strikethrough:r,black:r,red:r,green:r,yellow:r,blue:r,magenta:r,cyan:r,white:r,gray:r,bgBlack:r,bgRed:r,bgGreen:r,bgYellow:r,bgBlue:r,bgMagenta:r,bgCyan:r,bgWhite:r}};t.exports=n(),t.exports.createColors=n;},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")();}catch(t){"object"==typeof window&&(r=window);}t.exports=r;},function(t,e,r){e.byteLength=function(t){var e=h(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,n=h(t),o=n[0],a=n[1],l=new i(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),u=0,c=a>0?o-4:o;for(r=0;r<c;r+=4)e=s[t.charCodeAt(r)]<<18|s[t.charCodeAt(r+1)]<<12|s[t.charCodeAt(r+2)]<<6|s[t.charCodeAt(r+3)],l[u++]=e>>16&255,l[u++]=e>>8&255,l[u++]=255&e;2===a&&(e=s[t.charCodeAt(r)]<<2|s[t.charCodeAt(r+1)]>>4,l[u++]=255&e);1===a&&(e=s[t.charCodeAt(r)]<<10|s[t.charCodeAt(r+1)]<<4|s[t.charCodeAt(r+2)]>>2,l[u++]=e>>8&255,l[u++]=255&e);return l},e.fromByteArray=function(t){for(var e,r=t.length,s=r%3,i=[],o=0,a=r-s;o<a;o+=16383)i.push(u(t,o,o+16383>a?a:o+16383));1===s?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===s&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return i.join("")};for(var n=[],s=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,l=o.length;a<l;++a)n[a]=o[a],s[o.charCodeAt(a)]=a;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return -1===r&&(r=e),[r,r===e?0:4-r%4]}function u(t,e,r){for(var s,i,o=[],a=e;a<r;a+=3)s=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(n[(i=s)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return o.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63;},function(t,e){
	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	e.read=function(t,e,r,n,s){var i,o,a=8*s-n-1,l=(1<<a)-1,h=l>>1,u=-7,c=r?s-1:0,f=r?-1:1,p=t[e+c];for(c+=f,i=p&(1<<-u)-1,p>>=-u,u+=a;u>0;i=256*i+t[e+c],c+=f,u-=8);for(o=i&(1<<-u)-1,i>>=-u,u+=n;u>0;o=256*o+t[e+c],c+=f,u-=8);if(0===i)i=1-h;else {if(i===l)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),i-=h;}return (p?-1:1)*o*Math.pow(2,i-n)},e.write=function(t,e,r,n,s,i){var o,a,l,h=8*i-s-1,u=(1<<h)-1,c=u>>1,f=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-o))<1&&(o--,l*=2),(e+=o+c>=1?f/l:f*Math.pow(2,1-c))*l>=2&&(o++,l/=2),o+c>=u?(a=0,o=u):o+c>=1?(a=(e*l-1)*Math.pow(2,s),o+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,s),o=0));s>=8;t[r+p]=255&a,p+=d,a/=256,s-=8);for(o=o<<s|a,h+=s;h>0;t[r+p]=255&o,p+=d,o/=256,h-=8);t[r+p-d]|=128*g;};},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return "[object Array]"==r.call(t)};},function(t,e,r){r.r(e),r.d(e,"nanoid",(function(){return s})),r.d(e,"customAlphabet",(function(){return n}));let n=(t,e=21)=>(r=e)=>{let n="",s=r;for(;s--;)n+=t[Math.random()*t.length|0];return n},s=(t=21)=>{let e="",r=t;for(;r--;)e+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64*Math.random()|0];return e};},function(t,e){},function(t,e,r){let n=r(2),s=r(36),i=r(6),o=r(14),a=r(1),l=r(15);const h={empty:!0,space:!0};t.exports=class{constructor(t){this.input=t,this.root=new a,this.current=this.root,this.spaces="",this.semicolon=!1,this.customProperty=!1,this.createTokenizer(),this.root.source={input:t,start:{offset:0,line:1,column:1}};}createTokenizer(){this.tokenizer=s(this.input);}parse(){let t;for(;!this.tokenizer.endOfFile();)switch(t=this.tokenizer.nextToken(),t[0]){case"space":this.spaces+=t[1];break;case";":this.freeSemicolon(t);break;case"}":this.end(t);break;case"comment":this.comment(t);break;case"at-word":this.atrule(t);break;case"{":this.emptyRule(t);break;default:this.other(t);}this.endFile();}comment(t){let e=new i;this.init(e,t[2]),e.source.end=this.getPosition(t[3]||t[2]);let r=t[1].slice(2,-2);if(/^\s*$/.test(r))e.text="",e.raws.left=r,e.raws.right="";else {let t=r.match(/^(\s*)([^]*\S)(\s*)$/);e.text=t[2],e.raws.left=t[1],e.raws.right=t[3];}}emptyRule(t){let e=new l;this.init(e,t[2]),e.selector="",e.raws.between="",this.current=e;}other(t){let e=!1,r=null,n=!1,s=null,i=[],o=t[1].startsWith("--"),a=[],l=t;for(;l;){if(r=l[0],a.push(l),"("===r||"["===r)s||(s=l),i.push("("===r?")":"]");else if(o&&n&&"{"===r)s||(s=l),i.push("}");else if(0===i.length){if(";"===r){if(n)return void this.decl(a,o);break}if("{"===r)return void this.rule(a);if("}"===r){this.tokenizer.back(a.pop()),e=!0;break}":"===r&&(n=!0);}else r===i[i.length-1]&&(i.pop(),0===i.length&&(s=null));l=this.tokenizer.nextToken();}if(this.tokenizer.endOfFile()&&(e=!0),i.length>0&&this.unclosedBracket(s),e&&n){if(!o)for(;a.length&&(l=a[a.length-1][0],"space"===l||"comment"===l);)this.tokenizer.back(a.pop());this.decl(a,o);}else this.unknownWord(a);}rule(t){t.pop();let e=new l;this.init(e,t[0][2]),e.raws.between=this.spacesAndCommentsFromEnd(t),this.raw(e,"selector",t),this.current=e;}decl(t,e){let r=new n;this.init(r,t[0][2]);let s,i=t[t.length-1];for(";"===i[0]&&(this.semicolon=!0,t.pop()),r.source.end=this.getPosition(i[3]||i[2]||function(t){for(let e=t.length-1;e>=0;e--){let r=t[e],n=r[3]||r[2];if(n)return n}}(t));"word"!==t[0][0];)1===t.length&&this.unknownWord(t),r.raws.before+=t.shift()[1];for(r.source.start=this.getPosition(t[0][2]),r.prop="";t.length;){let e=t[0][0];if(":"===e||"space"===e||"comment"===e)break;r.prop+=t.shift()[1];}for(r.raws.between="";t.length;){if(s=t.shift(),":"===s[0]){r.raws.between+=s[1];break}"word"===s[0]&&/\w/.test(s[1])&&this.unknownWord([s]),r.raws.between+=s[1];}"_"!==r.prop[0]&&"*"!==r.prop[0]||(r.raws.before+=r.prop[0],r.prop=r.prop.slice(1));let o,a=[];for(;t.length&&(o=t[0][0],"space"===o||"comment"===o);)a.push(t.shift());this.precheckMissedSemicolon(t);for(let e=t.length-1;e>=0;e--){if(s=t[e],"!important"===s[1].toLowerCase()){r.important=!0;let n=this.stringFrom(t,e);n=this.spacesFromEnd(t)+n," !important"!==n&&(r.raws.important=n);break}if("important"===s[1].toLowerCase()){let n=t.slice(0),s="";for(let t=e;t>0;t--){let e=n[t][0];if(0===s.trim().indexOf("!")&&"space"!==e)break;s=n.pop()[1]+s;}0===s.trim().indexOf("!")&&(r.important=!0,r.raws.important=s,t=n);}if("space"!==s[0]&&"comment"!==s[0])break}t.some(t=>"space"!==t[0]&&"comment"!==t[0])&&(r.raws.between+=a.map(t=>t[1]).join(""),a=[]),this.raw(r,"value",a.concat(t),e),r.value.includes(":")&&!e&&this.checkMissedSemicolon(t);}atrule(t){let e,r,n,s=new o;s.name=t[1].slice(1),""===s.name&&this.unnamedAtrule(s,t),this.init(s,t[2]);let i=!1,a=!1,l=[],h=[];for(;!this.tokenizer.endOfFile();){if(e=(t=this.tokenizer.nextToken())[0],"("===e||"["===e?h.push("("===e?")":"]"):"{"===e&&h.length>0?h.push("}"):e===h[h.length-1]&&h.pop(),0===h.length){if(";"===e){s.source.end=this.getPosition(t[2]),this.semicolon=!0;break}if("{"===e){a=!0;break}if("}"===e){if(l.length>0){for(n=l.length-1,r=l[n];r&&"space"===r[0];)r=l[--n];r&&(s.source.end=this.getPosition(r[3]||r[2]));}this.end(t);break}l.push(t);}else l.push(t);if(this.tokenizer.endOfFile()){i=!0;break}}s.raws.between=this.spacesAndCommentsFromEnd(l),l.length?(s.raws.afterName=this.spacesAndCommentsFromStart(l),this.raw(s,"params",l),i&&(t=l[l.length-1],s.source.end=this.getPosition(t[3]||t[2]),this.spaces=s.raws.between,s.raws.between="")):(s.raws.afterName="",s.params=""),a&&(s.nodes=[],this.current=s);}end(t){this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.semicolon=!1,this.current.raws.after=(this.current.raws.after||"")+this.spaces,this.spaces="",this.current.parent?(this.current.source.end=this.getPosition(t[2]),this.current=this.current.parent):this.unexpectedClose(t);}endFile(){this.current.parent&&this.unclosedBlock(),this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.current.raws.after=(this.current.raws.after||"")+this.spaces;}freeSemicolon(t){if(this.spaces+=t[1],this.current.nodes){let t=this.current.nodes[this.current.nodes.length-1];t&&"rule"===t.type&&!t.raws.ownSemicolon&&(t.raws.ownSemicolon=this.spaces,this.spaces="");}}getPosition(t){let e=this.input.fromOffset(t);return {offset:t,line:e.line,column:e.col}}init(t,e){this.current.push(t),t.source={start:this.getPosition(e),input:this.input},t.raws.before=this.spaces,this.spaces="","comment"!==t.type&&(this.semicolon=!1);}raw(t,e,r,n){let s,i,o,a,l=r.length,u="",c=!0;for(let t=0;t<l;t+=1)s=r[t],i=s[0],"space"!==i||t!==l-1||n?"comment"===i?(a=r[t-1]?r[t-1][0]:"empty",o=r[t+1]?r[t+1][0]:"empty",h[a]||h[o]||","===u.slice(-1)?c=!1:u+=s[1]):u+=s[1]:c=!1;if(!c){let n=r.reduce((t,e)=>t+e[1],"");t.raws[e]={value:u,raw:n};}t[e]=u;}spacesAndCommentsFromEnd(t){let e,r="";for(;t.length&&(e=t[t.length-1][0],"space"===e||"comment"===e);)r=t.pop()[1]+r;return r}spacesAndCommentsFromStart(t){let e,r="";for(;t.length&&(e=t[0][0],"space"===e||"comment"===e);)r+=t.shift()[1];return r}spacesFromEnd(t){let e,r="";for(;t.length&&(e=t[t.length-1][0],"space"===e);)r=t.pop()[1]+r;return r}stringFrom(t,e){let r="";for(let n=e;n<t.length;n++)r+=t[n][1];return t.splice(e,t.length-e),r}colon(t){let e,r,n,s=0;for(let[i,o]of t.entries()){if(e=o,r=e[0],"("===r&&(s+=1),")"===r&&(s-=1),0===s&&":"===r){if(n){if("word"===n[0]&&"progid"===n[1])continue;return i}this.doubleColon(e);}n=e;}return !1}unclosedBracket(t){throw this.input.error("Unclosed bracket",{offset:t[2]},{offset:t[2]+1})}unknownWord(t){throw this.input.error("Unknown word",{offset:t[0][2]},{offset:t[0][2]+t[0][1].length})}unexpectedClose(t){throw this.input.error("Unexpected }",{offset:t[2]},{offset:t[2]+1})}unclosedBlock(){let t=this.current.source.start;throw this.input.error("Unclosed block",t.line,t.column)}doubleColon(t){throw this.input.error("Double colon",{offset:t[2]},{offset:t[2]+t[1].length})}unnamedAtrule(t,e){throw this.input.error("At-rule without name",{offset:e[2]},{offset:e[2]+e[1].length})}precheckMissedSemicolon(){}checkMissedSemicolon(t){let e=this.colon(t);if(!1===e)return;let r,n=0;for(let s=e-1;s>=0&&(r=t[s],"space"===r[0]||(n+=1,2!==n));s--);throw this.input.error("Missed semicolon","word"===r[0]?r[3]+1:r[2])}};},function(t,e,r){const n="'".charCodeAt(0),s='"'.charCodeAt(0),i="\\".charCodeAt(0),o="/".charCodeAt(0),a="\n".charCodeAt(0),l=" ".charCodeAt(0),h="\f".charCodeAt(0),u="\t".charCodeAt(0),c="\r".charCodeAt(0),f="[".charCodeAt(0),p="]".charCodeAt(0),d="(".charCodeAt(0),g=")".charCodeAt(0),m="{".charCodeAt(0),y="}".charCodeAt(0),w=";".charCodeAt(0),b="*".charCodeAt(0),v=":".charCodeAt(0),x="@".charCodeAt(0),A=/[\t\n\f\r "#'()/;[\\\]{}]/g,E=/[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g,S=/.[\n"'(/\\]/,C=/[\da-f]/i;t.exports=function(t,e={}){let r,O,R,P,k,_,T,B,U,M,I=t.css.valueOf(),L=e.ignoreErrors,D=I.length,j=0,Y=[],F=[];function z(e){throw t.error("Unclosed "+e,j)}return {back:function(t){F.push(t);},nextToken:function(t){if(F.length)return F.pop();if(j>=D)return;let e=!!t&&t.ignoreUnclosed;switch(r=I.charCodeAt(j),r){case a:case l:case u:case c:case h:O=j;do{O+=1,r=I.charCodeAt(O);}while(r===l||r===a||r===u||r===c||r===h);M=["space",I.slice(j,O)],j=O-1;break;case f:case p:case m:case y:case v:case w:case g:{let t=String.fromCharCode(r);M=[t,t,j];break}case d:if(B=Y.length?Y.pop()[1]:"",U=I.charCodeAt(j+1),"url"===B&&U!==n&&U!==s&&U!==l&&U!==a&&U!==u&&U!==h&&U!==c){O=j;do{if(_=!1,O=I.indexOf(")",O+1),-1===O){if(L||e){O=j;break}z("bracket");}for(T=O;I.charCodeAt(T-1)===i;)T-=1,_=!_;}while(_);M=["brackets",I.slice(j,O+1),j,O],j=O;}else O=I.indexOf(")",j+1),P=I.slice(j,O+1),-1===O||S.test(P)?M=["(","(",j]:(M=["brackets",P,j,O],j=O);break;case n:case s:R=r===n?"'":'"',O=j;do{if(_=!1,O=I.indexOf(R,O+1),-1===O){if(L||e){O=j+1;break}z("string");}for(T=O;I.charCodeAt(T-1)===i;)T-=1,_=!_;}while(_);M=["string",I.slice(j,O+1),j,O],j=O;break;case x:A.lastIndex=j+1,A.test(I),O=0===A.lastIndex?I.length-1:A.lastIndex-2,M=["at-word",I.slice(j,O+1),j,O],j=O;break;case i:for(O=j,k=!0;I.charCodeAt(O+1)===i;)O+=1,k=!k;if(r=I.charCodeAt(O+1),k&&r!==o&&r!==l&&r!==a&&r!==u&&r!==c&&r!==h&&(O+=1,C.test(I.charAt(O)))){for(;C.test(I.charAt(O+1));)O+=1;I.charCodeAt(O+1)===l&&(O+=1);}M=["word",I.slice(j,O+1),j,O],j=O;break;default:r===o&&I.charCodeAt(j+1)===b?(O=I.indexOf("*/",j+2)+1,0===O&&(L||e?O=I.length:z("comment")),M=["comment",I.slice(j,O+1),j,O],j=O):(E.lastIndex=j+1,E.test(I),O=0===E.lastIndex?I.length-1:E.lastIndex-2,M=["word",I.slice(j,O+1),j,O],Y.push(M),j=O);}return j++,M},endOfFile:function(){return 0===F.length&&j>=D},position:function(){return j}}};},function(t,e,r){let n=r(38),s=r(18),i=r(11),o=r(1);class a{constructor(t=[]){this.version="8.4.16",this.plugins=this.normalize(t);}use(t){return this.plugins=this.plugins.concat(this.normalize([t])),this}process(t,e={}){return 0===this.plugins.length&&void 0===e.parser&&void 0===e.stringifier&&void 0===e.syntax?new n(this,t,e):new s(this,t,e)}normalize(t){let e=[];for(let r of t)if(!0===r.postcss?r=r():r.postcss&&(r=r.postcss),"object"==typeof r&&Array.isArray(r.plugins))e=e.concat(r.plugins);else if("object"==typeof r&&r.postcssPlugin)e.push(r);else if("function"==typeof r)e.push(r);else {if("object"!=typeof r||!r.parse&&!r.stringify)throw new Error(r+" is not a PostCSS plugin")}return e}}t.exports=a,a.default=a,o.registerProcessor(a),i.registerProcessor(a);},function(t,e,r){let n=r(19),s=r(4),i=(r(23),r(13));const o=r(12);class a{constructor(t,e,r){e=e.toString(),this.stringified=!1,this._processor=t,this._css=e,this._opts=r,this._map=void 0;let i=s;this.result=new o(this._processor,void 0,this._opts),this.result.css=e;let a=this;Object.defineProperty(this.result,"root",{get:()=>a.root});let l=new n(i,void 0,this._opts,e);if(l.isMap()){let[t,e]=l.generate();t&&(this.result.css=t),e&&(this.result.map=e);}}get[Symbol.toStringTag](){return "NoWorkResult"}get processor(){return this.result.processor}get opts(){return this.result.opts}get css(){return this.result.css}get content(){return this.result.css}get map(){return this.result.map}get root(){if(this._root)return this._root;let t,e=i;try{t=e(this._css,this._opts);}catch(t){this.error=t;}if(this.error)throw this.error;return this._root=t,t}get messages(){return []}warnings(){return []}toString(){return this._css}then(t,e){return this.async().then(t,e)}catch(t){return this.async().catch(t)}finally(t){return this.async().then(t,t)}async(){return this.error?Promise.reject(this.error):Promise.resolve(this.result)}sync(){if(this.error)throw this.error;return this.result}}t.exports=a,a.default=a;},function(t,e,r){let n=r(2),s=r(22),i=r(6),o=r(14),a=r(5),l=r(1),h=r(15);function u(t,e){if(Array.isArray(t))return t.map(t=>u(t));let{inputs:r,...c}=t;if(r){e=[];for(let t of r){let r={...t,__proto__:a.prototype};r.map&&(r.map={...r.map,__proto__:s.prototype}),e.push(r);}}if(c.nodes&&(c.nodes=t.nodes.map(t=>u(t,e))),c.source){let{inputId:t,...r}=c.source;c.source=r,null!=t&&(c.source.input=e[t]);}if("root"===c.type)return new l(c);if("decl"===c.type)return new n(c);if("rule"===c.type)return new h(c);if("comment"===c.type)return new i(c);if("atrule"===c.type)return new o(c);throw new Error("Unknown node type: "+t.type)}t.exports=u,u.default=u;}]);
	});

	unwrapExports(postcss);

	function unescapeCssString(str) {
	  return str.replace(
	    /\\([0-9a-f]{1,6})(\s?)/gi,
	    ($0, hexChars, followingWhitespace) =>
	      `${String.fromCharCode(parseInt(hexChars, 16))}${
        hexChars.length === 6 ? followingWhitespace : ''
      }`
	  );
	}

	var unquote = function unquote(str) {
	  if (typeof str !== 'string') {
	    return str;
	  }

	  return str.replace(
	    /^'([^']*)'$|^"([^"]*)"$/,
	    ($0, singleQuoted, doubleQuoted) =>
	      typeof singleQuoted === 'string'
	        ? unescapeCssString(singleQuoted.replace(/\\'/g, "'"))
	        : unescapeCssString(doubleQuoted.replace(/\\"/g, '"'))
	  );
	};

	const counterRendererNames = new Set([
	  'none',
	  'disc',
	  'circle',
	  'square',
	  'decimal',
	  'decimal-leading-zero',
	  'lower-roman',
	  'upper-roman',
	  'lower-greek',
	  'lower-latin',
	  'lower-alpha',
	  'upper-latin',
	  'upper-alpha',
	  'armenian',
	  'georgian',
	  'hebrew',
	]);

	function unwrapNamespace(str) {
	  if (/^"/.test(str)) {
	    return unquote(str);
	  } else if (/^url\(.*\)$/i.test(str)) {
	    return unquote(str.replace(/^url\((.*)\)$/, '$1'));
	  } else {
	    throw new Error(`Cannot parse CSS namespace: ${str}`);
	  }
	}

	function getCssRulesByProperty(properties, cssSource, existingPredicates) {
	  if (!Array.isArray(properties)) {
	    throw new Error('properties argument must be an array');
	  }
	  if (typeof cssSource !== 'string') {
	    throw new Error('cssSource argument must be a string containing valid CSS');
	  }
	  existingPredicates = existingPredicates || {};

	  const parseTree = postcss.parse(cssSource);
	  let defaultNamespaceURI;
	  parseTree.walkAtRules('namespace', (rule) => {
	    const fragments = rule.params.split(/\s+/);
	    if (fragments.length === 1) {
	      defaultNamespaceURI = unwrapNamespace(rule.params);
	    }
	    // FIXME: Support registering namespace prefixes (fragments.length === 2):
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/@namespace
	  });
	  const rulesByProperty = {
	    counterStyles: [],
	    keyframes: [],
	  };

	  for (const property of properties) {
	    rulesByProperty[property] = [];
	  }

	  const activeCssQueryPredicates = [];
	  function getCurrentPredicates() {
	    if (activeCssQueryPredicates.length > 0) {
	      const predicates = { ...existingPredicates };
	      for (const predicate of activeCssQueryPredicates) {
	        predicates[predicate] = true;
	      }
	      return predicates;
	    } else {
	      return existingPredicates;
	    }
	  }

	  (function visit(node) {
	    // Check for selector. We might be in an at-rule like @font-face
	    if (node.type === 'decl' && node.parent.selector) {
	      const isCustomProperty = /^--/.test(node.prop);
	      const propName = isCustomProperty ? node.prop : node.prop.toLowerCase(); // Custom properties ARE case sensitive
	      if (isCustomProperty || properties.includes(propName)) {
	        // Split up combined selectors as they might have different specificity
	        specificity
	          .calculate(node.parent.selector)
	          .forEach((specificityObject) => {
	            const isStyleAttribute =
	              specificityObject.selector === 'bogusselector';
	            (rulesByProperty[propName] = rulesByProperty[propName] || []).push({
	              predicates: getCurrentPredicates(),
	              namespaceURI: defaultNamespaceURI,
	              selector: isStyleAttribute
	                ? undefined
	                : specificityObject.selector.trim(),
	              specificityArray: isStyleAttribute
	                ? [1, 0, 0, 0]
	                : specificityObject.specificityArray,
	              prop: propName,
	              value: node.value,
	              important: !!node.important,
	            });
	          });
	      } else if (
	        propName === 'list-style' &&
	        properties.includes('list-style-type')
	      ) {
	        // Shorthand
	        let listStyleType;
	        node.value.replace(
	          /"((?:[^"]|\\.)*")|'((?:[^']|\\.)*)'|([^'"]+)/,
	          ($0, doubleQuotedString, singleQuotedString, other) => {
	            if (typeof doubleQuotedString === 'string') {
	              listStyleType = doubleQuotedString;
	            } else if (typeof singleQuotedString === 'string') {
	              listStyleType = singleQuotedString;
	            } else if (other) {
	              for (const otherFragment of other.trim().split(' ')) {
	                if (counterRendererNames.has(otherFragment)) {
	                  listStyleType = otherFragment;
	                }
	              }
	            }
	          }
	        );

	        if (typeof listStyleType !== 'undefined') {
	          // Split up combined selectors as they might have different specificity
	          specificity
	            .calculate(node.parent.selector)
	            .forEach((specificityObject) => {
	              const isStyleAttribute =
	                specificityObject.selector === 'bogusselector';

	              rulesByProperty['list-style-type'].push({
	                predicates: getCurrentPredicates(),
	                namespaceURI: defaultNamespaceURI,
	                selector: isStyleAttribute
	                  ? undefined
	                  : specificityObject.selector.trim(),
	                specificityArray: isStyleAttribute
	                  ? [1, 0, 0, 0]
	                  : specificityObject.specificityArray,
	                prop: 'list-style-type',
	                value: listStyleType,
	                important: !!node.important,
	              });
	            });
	        }
	      } else if (
	        propName === 'animation' &&
	        properties.includes('animation-name')
	      ) {
	        // Shorthand
	        const animationName = node.value.split(' ').pop();

	        // Split up combined selectors as they might have different specificity
	        specificity
	          .calculate(node.parent.selector)
	          .forEach((specificityObject) => {
	            const isStyleAttribute =
	              specificityObject.selector === 'bogusselector';

	            rulesByProperty['animation-name'].push({
	              predicates: getCurrentPredicates(),
	              namespaceURI: defaultNamespaceURI,
	              selector: isStyleAttribute
	                ? undefined
	                : specificityObject.selector.trim(),
	              specificityArray: isStyleAttribute
	                ? [1, 0, 0, 0]
	                : specificityObject.specificityArray,
	              prop: 'animation-name',
	              value: animationName,
	              important: !!node.important,
	            });
	          });
	      } else if (propName === 'transition') {
	        // Shorthand
	        const transitionProperties = [];
	        const transitionDurations = [];
	        for (const item of node.value.split(/\s*,\s*/)) {
	          const itemFragments = item.split(/\s+/);
	          if (itemFragments.length > 0) {
	            transitionProperties.push(itemFragments[0]);
	          }
	          if (itemFragments.length > 1) {
	            transitionDurations.push(itemFragments[1]);
	          }
	        }

	        // Split up combined selectors as they might have different specificity
	        specificity
	          .calculate(node.parent.selector)
	          .forEach((specificityObject) => {
	            const isStyleAttribute =
	              specificityObject.selector === 'bogusselector';
	            if (properties.includes('transition-property')) {
	              rulesByProperty['transition-property'].push({
	                predicates: getCurrentPredicates(),
	                namespaceURI: defaultNamespaceURI,
	                selector: isStyleAttribute
	                  ? undefined
	                  : specificityObject.selector.trim(),
	                specificityArray: isStyleAttribute
	                  ? [1, 0, 0, 0]
	                  : specificityObject.specificityArray,
	                prop: 'transition-property',
	                value: transitionProperties.join(', '),
	                important: !!node.important,
	              });
	            }
	            if (properties.includes('transition-duration')) {
	              rulesByProperty['transition-duration'].push({
	                predicates: getCurrentPredicates(),
	                namespaceURI: defaultNamespaceURI,
	                selector: isStyleAttribute
	                  ? undefined
	                  : specificityObject.selector.trim(),
	                specificityArray: isStyleAttribute
	                  ? [1, 0, 0, 0]
	                  : specificityObject.specificityArray,
	                prop: 'transition-duration',
	                value: transitionDurations.join(', '),
	                important: !!node.important,
	              });
	            }
	          });
	      } else if (propName === 'font') {
	        specificity
	          .calculate(node.parent.selector)
	          .forEach((specificityObject) => {
	            const isStyleAttribute =
	              specificityObject.selector === 'bogusselector';
	            const value = {
	              predicates: getCurrentPredicates(),
	              namespaceURI: defaultNamespaceURI,
	              selector: isStyleAttribute
	                ? undefined
	                : specificityObject.selector.trim(),
	              specificityArray: isStyleAttribute
	                ? [1, 0, 0, 0]
	                : specificityObject.specificityArray,
	              prop: 'font',
	              value: node.value,
	              important: !!node.important,
	            };

	            for (const prop of [
	              'font-family',
	              'font-weight',
	              'font-size',
	              'font-style',
	            ]) {
	              if (properties.includes(prop)) {
	                rulesByProperty[prop].push(value);
	              }
	            }
	          });
	      }
	    } else if (
	      node.type === 'atrule' &&
	      node.name.toLowerCase() === 'counter-style'
	    ) {
	      const props = {};
	      for (const childNode of node.nodes) {
	        props[childNode.prop] = childNode.value;
	      }
	      rulesByProperty.counterStyles.push({
	        name: node.params,
	        predicates: getCurrentPredicates(),
	        props,
	      });
	    } else if (
	      node.type === 'atrule' &&
	      node.name.toLowerCase() === 'keyframes'
	    ) {
	      rulesByProperty.keyframes.push({
	        name: node.params,
	        namespaceURI: defaultNamespaceURI,
	        predicates: getCurrentPredicates(),
	        node,
	      });
	      return;
	    }

	    if (node.nodes) {
	      let popAfter = false;
	      if (node.type === 'atrule') {
	        const name = node.name.toLowerCase();
	        if (name === 'media' || name === 'supports') {
	          activeCssQueryPredicates.push(`${name}Query:${node.params}`);
	          popAfter = true;
	        }
	      }
	      for (const childNode of node.nodes) {
	        visit(childNode);
	      }
	      if (popAfter) {
	        activeCssQueryPredicates.pop();
	      }
	    }
	  })(parseTree);

	  // TODO: Collapse into a single object for duplicate values?

	  return rulesByProperty;
	}

	var getCssRulesByProperty_1 = getCssRulesByProperty;

	var index_browser = function (document, options) {
	  return fontTracer_1(document, {
	    stylesheetsWithPredicates: gatherStylesheetsWithPredicates_1(document),
	    getCssRulesByProperty: getCssRulesByProperty_1,
	    ...options,
	  });
	};

	return index_browser;

}));
//# sourceMappingURL=fontTracer.browser.js.map
